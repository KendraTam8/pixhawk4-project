
c:/Users/kendr/OneDrive/Documents/GitHub/Particle/ParticleBoron/target/1.4.4/boron/ParticleBoron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002694  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001674c  2**0
                  CONTENTS
  4 .data         00000070  2003e21c  000d66b0  0000e21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000564  2003e28c  2003e28c  0001e28c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6720  000d6720  00016720  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6748  000d6748  00016748  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c86c1  00000000  00000000  0001674c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f6df  00000000  00000000  000dee0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e1f1  00000000  00000000  000ee4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022a8  00000000  00000000  0010c6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000043c8  00000000  00000000  0010e985  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031f89  00000000  00000000  00112d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024af4  00000000  00000000  00144cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00100bed  00000000  00000000  001697ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c97c  00000000  00000000  0026a3b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 ff7d 	bl	d5f2c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 ff82 	bl	d5f42 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e21c 	.word	0x2003e21c
   d4048:	000d66b0 	.word	0x000d66b0
   d404c:	2003e28c 	.word	0x2003e28c
   d4050:	2003e28c 	.word	0x2003e28c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 ffa1 	bl	d4fa0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d66a8 	.word	0x000d66a8
   d4080:	000d666c 	.word	0x000d666c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b908 	b.w	d4298 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f83b 	bl	d4104 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bf53 	b.w	d4f3c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc9f 	b.w	d49d8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bca5 	b.w	d49e8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bca3 	b.w	d49e8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b2:	6810      	ldr	r0, [r2, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z10getMavlink6String>:
        }
    }
	delay(5);
}

int getMavlink(String request) {
   d40b8:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ba:	4905      	ldr	r1, [pc, #20]	; (d40d0 <_Z10getMavlink6String+0x18>)
   d40bc:	f000 fe4a 	bl	d4d54 <_ZNK6String6equalsEPKc>
	if (request == "1") {
   d40c0:	b128      	cbz	r0, d40ce <_Z10getMavlink6String+0x16>
		Serial1.println("*");
   d40c2:	f001 fc1d 	bl	d5900 <_Z22__fetch_global_Serial1v>
   d40c6:	4903      	ldr	r1, [pc, #12]	; (d40d4 <_Z10getMavlink6String+0x1c>)
   d40c8:	f000 fe9f 	bl	d4e0a <_ZN5Print7printlnEPKc>
   d40cc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d40ce:	bd08      	pop	{r3, pc}
   d40d0:	000d62de 	.word	0x000d62de
   d40d4:	000d6144 	.word	0x000d6144

000d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40d8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40da:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40dc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40de:	b17c      	cbz	r4, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	3b01      	subs	r3, #1
   d40e4:	6063      	str	r3, [r4, #4]
   d40e6:	b95b      	cbnz	r3, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	4620      	mov	r0, r4
   d40ec:	689b      	ldr	r3, [r3, #8]
   d40ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f0:	68a3      	ldr	r3, [r4, #8]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	60a3      	str	r3, [r4, #8]
   d40f6:	b91b      	cbnz	r3, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	68db      	ldr	r3, [r3, #12]
   d40fe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4100:	4628      	mov	r0, r5
   d4102:	bd38      	pop	{r3, r4, r5, pc}

000d4104 <loop>:
	twilioMsg += String(TOTAL_TYPES) + " - All";
	Particle.publish("twilio_sms", twilioMsg, PRIVATE);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4104:	b510      	push	{r4, lr}
	
	if (stateSMS == 1) {
   d4106:	4b45      	ldr	r3, [pc, #276]	; (d421c <loop+0x118>)
   d4108:	681a      	ldr	r2, [r3, #0]
   d410a:	2a01      	cmp	r2, #1
	twilioMsg += String(TOTAL_TYPES) + " - All";
	Particle.publish("twilio_sms", twilioMsg, PRIVATE);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d410c:	b086      	sub	sp, #24
	
	if (stateSMS == 1) {
   d410e:	d10c      	bne.n	d412a <loop+0x26>
		// total = 1;
		// if (infoSMS == 12) {
		// 	total = 12;
		// }
		stateSMS = 2;
   d4110:	2202      	movs	r2, #2
		getMavlink("1");
   d4112:	4943      	ldr	r1, [pc, #268]	; (d4220 <loop+0x11c>)
	if (stateSMS == 1) {
		// total = 1;
		// if (infoSMS == 12) {
		// 	total = 12;
		// }
		stateSMS = 2;
   d4114:	601a      	str	r2, [r3, #0]
		getMavlink("1");
   d4116:	a802      	add	r0, sp, #8
   d4118:	f000 fd82 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d411c:	a802      	add	r0, sp, #8
   d411e:	f7ff ffcb 	bl	d40b8 <_Z10getMavlink6String>
   d4122:	a802      	add	r0, sp, #8
   d4124:	f000 fd35 	bl	d4b92 <_ZN6StringD1Ev>
   d4128:	e011      	b.n	d414e <loop+0x4a>
	}
	else if (stateSMS == 3) {
   d412a:	2a03      	cmp	r2, #3
   d412c:	d10f      	bne.n	d414e <loop+0x4a>
		stateSMS = 0;
   d412e:	2200      	movs	r2, #0
   d4130:	601a      	str	r2, [r3, #0]
   d4132:	4b3c      	ldr	r3, [pc, #240]	; (d4224 <loop+0x120>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4134:	493c      	ldr	r1, [pc, #240]	; (d4228 <loop+0x124>)
   d4136:	681a      	ldr	r2, [r3, #0]
   d4138:	4b3c      	ldr	r3, [pc, #240]	; (d422c <loop+0x128>)
   d413a:	781b      	ldrb	r3, [r3, #0]
   d413c:	f88d 3000 	strb.w	r3, [sp]
   d4140:	a802      	add	r0, sp, #8
   d4142:	233c      	movs	r3, #60	; 0x3c
   d4144:	f001 f8b4 	bl	d52b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4148:	a803      	add	r0, sp, #12
   d414a:	f7ff ffc5 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		Particle.publish("twilio_sms", twilioMsg, PRIVATE);
	}

    if (Serial1.available() > 0) {
   d414e:	f001 fbd7 	bl	d5900 <_Z22__fetch_global_Serial1v>
   d4152:	6803      	ldr	r3, [r0, #0]
   d4154:	691b      	ldr	r3, [r3, #16]
   d4156:	4798      	blx	r3
   d4158:	2800      	cmp	r0, #0
   d415a:	dd5a      	ble.n	d4212 <loop+0x10e>
        incomingByte = Serial1.read();
   d415c:	f001 fbd0 	bl	d5900 <_Z22__fetch_global_Serial1v>
   d4160:	6803      	ldr	r3, [r0, #0]
        letter = incomingByte;
   d4162:	4c33      	ldr	r4, [pc, #204]	; (d4230 <loop+0x12c>)
		stateSMS = 0;
		Particle.publish("twilio_sms", twilioMsg, PRIVATE);
	}

    if (Serial1.available() > 0) {
        incomingByte = Serial1.read();
   d4164:	695b      	ldr	r3, [r3, #20]
   d4166:	4798      	blx	r3
   d4168:	4b32      	ldr	r3, [pc, #200]	; (d4234 <loop+0x130>)
        letter = incomingByte;
   d416a:	7020      	strb	r0, [r4, #0]
		stateSMS = 0;
		Particle.publish("twilio_sms", twilioMsg, PRIVATE);
	}

    if (Serial1.available() > 0) {
        incomingByte = Serial1.read();
   d416c:	6018      	str	r0, [r3, #0]
        letter = incomingByte;
		Serial.print(letter);
   d416e:	f001 faf5 	bl	d575c <_Z16_fetch_usbserialv>
   d4172:	7821      	ldrb	r1, [r4, #0]
   d4174:	f000 fe3a 	bl	d4dec <_ZN5Print5printEc>
        if (letter == ':' || count >= maxlimit) {
   d4178:	7821      	ldrb	r1, [r4, #0]
   d417a:	4c2f      	ldr	r4, [pc, #188]	; (d4238 <loop+0x134>)
   d417c:	293a      	cmp	r1, #58	; 0x3a
   d417e:	d003      	beq.n	d4188 <loop+0x84>
   d4180:	6823      	ldr	r3, [r4, #0]
   d4182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d4186:	db05      	blt.n	d4194 <loop+0x90>

			dataType = phrase.toInt();
   d4188:	482c      	ldr	r0, [pc, #176]	; (d423c <loop+0x138>)
   d418a:	f000 fdf5 	bl	d4d78 <_ZNK6String5toIntEv>
   d418e:	4b2c      	ldr	r3, [pc, #176]	; (d4240 <loop+0x13c>)
   d4190:	6018      	str	r0, [r3, #0]
   d4192:	e032      	b.n	d41fa <loop+0xf6>
            phrase = "";
            count = 0;
        }
		else if (letter == '\n' || count >= maxlimit){
   d4194:	290a      	cmp	r1, #10
   d4196:	d137      	bne.n	d4208 <loop+0x104>
			switch(dataType) {
   d4198:	4b29      	ldr	r3, [pc, #164]	; (d4240 <loop+0x13c>)
   d419a:	681b      	ldr	r3, [r3, #0]
   d419c:	2b0b      	cmp	r3, #11
   d419e:	d82c      	bhi.n	d41fa <loop+0xf6>
   d41a0:	e8df f003 	tbb	[pc, r3]
   d41a4:	0f0c0906 	.word	0x0f0c0906
   d41a8:	1b181512 	.word	0x1b181512
   d41ac:	2724211e 	.word	0x2724211e
				case VOLT:
					voltage = phrase;
   d41b0:	4922      	ldr	r1, [pc, #136]	; (d423c <loop+0x138>)
   d41b2:	4824      	ldr	r0, [pc, #144]	; (d4244 <loop+0x140>)
   d41b4:	e01f      	b.n	d41f6 <loop+0xf2>
					break;
				case BATT_REMAIN:
					battery = phrase;
   d41b6:	4921      	ldr	r1, [pc, #132]	; (d423c <loop+0x138>)
   d41b8:	4823      	ldr	r0, [pc, #140]	; (d4248 <loop+0x144>)
   d41ba:	e01c      	b.n	d41f6 <loop+0xf2>
					break;
				case GPS_LAT:
					latitude = phrase;
   d41bc:	491f      	ldr	r1, [pc, #124]	; (d423c <loop+0x138>)
   d41be:	4823      	ldr	r0, [pc, #140]	; (d424c <loop+0x148>)
   d41c0:	e019      	b.n	d41f6 <loop+0xf2>
					break;
				case GPS_LONG:
					longitude = phrase;
   d41c2:	491e      	ldr	r1, [pc, #120]	; (d423c <loop+0x138>)
   d41c4:	4822      	ldr	r0, [pc, #136]	; (d4250 <loop+0x14c>)
   d41c6:	e016      	b.n	d41f6 <loop+0xf2>
					break;
				case GPS_SATS_VIS:
					satsVisible = phrase;
   d41c8:	491c      	ldr	r1, [pc, #112]	; (d423c <loop+0x138>)
   d41ca:	4822      	ldr	r0, [pc, #136]	; (d4254 <loop+0x150>)
   d41cc:	e013      	b.n	d41f6 <loop+0xf2>
					break;
				case ALT:
					altitude = phrase;
   d41ce:	491b      	ldr	r1, [pc, #108]	; (d423c <loop+0x138>)
   d41d0:	4821      	ldr	r0, [pc, #132]	; (d4258 <loop+0x154>)
   d41d2:	e010      	b.n	d41f6 <loop+0xf2>
					break;
				case ALT_ROLL:
					roll = phrase;
   d41d4:	4919      	ldr	r1, [pc, #100]	; (d423c <loop+0x138>)
   d41d6:	4821      	ldr	r0, [pc, #132]	; (d425c <loop+0x158>)
   d41d8:	e00d      	b.n	d41f6 <loop+0xf2>
					break;
				case ALT_PITCH:
					pitch = phrase;
   d41da:	4918      	ldr	r1, [pc, #96]	; (d423c <loop+0x138>)
   d41dc:	4820      	ldr	r0, [pc, #128]	; (d4260 <loop+0x15c>)
   d41de:	e00a      	b.n	d41f6 <loop+0xf2>
					break;
				case ALT_YAW:
					yaw = phrase;
   d41e0:	4916      	ldr	r1, [pc, #88]	; (d423c <loop+0x138>)
   d41e2:	4820      	ldr	r0, [pc, #128]	; (d4264 <loop+0x160>)
   d41e4:	e007      	b.n	d41f6 <loop+0xf2>
					break;
				case MISS_CURR:
					missionCurr = phrase;
   d41e6:	4915      	ldr	r1, [pc, #84]	; (d423c <loop+0x138>)
   d41e8:	481f      	ldr	r0, [pc, #124]	; (d4268 <loop+0x164>)
   d41ea:	e004      	b.n	d41f6 <loop+0xf2>
					break;
				case VFR_AIRSPEED:
					airspeed = phrase;
   d41ec:	4913      	ldr	r1, [pc, #76]	; (d423c <loop+0x138>)
   d41ee:	481f      	ldr	r0, [pc, #124]	; (d426c <loop+0x168>)
   d41f0:	e001      	b.n	d41f6 <loop+0xf2>
					break;
				case VFR_HEAD:
					heading = phrase;
   d41f2:	4912      	ldr	r1, [pc, #72]	; (d423c <loop+0x138>)
   d41f4:	481e      	ldr	r0, [pc, #120]	; (d4270 <loop+0x16c>)
   d41f6:	f000 fd26 	bl	d4c46 <_ZN6StringaSERKS_>
					break;
				default:
					break;
			}
            phrase = "";
   d41fa:	491e      	ldr	r1, [pc, #120]	; (d4274 <loop+0x170>)
   d41fc:	480f      	ldr	r0, [pc, #60]	; (d423c <loop+0x138>)
   d41fe:	f000 fd3c 	bl	d4c7a <_ZN6StringaSEPKc>
            count = 0;
   d4202:	2300      	movs	r3, #0
   d4204:	6023      	str	r3, [r4, #0]
   d4206:	e004      	b.n	d4212 <loop+0x10e>
		}
        else {
            count++;
   d4208:	3301      	adds	r3, #1

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d420a:	480c      	ldr	r0, [pc, #48]	; (d423c <loop+0x138>)
   d420c:	6023      	str	r3, [r4, #0]
   d420e:	f000 fd82 	bl	d4d16 <_ZN6String6concatEc>
			phrase += letter;
        }
    }
	delay(5);
   d4212:	2005      	movs	r0, #5
   d4214:	f000 fe44 	bl	d4ea0 <delay>
}
   d4218:	b006      	add	sp, #24
   d421a:	bd10      	pop	{r4, pc}
   d421c:	2003e2c4 	.word	0x2003e2c4
   d4220:	000d62de 	.word	0x000d62de
   d4224:	2003e360 	.word	0x2003e360
   d4228:	000d6146 	.word	0x000d6146
   d422c:	2003e328 	.word	0x2003e328
   d4230:	2003e390 	.word	0x2003e390
   d4234:	2003e34c 	.word	0x2003e34c
   d4238:	2003e290 	.word	0x2003e290
   d423c:	2003e318 	.word	0x2003e318
   d4240:	2003e394 	.word	0x2003e394
   d4244:	2003e2f8 	.word	0x2003e2f8
   d4248:	2003e3a8 	.word	0x2003e3a8
   d424c:	2003e380 	.word	0x2003e380
   d4250:	2003e294 	.word	0x2003e294
   d4254:	2003e398 	.word	0x2003e398
   d4258:	2003e2b4 	.word	0x2003e2b4
   d425c:	2003e32c 	.word	0x2003e32c
   d4260:	2003e2a4 	.word	0x2003e2a4
   d4264:	2003e33c 	.word	0x2003e33c
   d4268:	2003e370 	.word	0x2003e370
   d426c:	2003e308 	.word	0x2003e308
   d4270:	2003e350 	.word	0x2003e350
   d4274:	000d6373 	.word	0x000d6373

000d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>:
};

class CloudClass {
  public:
    template <typename T, class ... Types>
    static inline bool variable(const T &name, const Types& ... args)
   d4278:	b507      	push	{r0, r1, r2, lr}

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d427a:	2308      	movs	r3, #8
   d427c:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d4280:	4b04      	ldr	r3, [pc, #16]	; (d4294 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_+0x1c>)
   d4282:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d4284:	2204      	movs	r2, #4
   d4286:	466b      	mov	r3, sp
   d4288:	f000 fb76 	bl	d4978 <spark_variable>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, args...);
    }
   d428c:	b003      	add	sp, #12
   d428e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4292:	bf00      	nop
   d4294:	000d40b3 	.word	0x000d40b3

000d4298 <setup>:
int stateSMS = 0;	// 0=nothing, 1=first call, 2=get data, 3=done	
int infoSMS = 12;
String *mavlinkDataList[TOTAL_TYPES];

// setup() runs once, when the device is first turned on.
void setup() {
   d4298:	b510      	push	{r4, lr}
   d429a:	b08a      	sub	sp, #40	; 0x28
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d429c:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
   d429e:	2308      	movs	r3, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d42a0:	9406      	str	r4, [sp, #24]
        conn_prop.size = sizeof(conn_prop);
   d42a2:	f8ad 3018 	strh.w	r3, [sp, #24]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d42a6:	2301      	movs	r3, #1
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d42a8:	aa06      	add	r2, sp, #24
   d42aa:	4974      	ldr	r1, [pc, #464]	; (d447c <setup+0x1e4>)
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d42ac:	9307      	str	r3, [sp, #28]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d42ae:	4620      	mov	r0, r4
   d42b0:	4623      	mov	r3, r4
   d42b2:	f000 fb81 	bl	d49b8 <spark_set_connection_property>
    // Set the keep-alive value for 3rd party SIM card here
    Particle.keepAlive(120);

    Serial.begin();
   d42b6:	f001 fa51 	bl	d575c <_Z16_fetch_usbserialv>
   d42ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42be:	f001 fa41 	bl	d5744 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
   d42c2:	f001 fb1d 	bl	d5900 <_Z22__fetch_global_Serial1v>
   d42c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42ca:	f001 fb15 	bl	d58f8 <_ZN11USARTSerial5beginEm>

    Particle.variable("voltage", voltage);
   d42ce:	496c      	ldr	r1, [pc, #432]	; (d4480 <setup+0x1e8>)
   d42d0:	486c      	ldr	r0, [pc, #432]	; (d4484 <setup+0x1ec>)
   d42d2:	f7ff ffd1 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("battery", battery);
   d42d6:	496c      	ldr	r1, [pc, #432]	; (d4488 <setup+0x1f0>)
   d42d8:	486c      	ldr	r0, [pc, #432]	; (d448c <setup+0x1f4>)
   d42da:	f7ff ffcd 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("gpsLat", latitude);
   d42de:	496c      	ldr	r1, [pc, #432]	; (d4490 <setup+0x1f8>)
   d42e0:	486c      	ldr	r0, [pc, #432]	; (d4494 <setup+0x1fc>)
   d42e2:	f7ff ffc9 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("gpsLong", longitude);
   d42e6:	496c      	ldr	r1, [pc, #432]	; (d4498 <setup+0x200>)
   d42e8:	486c      	ldr	r0, [pc, #432]	; (d449c <setup+0x204>)
   d42ea:	f7ff ffc5 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("gpsSatsVis", satsVisible);
   d42ee:	496c      	ldr	r1, [pc, #432]	; (d44a0 <setup+0x208>)
   d42f0:	486c      	ldr	r0, [pc, #432]	; (d44a4 <setup+0x20c>)
   d42f2:	f7ff ffc1 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("altitude", altitude);
   d42f6:	496c      	ldr	r1, [pc, #432]	; (d44a8 <setup+0x210>)
   d42f8:	486c      	ldr	r0, [pc, #432]	; (d44ac <setup+0x214>)
   d42fa:	f7ff ffbd 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("roll", roll);
   d42fe:	496c      	ldr	r1, [pc, #432]	; (d44b0 <setup+0x218>)
   d4300:	486c      	ldr	r0, [pc, #432]	; (d44b4 <setup+0x21c>)
   d4302:	f7ff ffb9 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("pitch", pitch);
   d4306:	496c      	ldr	r1, [pc, #432]	; (d44b8 <setup+0x220>)
   d4308:	486c      	ldr	r0, [pc, #432]	; (d44bc <setup+0x224>)
   d430a:	f7ff ffb5 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("yaw", yaw);
   d430e:	496c      	ldr	r1, [pc, #432]	; (d44c0 <setup+0x228>)
   d4310:	486c      	ldr	r0, [pc, #432]	; (d44c4 <setup+0x22c>)
   d4312:	f7ff ffb1 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("missionCurrent", missionCurr);
   d4316:	496c      	ldr	r1, [pc, #432]	; (d44c8 <setup+0x230>)
   d4318:	486c      	ldr	r0, [pc, #432]	; (d44cc <setup+0x234>)
   d431a:	f7ff ffad 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("airspeed", airspeed);
   d431e:	496c      	ldr	r1, [pc, #432]	; (d44d0 <setup+0x238>)
   d4320:	486c      	ldr	r0, [pc, #432]	; (d44d4 <setup+0x23c>)
   d4322:	f7ff ffa9 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
    Particle.variable("heading", heading);
   d4326:	496c      	ldr	r1, [pc, #432]	; (d44d8 <setup+0x240>)
   d4328:	486c      	ldr	r0, [pc, #432]	; (d44dc <setup+0x244>)
   d432a:	f7ff ffa5 	bl	d4278 <_ZN10CloudClass8variableIA15_cI6StringEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d432e:	4623      	mov	r3, r4
   d4330:	2202      	movs	r2, #2
   d4332:	496b      	ldr	r1, [pc, #428]	; (d44e0 <setup+0x248>)
   d4334:	486b      	ldr	r0, [pc, #428]	; (d44e4 <setup+0x24c>)
   d4336:	f000 fb1f 	bl	d4978 <spark_variable>
   d433a:	2202      	movs	r2, #2
   d433c:	496a      	ldr	r1, [pc, #424]	; (d44e8 <setup+0x250>)
   d433e:	486b      	ldr	r0, [pc, #428]	; (d44ec <setup+0x254>)
   d4340:	4623      	mov	r3, r4
   d4342:	f000 fb19 	bl	d4978 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4346:	4a6a      	ldr	r2, [pc, #424]	; (d44f0 <setup+0x258>)
   d4348:	496a      	ldr	r1, [pc, #424]	; (d44f4 <setup+0x25c>)
   d434a:	486b      	ldr	r0, [pc, #428]	; (d44f8 <setup+0x260>)
   d434c:	f000 fea0 	bl	d5090 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

	Particle.function("getMavlink", getMavlink);

	String *ptr;
	for (int i=0; i<TOTAL_TYPES; i++) {
		twilioMsg += String(i) + " - ";
   d4350:	220a      	movs	r2, #10
   d4352:	4621      	mov	r1, r4
   d4354:	a802      	add	r0, sp, #8
   d4356:	f000 fca1 	bl	d4c9c <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d435a:	a902      	add	r1, sp, #8
   d435c:	a806      	add	r0, sp, #24
   d435e:	f000 fc81 	bl	d4c64 <_ZN6StringC1ERKS_>
   d4362:	4966      	ldr	r1, [pc, #408]	; (d44fc <setup+0x264>)
   d4364:	a806      	add	r0, sp, #24
   d4366:	f000 fce3 	bl	d4d30 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d436a:	4601      	mov	r1, r0
   d436c:	4864      	ldr	r0, [pc, #400]	; (d4500 <setup+0x268>)
   d436e:	f000 fcbf 	bl	d4cf0 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4372:	a806      	add	r0, sp, #24
   d4374:	f000 fc0d 	bl	d4b92 <_ZN6StringD1Ev>
   d4378:	a802      	add	r0, sp, #8
   d437a:	f000 fc0a 	bl	d4b92 <_ZN6StringD1Ev>
		switch(i) {
   d437e:	1e63      	subs	r3, r4, #1
   d4380:	2b0a      	cmp	r3, #10
   d4382:	d807      	bhi.n	d4394 <setup+0xfc>
   d4384:	e8df f003 	tbb	[pc, r3]
   d4388:	1e18120c 	.word	0x1e18120c
   d438c:	36302a24 	.word	0x36302a24
   d4390:	423c      	.short	0x423c
   d4392:	48          	.byte	0x48
   d4393:	00          	.byte	0x00
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4394:	495b      	ldr	r1, [pc, #364]	; (d4504 <setup+0x26c>)
   d4396:	485a      	ldr	r0, [pc, #360]	; (d4500 <setup+0x268>)
   d4398:	f000 fcae 	bl	d4cf8 <_ZN6String6concatEPKc>
			case VOLT:
				ptr = &voltage;
   d439c:	4b38      	ldr	r3, [pc, #224]	; (d4480 <setup+0x1e8>)
   d439e:	e040      	b.n	d4422 <setup+0x18a>
   d43a0:	4959      	ldr	r1, [pc, #356]	; (d4508 <setup+0x270>)
   d43a2:	4857      	ldr	r0, [pc, #348]	; (d4500 <setup+0x268>)
   d43a4:	f000 fca8 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Voltage\n";
				break;
			case BATT_REMAIN:
				ptr = &battery;
   d43a8:	4b37      	ldr	r3, [pc, #220]	; (d4488 <setup+0x1f0>)
   d43aa:	e03a      	b.n	d4422 <setup+0x18a>
   d43ac:	4957      	ldr	r1, [pc, #348]	; (d450c <setup+0x274>)
   d43ae:	4854      	ldr	r0, [pc, #336]	; (d4500 <setup+0x268>)
   d43b0:	f000 fca2 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Battery\n";
				break;
			case GPS_LAT:
				ptr = &latitude;
   d43b4:	4b36      	ldr	r3, [pc, #216]	; (d4490 <setup+0x1f8>)
   d43b6:	e034      	b.n	d4422 <setup+0x18a>
   d43b8:	4955      	ldr	r1, [pc, #340]	; (d4510 <setup+0x278>)
   d43ba:	4851      	ldr	r0, [pc, #324]	; (d4500 <setup+0x268>)
   d43bc:	f000 fc9c 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Latitude\n";
				break;
			case GPS_LONG:
				ptr = &longitude;
   d43c0:	4b35      	ldr	r3, [pc, #212]	; (d4498 <setup+0x200>)
   d43c2:	e02e      	b.n	d4422 <setup+0x18a>
   d43c4:	4953      	ldr	r1, [pc, #332]	; (d4514 <setup+0x27c>)
   d43c6:	484e      	ldr	r0, [pc, #312]	; (d4500 <setup+0x268>)
   d43c8:	f000 fc96 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Longitude\n";
				break;
			case GPS_SATS_VIS:
				ptr = &satsVisible;
   d43cc:	4b34      	ldr	r3, [pc, #208]	; (d44a0 <setup+0x208>)
   d43ce:	e028      	b.n	d4422 <setup+0x18a>
   d43d0:	4951      	ldr	r1, [pc, #324]	; (d4518 <setup+0x280>)
   d43d2:	484b      	ldr	r0, [pc, #300]	; (d4500 <setup+0x268>)
   d43d4:	f000 fc90 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Satellites Visible\n";
				break;
			case ALT:
				ptr = &altitude;
   d43d8:	4b33      	ldr	r3, [pc, #204]	; (d44a8 <setup+0x210>)
   d43da:	e022      	b.n	d4422 <setup+0x18a>
   d43dc:	494f      	ldr	r1, [pc, #316]	; (d451c <setup+0x284>)
   d43de:	4848      	ldr	r0, [pc, #288]	; (d4500 <setup+0x268>)
   d43e0:	f000 fc8a 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Altitude\n";
				break;
			case ALT_ROLL:
				ptr = &roll;
   d43e4:	4b32      	ldr	r3, [pc, #200]	; (d44b0 <setup+0x218>)
   d43e6:	e01c      	b.n	d4422 <setup+0x18a>
   d43e8:	494d      	ldr	r1, [pc, #308]	; (d4520 <setup+0x288>)
   d43ea:	4845      	ldr	r0, [pc, #276]	; (d4500 <setup+0x268>)
   d43ec:	f000 fc84 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Roll\n";
				break;
			case ALT_PITCH:
				ptr = &pitch;
   d43f0:	4b31      	ldr	r3, [pc, #196]	; (d44b8 <setup+0x220>)
   d43f2:	e016      	b.n	d4422 <setup+0x18a>
   d43f4:	494b      	ldr	r1, [pc, #300]	; (d4524 <setup+0x28c>)
   d43f6:	4842      	ldr	r0, [pc, #264]	; (d4500 <setup+0x268>)
   d43f8:	f000 fc7e 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Pitch\n";
				break;
			case ALT_YAW:
				ptr = &yaw;
   d43fc:	4b30      	ldr	r3, [pc, #192]	; (d44c0 <setup+0x228>)
   d43fe:	e010      	b.n	d4422 <setup+0x18a>
   d4400:	4949      	ldr	r1, [pc, #292]	; (d4528 <setup+0x290>)
   d4402:	483f      	ldr	r0, [pc, #252]	; (d4500 <setup+0x268>)
   d4404:	f000 fc78 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Yaw\n";
				break;
			case MISS_CURR:
				ptr = &missionCurr;
   d4408:	4b2f      	ldr	r3, [pc, #188]	; (d44c8 <setup+0x230>)
   d440a:	e00a      	b.n	d4422 <setup+0x18a>
   d440c:	4947      	ldr	r1, [pc, #284]	; (d452c <setup+0x294>)
   d440e:	483c      	ldr	r0, [pc, #240]	; (d4500 <setup+0x268>)
   d4410:	f000 fc72 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Mission Current Sequence\n";
				break;
			case VFR_AIRSPEED:
				ptr = &airspeed;
   d4414:	4b2e      	ldr	r3, [pc, #184]	; (d44d0 <setup+0x238>)
   d4416:	e004      	b.n	d4422 <setup+0x18a>
   d4418:	4945      	ldr	r1, [pc, #276]	; (d4530 <setup+0x298>)
   d441a:	4839      	ldr	r0, [pc, #228]	; (d4500 <setup+0x268>)
   d441c:	f000 fc6c 	bl	d4cf8 <_ZN6String6concatEPKc>
				twilioMsg += "Airspeed\n";
				break;
			case VFR_HEAD:
				ptr = &heading;
   d4420:	4b2d      	ldr	r3, [pc, #180]	; (d44d8 <setup+0x240>)
				break;
			default:
				ptr = NULL;
				break;
		}
		mavlinkDataList[i] = ptr;
   d4422:	4a44      	ldr	r2, [pc, #272]	; (d4534 <setup+0x29c>)
   d4424:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    Particle.variable("stateSMS", stateSMS);

	Particle.function("getMavlink", getMavlink);

	String *ptr;
	for (int i=0; i<TOTAL_TYPES; i++) {
   d4428:	3401      	adds	r4, #1
   d442a:	2c0c      	cmp	r4, #12
   d442c:	d190      	bne.n	d4350 <setup+0xb8>
		}
		mavlinkDataList[i] = ptr;
	}
	ptr = NULL;
	delete ptr;
	twilioMsg += String(TOTAL_TYPES) + " - All";
   d442e:	220a      	movs	r2, #10
   d4430:	4621      	mov	r1, r4
   d4432:	a802      	add	r0, sp, #8
   d4434:	f000 fc32 	bl	d4c9c <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4438:	a902      	add	r1, sp, #8
   d443a:	a806      	add	r0, sp, #24
   d443c:	f000 fc12 	bl	d4c64 <_ZN6StringC1ERKS_>
   d4440:	493d      	ldr	r1, [pc, #244]	; (d4538 <setup+0x2a0>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4442:	4c2f      	ldr	r4, [pc, #188]	; (d4500 <setup+0x268>)
   d4444:	a806      	add	r0, sp, #24
   d4446:	f000 fc73 	bl	d4d30 <_ZplRK15StringSumHelperPKc>
   d444a:	4601      	mov	r1, r0
   d444c:	4620      	mov	r0, r4
   d444e:	f000 fc4f 	bl	d4cf0 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4452:	a806      	add	r0, sp, #24
   d4454:	f000 fb9d 	bl	d4b92 <_ZN6StringD1Ev>
   d4458:	a802      	add	r0, sp, #8
   d445a:	f000 fb9a 	bl	d4b92 <_ZN6StringD1Ev>
   d445e:	4b37      	ldr	r3, [pc, #220]	; (d453c <setup+0x2a4>)
   d4460:	6822      	ldr	r2, [r4, #0]
   d4462:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4464:	f88d 3000 	strb.w	r3, [sp]
   d4468:	4935      	ldr	r1, [pc, #212]	; (d4540 <setup+0x2a8>)
   d446a:	233c      	movs	r3, #60	; 0x3c
   d446c:	a806      	add	r0, sp, #24
   d446e:	f000 ff1f 	bl	d52b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4472:	a807      	add	r0, sp, #28
   d4474:	f7ff fe30 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Particle.publish("twilio_sms", twilioMsg, PRIVATE);
}
   d4478:	b00a      	add	sp, #40	; 0x28
   d447a:	bd10      	pop	{r4, pc}
   d447c:	0001d4c0 	.word	0x0001d4c0
   d4480:	2003e2f8 	.word	0x2003e2f8
   d4484:	000d6151 	.word	0x000d6151
   d4488:	2003e3a8 	.word	0x2003e3a8
   d448c:	000d6159 	.word	0x000d6159
   d4490:	2003e380 	.word	0x2003e380
   d4494:	000d6161 	.word	0x000d6161
   d4498:	2003e294 	.word	0x2003e294
   d449c:	000d6168 	.word	0x000d6168
   d44a0:	2003e398 	.word	0x2003e398
   d44a4:	000d6170 	.word	0x000d6170
   d44a8:	2003e2b4 	.word	0x2003e2b4
   d44ac:	000d617b 	.word	0x000d617b
   d44b0:	2003e32c 	.word	0x2003e32c
   d44b4:	000d6184 	.word	0x000d6184
   d44b8:	2003e2a4 	.word	0x2003e2a4
   d44bc:	000d6189 	.word	0x000d6189
   d44c0:	2003e33c 	.word	0x2003e33c
   d44c4:	000d618f 	.word	0x000d618f
   d44c8:	2003e370 	.word	0x2003e370
   d44cc:	000d6193 	.word	0x000d6193
   d44d0:	2003e308 	.word	0x2003e308
   d44d4:	000d61a2 	.word	0x000d61a2
   d44d8:	2003e350 	.word	0x2003e350
   d44dc:	000d61ab 	.word	0x000d61ab
   d44e0:	2003e21c 	.word	0x2003e21c
   d44e4:	000d61b3 	.word	0x000d61b3
   d44e8:	2003e2c4 	.word	0x2003e2c4
   d44ec:	000d61bb 	.word	0x000d61bb
   d44f0:	000d61c4 	.word	0x000d61c4
   d44f4:	000d40b9 	.word	0x000d40b9
   d44f8:	000d5065 	.word	0x000d5065
   d44fc:	000d61cf 	.word	0x000d61cf
   d4500:	2003e360 	.word	0x2003e360
   d4504:	000d61d3 	.word	0x000d61d3
   d4508:	000d61dc 	.word	0x000d61dc
   d450c:	000d61e5 	.word	0x000d61e5
   d4510:	000d61ef 	.word	0x000d61ef
   d4514:	000d61fa 	.word	0x000d61fa
   d4518:	000d620e 	.word	0x000d620e
   d451c:	000d6218 	.word	0x000d6218
   d4520:	000d621e 	.word	0x000d621e
   d4524:	000d6225 	.word	0x000d6225
   d4528:	000d622a 	.word	0x000d622a
   d452c:	000d6244 	.word	0x000d6244
   d4530:	000d624e 	.word	0x000d624e
   d4534:	2003e2c8 	.word	0x2003e2c8
   d4538:	000d6257 	.word	0x000d6257
   d453c:	2003e328 	.word	0x2003e328
   d4540:	000d6146 	.word	0x000d6146

000d4544 <_GLOBAL__sub_I_voltage>:
	if (request == "1") {
		Serial1.println("*");
		return 1;
	}
	return 0;
}
   d4544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4546:	4b4b      	ldr	r3, [pc, #300]	; (d4674 <_GLOBAL__sub_I_voltage+0x130>)
 * Author: Kendra Tam
 * Date: December 23, 2019
 */
#include "mavlink_data_types.h"

String voltage = "";
   d4548:	4e4b      	ldr	r6, [pc, #300]	; (d4678 <_GLOBAL__sub_I_voltage+0x134>)
   d454a:	4f4c      	ldr	r7, [pc, #304]	; (d467c <_GLOBAL__sub_I_voltage+0x138>)
   d454c:	4d4c      	ldr	r5, [pc, #304]	; (d4680 <_GLOBAL__sub_I_voltage+0x13c>)
   d454e:	4c4d      	ldr	r4, [pc, #308]	; (d4684 <_GLOBAL__sub_I_voltage+0x140>)
   d4550:	2201      	movs	r2, #1
   d4552:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4554:	f000 f8c4 	bl	d46e0 <HAL_Pin_Map>
   d4558:	4631      	mov	r1, r6
   d455a:	4638      	mov	r0, r7
   d455c:	f000 fb60 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4560:	4638      	mov	r0, r7
String battery = "";
   d4562:	4f49      	ldr	r7, [pc, #292]	; (d4688 <_GLOBAL__sub_I_voltage+0x144>)
 * Author: Kendra Tam
 * Date: December 23, 2019
 */
#include "mavlink_data_types.h"

String voltage = "";
   d4564:	462a      	mov	r2, r5
   d4566:	4621      	mov	r1, r4
   d4568:	f001 fb7c 	bl	d5c64 <__aeabi_atexit>
String battery = "";
   d456c:	4631      	mov	r1, r6
   d456e:	4638      	mov	r0, r7
   d4570:	f000 fb56 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4574:	4638      	mov	r0, r7
String latitude = "";
   d4576:	4f45      	ldr	r7, [pc, #276]	; (d468c <_GLOBAL__sub_I_voltage+0x148>)
 * Date: December 23, 2019
 */
#include "mavlink_data_types.h"

String voltage = "";
String battery = "";
   d4578:	462a      	mov	r2, r5
   d457a:	4621      	mov	r1, r4
   d457c:	f001 fb72 	bl	d5c64 <__aeabi_atexit>
String latitude = "";
   d4580:	4631      	mov	r1, r6
   d4582:	4638      	mov	r0, r7
   d4584:	f000 fb4c 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4588:	4638      	mov	r0, r7
String longitude = "";
   d458a:	4f41      	ldr	r7, [pc, #260]	; (d4690 <_GLOBAL__sub_I_voltage+0x14c>)
 */
#include "mavlink_data_types.h"

String voltage = "";
String battery = "";
String latitude = "";
   d458c:	462a      	mov	r2, r5
   d458e:	4621      	mov	r1, r4
   d4590:	f001 fb68 	bl	d5c64 <__aeabi_atexit>
String longitude = "";
   d4594:	4631      	mov	r1, r6
   d4596:	4638      	mov	r0, r7
   d4598:	f000 fb42 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d459c:	4638      	mov	r0, r7
String satsVisible = "";
   d459e:	4f3d      	ldr	r7, [pc, #244]	; (d4694 <_GLOBAL__sub_I_voltage+0x150>)
#include "mavlink_data_types.h"

String voltage = "";
String battery = "";
String latitude = "";
String longitude = "";
   d45a0:	462a      	mov	r2, r5
   d45a2:	4621      	mov	r1, r4
   d45a4:	f001 fb5e 	bl	d5c64 <__aeabi_atexit>
String satsVisible = "";
   d45a8:	4631      	mov	r1, r6
   d45aa:	4638      	mov	r0, r7
   d45ac:	f000 fb38 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d45b0:	4638      	mov	r0, r7
String altitude = "";
   d45b2:	4f39      	ldr	r7, [pc, #228]	; (d4698 <_GLOBAL__sub_I_voltage+0x154>)

String voltage = "";
String battery = "";
String latitude = "";
String longitude = "";
String satsVisible = "";
   d45b4:	462a      	mov	r2, r5
   d45b6:	4621      	mov	r1, r4
   d45b8:	f001 fb54 	bl	d5c64 <__aeabi_atexit>
String altitude = "";
   d45bc:	4631      	mov	r1, r6
   d45be:	4638      	mov	r0, r7
   d45c0:	f000 fb2e 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d45c4:	4638      	mov	r0, r7
String roll = "";
   d45c6:	4f35      	ldr	r7, [pc, #212]	; (d469c <_GLOBAL__sub_I_voltage+0x158>)
String voltage = "";
String battery = "";
String latitude = "";
String longitude = "";
String satsVisible = "";
String altitude = "";
   d45c8:	462a      	mov	r2, r5
   d45ca:	4621      	mov	r1, r4
   d45cc:	f001 fb4a 	bl	d5c64 <__aeabi_atexit>
String roll = "";
   d45d0:	4631      	mov	r1, r6
   d45d2:	4638      	mov	r0, r7
   d45d4:	f000 fb24 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d45d8:	4638      	mov	r0, r7
String pitch = "";
   d45da:	4f31      	ldr	r7, [pc, #196]	; (d46a0 <_GLOBAL__sub_I_voltage+0x15c>)
String battery = "";
String latitude = "";
String longitude = "";
String satsVisible = "";
String altitude = "";
String roll = "";
   d45dc:	462a      	mov	r2, r5
   d45de:	4621      	mov	r1, r4
   d45e0:	f001 fb40 	bl	d5c64 <__aeabi_atexit>
String pitch = "";
   d45e4:	4631      	mov	r1, r6
   d45e6:	4638      	mov	r0, r7
   d45e8:	f000 fb1a 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d45ec:	4638      	mov	r0, r7
String yaw = "";
   d45ee:	4f2d      	ldr	r7, [pc, #180]	; (d46a4 <_GLOBAL__sub_I_voltage+0x160>)
String latitude = "";
String longitude = "";
String satsVisible = "";
String altitude = "";
String roll = "";
String pitch = "";
   d45f0:	462a      	mov	r2, r5
   d45f2:	4621      	mov	r1, r4
   d45f4:	f001 fb36 	bl	d5c64 <__aeabi_atexit>
String yaw = "";
   d45f8:	4631      	mov	r1, r6
   d45fa:	4638      	mov	r0, r7
   d45fc:	f000 fb10 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4600:	4638      	mov	r0, r7
String missionCurr = "";
   d4602:	4f29      	ldr	r7, [pc, #164]	; (d46a8 <_GLOBAL__sub_I_voltage+0x164>)
String longitude = "";
String satsVisible = "";
String altitude = "";
String roll = "";
String pitch = "";
String yaw = "";
   d4604:	462a      	mov	r2, r5
   d4606:	4621      	mov	r1, r4
   d4608:	f001 fb2c 	bl	d5c64 <__aeabi_atexit>
String missionCurr = "";
   d460c:	4631      	mov	r1, r6
   d460e:	4638      	mov	r0, r7
   d4610:	f000 fb06 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4614:	4638      	mov	r0, r7
String airspeed = "";
   d4616:	4f25      	ldr	r7, [pc, #148]	; (d46ac <_GLOBAL__sub_I_voltage+0x168>)
String satsVisible = "";
String altitude = "";
String roll = "";
String pitch = "";
String yaw = "";
String missionCurr = "";
   d4618:	462a      	mov	r2, r5
   d461a:	4621      	mov	r1, r4
   d461c:	f001 fb22 	bl	d5c64 <__aeabi_atexit>
String airspeed = "";
   d4620:	4631      	mov	r1, r6
   d4622:	4638      	mov	r0, r7
   d4624:	f000 fafc 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4628:	4638      	mov	r0, r7
String heading = "";
   d462a:	4f21      	ldr	r7, [pc, #132]	; (d46b0 <_GLOBAL__sub_I_voltage+0x16c>)
String altitude = "";
String roll = "";
String pitch = "";
String yaw = "";
String missionCurr = "";
String airspeed = "";
   d462c:	462a      	mov	r2, r5
   d462e:	4621      	mov	r1, r4
   d4630:	f001 fb18 	bl	d5c64 <__aeabi_atexit>
String heading = "";
   d4634:	4631      	mov	r1, r6
   d4636:	4638      	mov	r0, r7
   d4638:	f000 faf2 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d463c:	4638      	mov	r0, r7


String phrase = "";
   d463e:	4f1d      	ldr	r7, [pc, #116]	; (d46b4 <_GLOBAL__sub_I_voltage+0x170>)
String roll = "";
String pitch = "";
String yaw = "";
String missionCurr = "";
String airspeed = "";
String heading = "";
   d4640:	462a      	mov	r2, r5
   d4642:	4621      	mov	r1, r4
   d4644:	f001 fb0e 	bl	d5c64 <__aeabi_atexit>


String phrase = "";
   d4648:	4631      	mov	r1, r6
   d464a:	4638      	mov	r0, r7
int count = 0;
int incomingByte;
char letter;
const int maxlimit = 1000;

String twilioMsg = "Type one of the coresponding numbers.\n";
   d464c:	4e1a      	ldr	r6, [pc, #104]	; (d46b8 <_GLOBAL__sub_I_voltage+0x174>)
String missionCurr = "";
String airspeed = "";
String heading = "";


String phrase = "";
   d464e:	f000 fae7 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4652:	462a      	mov	r2, r5
   d4654:	4621      	mov	r1, r4
   d4656:	4638      	mov	r0, r7
   d4658:	f001 fb04 	bl	d5c64 <__aeabi_atexit>
int count = 0;
int incomingByte;
char letter;
const int maxlimit = 1000;

String twilioMsg = "Type one of the coresponding numbers.\n";
   d465c:	4917      	ldr	r1, [pc, #92]	; (d46bc <_GLOBAL__sub_I_voltage+0x178>)
   d465e:	4630      	mov	r0, r6
   d4660:	f000 fade 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
   d4664:	462a      	mov	r2, r5
   d4666:	4621      	mov	r1, r4
   d4668:	4630      	mov	r0, r6
	if (request == "1") {
		Serial1.println("*");
		return 1;
	}
	return 0;
}
   d466a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int count = 0;
int incomingByte;
char letter;
const int maxlimit = 1000;

String twilioMsg = "Type one of the coresponding numbers.\n";
   d466e:	f001 baf9 	b.w	d5c64 <__aeabi_atexit>
   d4672:	bf00      	nop
   d4674:	2003e328 	.word	0x2003e328
   d4678:	000d6373 	.word	0x000d6373
   d467c:	2003e2f8 	.word	0x2003e2f8
   d4680:	2003e28c 	.word	0x2003e28c
   d4684:	000d4b93 	.word	0x000d4b93
   d4688:	2003e3a8 	.word	0x2003e3a8
   d468c:	2003e380 	.word	0x2003e380
   d4690:	2003e294 	.word	0x2003e294
   d4694:	2003e398 	.word	0x2003e398
   d4698:	2003e2b4 	.word	0x2003e2b4
   d469c:	2003e32c 	.word	0x2003e32c
   d46a0:	2003e2a4 	.word	0x2003e2a4
   d46a4:	2003e33c 	.word	0x2003e33c
   d46a8:	2003e370 	.word	0x2003e370
   d46ac:	2003e308 	.word	0x2003e308
   d46b0:	2003e350 	.word	0x2003e350
   d46b4:	2003e318 	.word	0x2003e318
   d46b8:	2003e360 	.word	0x2003e360
   d46bc:	000d625e 	.word	0x000d625e

000d46c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <netdb_freeaddrinfo+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	689b      	ldr	r3, [r3, #8]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030268 	.word	0x00030268

000d46d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <netdb_getaddrinfo+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	68db      	ldr	r3, [r3, #12]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030268 	.word	0x00030268

000d46e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_Pin_Map+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	681b      	ldr	r3, [r3, #0]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003022c 	.word	0x0003022c

000d46f0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_SPI_Init+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	69db      	ldr	r3, [r3, #28]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030230 	.word	0x00030230

000d4700 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_RNG_GetRandomNumber+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	685b      	ldr	r3, [r3, #4]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030218 	.word	0x00030218

000d4710 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	695b      	ldr	r3, [r3, #20]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030218 	.word	0x00030218

000d4720 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <os_thread_is_current+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	689b      	ldr	r3, [r3, #8]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030248 	.word	0x00030248

000d4730 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <os_thread_join+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	691b      	ldr	r3, [r3, #16]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030248 	.word	0x00030248

000d4740 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <os_thread_cleanup+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	695b      	ldr	r3, [r3, #20]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030248 	.word	0x00030248

000d4750 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <os_mutex_create+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030248 	.word	0x00030248

000d4760 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <os_mutex_recursive_create+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030248 	.word	0x00030248

000d4770 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <inet_inet_ntop+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	695b      	ldr	r3, [r3, #20]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030264 	.word	0x00030264

000d4780 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_USART_Init+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	681b      	ldr	r3, [r3, #0]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	0003023c 	.word	0x0003023c

000d4790 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_USART_Write_Data+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	68db      	ldr	r3, [r3, #12]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	0003023c 	.word	0x0003023c

000d47a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_USART_Available_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	691b      	ldr	r3, [r3, #16]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	0003023c 	.word	0x0003023c

000d47b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_USART_Read_Data+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	695b      	ldr	r3, [r3, #20]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	0003023c 	.word	0x0003023c

000d47c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USART_Peek_Data+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	699b      	ldr	r3, [r3, #24]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003023c 	.word	0x0003023c

000d47d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USART_Flush_Data+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	69db      	ldr	r3, [r3, #28]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003023c 	.word	0x0003023c

000d47e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USART_Available_Data_For_Write+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003023c 	.word	0x0003023c

000d47f0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_USART_BeginConfig+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003023c 	.word	0x0003023c

000d4800 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_USB_USART_Init+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	681b      	ldr	r3, [r3, #0]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003024c 	.word	0x0003024c

000d4810 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_USB_USART_Begin+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	685b      	ldr	r3, [r3, #4]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003024c 	.word	0x0003024c

000d4820 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USB_USART_Available_Data+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	691b      	ldr	r3, [r3, #16]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003024c 	.word	0x0003024c

000d4830 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	695b      	ldr	r3, [r3, #20]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003024c 	.word	0x0003024c

000d4840 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USB_USART_Receive_Data+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	699b      	ldr	r3, [r3, #24]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003024c 	.word	0x0003024c

000d4850 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USB_USART_Send_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	69db      	ldr	r3, [r3, #28]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003024c 	.word	0x0003024c

000d4860 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USB_USART_Flush_Data+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6a1b      	ldr	r3, [r3, #32]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003024c 	.word	0x0003024c

000d4870 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <set_system_mode+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	685b      	ldr	r3, [r3, #4]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030220 	.word	0x00030220

000d4880 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <system_delay_ms+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	695b      	ldr	r3, [r3, #20]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030220 	.word	0x00030220

000d4890 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <application_thread_current+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030220 	.word	0x00030220

000d48a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <application_thread_invoke+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030220 	.word	0x00030220

000d48b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b03      	ldr	r3, [pc, #12]	; (d48c0 <system_ctrl_set_app_request_handler+0x10>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48ba:	9301      	str	r3, [sp, #4]
   d48bc:	bd08      	pop	{r3, pc}
   d48be:	0000      	.short	0x0000
   d48c0:	00030220 	.word	0x00030220

000d48c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b03      	ldr	r3, [pc, #12]	; (d48d4 <system_ctrl_set_result+0x10>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48ce:	9301      	str	r3, [sp, #4]
   d48d0:	bd08      	pop	{r3, pc}
   d48d2:	0000      	.short	0x0000
   d48d4:	00030220 	.word	0x00030220

000d48d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <network_connect+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	685b      	ldr	r3, [r3, #4]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030240 	.word	0x00030240

000d48e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <network_connecting+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	689b      	ldr	r3, [r3, #8]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030240 	.word	0x00030240

000d48f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <network_disconnect+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	68db      	ldr	r3, [r3, #12]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030240 	.word	0x00030240

000d4908 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <network_ready+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	691b      	ldr	r3, [r3, #16]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030240 	.word	0x00030240

000d4918 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <network_on+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	695b      	ldr	r3, [r3, #20]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030240 	.word	0x00030240

000d4928 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <network_off+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	699b      	ldr	r3, [r3, #24]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030240 	.word	0x00030240

000d4938 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <network_listen+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	69db      	ldr	r3, [r3, #28]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030240 	.word	0x00030240

000d4948 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <network_listening+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6a1b      	ldr	r3, [r3, #32]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030240 	.word	0x00030240

000d4958 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <network_set_listen_timeout+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030240 	.word	0x00030240

000d4968 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <network_get_listen_timeout+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030240 	.word	0x00030240

000d4978 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <spark_variable+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	681b      	ldr	r3, [r3, #0]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030244 	.word	0x00030244

000d4988 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <spark_function+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	685b      	ldr	r3, [r3, #4]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030244 	.word	0x00030244

000d4998 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <spark_cloud_flag_connected+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	695b      	ldr	r3, [r3, #20]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030244 	.word	0x00030244

000d49a8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <spark_send_event+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6a1b      	ldr	r3, [r3, #32]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030244 	.word	0x00030244

000d49b8 <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <spark_set_connection_property+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030244 	.word	0x00030244

000d49c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030244 	.word	0x00030244

000d49d8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <malloc+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	681b      	ldr	r3, [r3, #0]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003021c 	.word	0x0003021c

000d49e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <free+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	685b      	ldr	r3, [r3, #4]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003021c 	.word	0x0003021c

000d49f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <realloc+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	689b      	ldr	r3, [r3, #8]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003021c 	.word	0x0003021c

000d4a08 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <abort+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	0003021c 	.word	0x0003021c

000d4a18 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <_malloc_r+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003021c 	.word	0x0003021c

000d4a28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a28:	2200      	movs	r2, #0
   d4a2a:	4611      	mov	r1, r2
   d4a2c:	6840      	ldr	r0, [r0, #4]
   d4a2e:	f7ff bf8b 	b.w	d4948 <network_listening>

000d4a32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a32:	2200      	movs	r2, #0
   d4a34:	4611      	mov	r1, r2
   d4a36:	6840      	ldr	r0, [r0, #4]
   d4a38:	f7ff bf96 	b.w	d4968 <network_get_listen_timeout>

000d4a3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a3c:	2200      	movs	r2, #0
   d4a3e:	6840      	ldr	r0, [r0, #4]
   d4a40:	f7ff bf8a 	b.w	d4958 <network_set_listen_timeout>

000d4a44 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a44:	2200      	movs	r2, #0
   d4a46:	f081 0101 	eor.w	r1, r1, #1
   d4a4a:	6840      	ldr	r0, [r0, #4]
   d4a4c:	f7ff bf74 	b.w	d4938 <network_listen>

000d4a50 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a50:	2300      	movs	r3, #0
   d4a52:	461a      	mov	r2, r3
   d4a54:	4619      	mov	r1, r3
   d4a56:	6840      	ldr	r0, [r0, #4]
   d4a58:	f7ff bf66 	b.w	d4928 <network_off>

000d4a5c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a5c:	2300      	movs	r3, #0
   d4a5e:	461a      	mov	r2, r3
   d4a60:	4619      	mov	r1, r3
   d4a62:	6840      	ldr	r0, [r0, #4]
   d4a64:	f7ff bf58 	b.w	d4918 <network_on>

000d4a68 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a68:	2200      	movs	r2, #0
   d4a6a:	4611      	mov	r1, r2
   d4a6c:	6840      	ldr	r0, [r0, #4]
   d4a6e:	f7ff bf4b 	b.w	d4908 <network_ready>

000d4a72 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a72:	2200      	movs	r2, #0
   d4a74:	4611      	mov	r1, r2
   d4a76:	6840      	ldr	r0, [r0, #4]
   d4a78:	f7ff bf36 	b.w	d48e8 <network_connecting>

000d4a7c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a7c:	2200      	movs	r2, #0
   d4a7e:	2102      	movs	r1, #2
   d4a80:	6840      	ldr	r0, [r0, #4]
   d4a82:	f7ff bf39 	b.w	d48f8 <network_disconnect>

000d4a86 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a86:	2300      	movs	r3, #0
   d4a88:	461a      	mov	r2, r3
   d4a8a:	6840      	ldr	r0, [r0, #4]
   d4a8c:	f7ff bf24 	b.w	d48d8 <network_connect>

000d4a90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4a90:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4a92:	2203      	movs	r2, #3
   d4a94:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4a96:	4a02      	ldr	r2, [pc, #8]	; (d4aa0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a98:	601a      	str	r2, [r3, #0]
   d4a9a:	4770      	bx	lr
   d4a9c:	2003e3b8 	.word	0x2003e3b8
   d4aa0:	000d6290 	.word	0x000d6290

000d4aa4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4aa4:	4770      	bx	lr

000d4aa6 <_ZN8SPIClassD0Ev>:
   d4aa6:	b510      	push	{r4, lr}
   d4aa8:	2110      	movs	r1, #16
   d4aaa:	4604      	mov	r4, r0
   d4aac:	f001 f8df 	bl	d5c6e <_ZdlPvj>
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	bd10      	pop	{r4, pc}

000d4ab4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ab4:	b570      	push	{r4, r5, r6, lr}
   d4ab6:	4b08      	ldr	r3, [pc, #32]	; (d4ad8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4ab8:	6003      	str	r3, [r0, #0]
   d4aba:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4abc:	2500      	movs	r5, #0
   d4abe:	460e      	mov	r6, r1
   d4ac0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4ac4:	f7ff fe44 	bl	d4750 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4ac8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4aca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4acc:	f7ff fe10 	bl	d46f0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4ad0:	60a5      	str	r5, [r4, #8]
}
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	bd70      	pop	{r4, r5, r6, pc}
   d4ad6:	bf00      	nop
   d4ad8:	000d62c4 	.word	0x000d62c4

000d4adc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4adc:	4b04      	ldr	r3, [pc, #16]	; (d4af0 <_GLOBAL__sub_I_System+0x14>)
   d4ade:	2000      	movs	r0, #0
   d4ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4ae4:	7018      	strb	r0, [r3, #0]
   d4ae6:	8058      	strh	r0, [r3, #2]
   d4ae8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4aea:	f7ff bec1 	b.w	d4870 <set_system_mode>
   d4aee:	bf00      	nop
   d4af0:	2003e3c0 	.word	0x2003e3c0

000d4af4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4af4:	b510      	push	{r4, lr}
   d4af6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4af8:	f001 fa81 	bl	d5ffe <strlen>
   d4afc:	3801      	subs	r0, #1
   d4afe:	1823      	adds	r3, r4, r0
   d4b00:	4620      	mov	r0, r4
	while(i<j){
   d4b02:	4298      	cmp	r0, r3
   d4b04:	d206      	bcs.n	d4b14 <_Z11str_reversePc+0x20>
		c = *i;
   d4b06:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4b08:	7819      	ldrb	r1, [r3, #0]
   d4b0a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4b0e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4b12:	e7f6      	b.n	d4b02 <_Z11str_reversePc+0xe>
   d4b14:	bd10      	pop	{r4, pc}

000d4b16 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4b16:	b570      	push	{r4, r5, r6, lr}
   d4b18:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4b1a:	1e91      	subs	r1, r2, #2
   d4b1c:	2922      	cmp	r1, #34	; 0x22
   d4b1e:	d820      	bhi.n	d4b62 <ultoa+0x4c>
   d4b20:	4625      	mov	r5, r4
   d4b22:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4b24:	b910      	cbnz	r0, d4b2c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4b26:	4423      	add	r3, r4
            *ptr++ = '0';
   d4b28:	2230      	movs	r2, #48	; 0x30
   d4b2a:	e00e      	b.n	d4b4a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4b2c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4b30:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4b34:	b2c1      	uxtb	r1, r0
   d4b36:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4b3a:	2809      	cmp	r0, #9
                *ptr += '0';
   d4b3c:	bf94      	ite	ls
   d4b3e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4b40:	3157      	addhi	r1, #87	; 0x57
   d4b42:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4b46:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4b48:	e7eb      	b.n	d4b22 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4b4a:	4299      	cmp	r1, r3
   d4b4c:	d202      	bcs.n	d4b54 <ultoa+0x3e>
            *ptr++ = '0';
   d4b4e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4b52:	e7fa      	b.n	d4b4a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4b54:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4b56:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4b58:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4b5a:	f7ff ffcb 	bl	d4af4 <_Z11str_reversePc>
	return buffer;
   d4b5e:	4620      	mov	r0, r4
   d4b60:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4b62:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4b64:	bd70      	pop	{r4, r5, r6, pc}

000d4b66 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4b66:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4b68:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4b6a:	460c      	mov	r4, r1
   d4b6c:	4615      	mov	r5, r2
	if(a<0){
   d4b6e:	da0b      	bge.n	d4b88 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4b74:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4b78:	bf14      	ite	ne
   d4b7a:	4258      	negne	r0, r3
   d4b7c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4b7e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4b80:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4b82:	462a      	mov	r2, r5
   d4b84:	4419      	add	r1, r3
   d4b86:	e000      	b.n	d4b8a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4b88:	2301      	movs	r3, #1
   d4b8a:	f7ff ffc4 	bl	d4b16 <ultoa>
	}
	return buffer;
}
   d4b8e:	4620      	mov	r0, r4
   d4b90:	bd38      	pop	{r3, r4, r5, pc}

000d4b92 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4b92:	b510      	push	{r4, lr}
   d4b94:	4604      	mov	r4, r0
{
	free(buffer);
   d4b96:	6800      	ldr	r0, [r0, #0]
   d4b98:	f7ff ff26 	bl	d49e8 <free>
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	bd10      	pop	{r4, pc}

000d4ba0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4ba0:	b510      	push	{r4, lr}
   d4ba2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4ba4:	6800      	ldr	r0, [r0, #0]
   d4ba6:	b108      	cbz	r0, d4bac <_ZN6String10invalidateEv+0xc>
   d4ba8:	f7ff ff1e 	bl	d49e8 <free>
	buffer = NULL;
   d4bac:	2300      	movs	r3, #0
   d4bae:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4bb0:	60a3      	str	r3, [r4, #8]
   d4bb2:	6063      	str	r3, [r4, #4]
   d4bb4:	bd10      	pop	{r4, pc}

000d4bb6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4bb6:	b538      	push	{r3, r4, r5, lr}
   d4bb8:	4604      	mov	r4, r0
   d4bba:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4bbc:	6800      	ldr	r0, [r0, #0]
   d4bbe:	3101      	adds	r1, #1
   d4bc0:	f7ff ff1a 	bl	d49f8 <realloc>
	if (newbuffer) {
   d4bc4:	b110      	cbz	r0, d4bcc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4bc6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4bca:	2001      	movs	r0, #1
	}
	return 0;
}
   d4bcc:	bd38      	pop	{r3, r4, r5, pc}

000d4bce <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bce:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4bd0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4bd2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4bd4:	b113      	cbz	r3, d4bdc <_ZN6String7reserveEj+0xe>
   d4bd6:	6843      	ldr	r3, [r0, #4]
   d4bd8:	428b      	cmp	r3, r1
   d4bda:	d207      	bcs.n	d4bec <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4bdc:	4620      	mov	r0, r4
   d4bde:	f7ff ffea 	bl	d4bb6 <_ZN6String12changeBufferEj>
   d4be2:	b120      	cbz	r0, d4bee <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4be4:	68a3      	ldr	r3, [r4, #8]
   d4be6:	b90b      	cbnz	r3, d4bec <_ZN6String7reserveEj+0x1e>
   d4be8:	6822      	ldr	r2, [r4, #0]
   d4bea:	7013      	strb	r3, [r2, #0]
   d4bec:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4bee:	bd10      	pop	{r4, pc}

000d4bf0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bf0:	b570      	push	{r4, r5, r6, lr}
   d4bf2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4bf4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bf6:	4604      	mov	r4, r0
   d4bf8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4bfa:	f7ff ffe8 	bl	d4bce <_ZN6String7reserveEj>
   d4bfe:	b918      	cbnz	r0, d4c08 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4c00:	4620      	mov	r0, r4
   d4c02:	f7ff ffcd 	bl	d4ba0 <_ZN6String10invalidateEv>
		return *this;
   d4c06:	e009      	b.n	d4c1c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4c08:	462a      	mov	r2, r5
   d4c0a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4c0c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c0e:	6820      	ldr	r0, [r4, #0]
   d4c10:	f001 f98c 	bl	d5f2c <memcpy>
	buffer[len] = 0;
   d4c14:	6822      	ldr	r2, [r4, #0]
   d4c16:	68a3      	ldr	r3, [r4, #8]
   d4c18:	2100      	movs	r1, #0
   d4c1a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	bd70      	pop	{r4, r5, r6, pc}

000d4c20 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c20:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c22:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c24:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c26:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c28:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c2c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4c2e:	460d      	mov	r5, r1
   d4c30:	b139      	cbz	r1, d4c42 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c32:	4608      	mov	r0, r1
   d4c34:	f001 f9e3 	bl	d5ffe <strlen>
   d4c38:	4629      	mov	r1, r5
   d4c3a:	4602      	mov	r2, r0
   d4c3c:	4620      	mov	r0, r4
   d4c3e:	f7ff ffd7 	bl	d4bf0 <_ZN6String4copyEPKcj>
}
   d4c42:	4620      	mov	r0, r4
   d4c44:	bd38      	pop	{r3, r4, r5, pc}

000d4c46 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4c46:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4c48:	b510      	push	{r4, lr}
   d4c4a:	460b      	mov	r3, r1
   d4c4c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4c4e:	d007      	beq.n	d4c60 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4c50:	6809      	ldr	r1, [r1, #0]
   d4c52:	b119      	cbz	r1, d4c5c <_ZN6StringaSERKS_+0x16>
   d4c54:	689a      	ldr	r2, [r3, #8]
   d4c56:	f7ff ffcb 	bl	d4bf0 <_ZN6String4copyEPKcj>
   d4c5a:	e001      	b.n	d4c60 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4c5c:	f7ff ffa0 	bl	d4ba0 <_ZN6String10invalidateEv>

	return *this;
}
   d4c60:	4620      	mov	r0, r4
   d4c62:	bd10      	pop	{r4, pc}

000d4c64 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4c64:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c66:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4c68:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c6a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c6c:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c6e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c70:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4c72:	f7ff ffe8 	bl	d4c46 <_ZN6StringaSERKS_>
}
   d4c76:	4620      	mov	r0, r4
   d4c78:	bd10      	pop	{r4, pc}

000d4c7a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4c7a:	b538      	push	{r3, r4, r5, lr}
   d4c7c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4c7e:	460c      	mov	r4, r1
   d4c80:	b141      	cbz	r1, d4c94 <_ZN6StringaSEPKc+0x1a>
   d4c82:	4608      	mov	r0, r1
   d4c84:	f001 f9bb 	bl	d5ffe <strlen>
   d4c88:	4621      	mov	r1, r4
   d4c8a:	4602      	mov	r2, r0
   d4c8c:	4628      	mov	r0, r5
   d4c8e:	f7ff ffaf 	bl	d4bf0 <_ZN6String4copyEPKcj>
   d4c92:	e001      	b.n	d4c98 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4c94:	f7ff ff84 	bl	d4ba0 <_ZN6String10invalidateEv>

	return *this;
}
   d4c98:	4628      	mov	r0, r5
   d4c9a:	bd38      	pop	{r3, r4, r5, pc}

000d4c9c <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4c9c:	b510      	push	{r4, lr}
   d4c9e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ca0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4ca2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ca4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d4ca6:	6063      	str	r3, [r4, #4]
	len = 0;
   d4ca8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4caa:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4cac:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d4cae:	a901      	add	r1, sp, #4
   d4cb0:	f7ff ff59 	bl	d4b66 <itoa>
	*this = buf;
   d4cb4:	a901      	add	r1, sp, #4
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	f7ff ffdf 	bl	d4c7a <_ZN6StringaSEPKc>
}
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	b00a      	add	sp, #40	; 0x28
   d4cc0:	bd10      	pop	{r4, pc}

000d4cc2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4cc2:	b570      	push	{r4, r5, r6, lr}
   d4cc4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4cc6:	460e      	mov	r6, r1
   d4cc8:	b909      	cbnz	r1, d4cce <_ZN6String6concatEPKcj+0xc>
   d4cca:	2000      	movs	r0, #0
   d4ccc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4cce:	b16a      	cbz	r2, d4cec <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d4cd0:	6883      	ldr	r3, [r0, #8]
   d4cd2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4cd4:	4629      	mov	r1, r5
   d4cd6:	f7ff ff7a 	bl	d4bce <_ZN6String7reserveEj>
   d4cda:	2800      	cmp	r0, #0
   d4cdc:	d0f5      	beq.n	d4cca <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4cde:	6820      	ldr	r0, [r4, #0]
   d4ce0:	68a3      	ldr	r3, [r4, #8]
   d4ce2:	4631      	mov	r1, r6
   d4ce4:	4418      	add	r0, r3
   d4ce6:	f001 f967 	bl	d5fb8 <strcpy>
	len = newlen;
   d4cea:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d4cec:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4cee:	bd70      	pop	{r4, r5, r6, pc}

000d4cf0 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d4cf0:	688a      	ldr	r2, [r1, #8]
   d4cf2:	6809      	ldr	r1, [r1, #0]
   d4cf4:	f7ff bfe5 	b.w	d4cc2 <_ZN6String6concatEPKcj>

000d4cf8 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   d4cf8:	b538      	push	{r3, r4, r5, lr}
   d4cfa:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d4cfc:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d4cfe:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d4d00:	b141      	cbz	r1, d4d14 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d4d02:	f001 f97c 	bl	d5ffe <strlen>
   d4d06:	4621      	mov	r1, r4
   d4d08:	4602      	mov	r2, r0
   d4d0a:	4628      	mov	r0, r5
}
   d4d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d4d10:	f7ff bfd7 	b.w	d4cc2 <_ZN6String6concatEPKcj>
}
   d4d14:	bd38      	pop	{r3, r4, r5, pc}

000d4d16 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d4d16:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4d18:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d4d1a:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d4d1e:	2201      	movs	r2, #1
   d4d20:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4d22:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d4d26:	f7ff ffcc 	bl	d4cc2 <_ZN6String6concatEPKcj>
}
   d4d2a:	b003      	add	sp, #12
   d4d2c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d30 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d4d30:	b538      	push	{r3, r4, r5, lr}
   d4d32:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4d34:	460d      	mov	r5, r1
   d4d36:	b141      	cbz	r1, d4d4a <_ZplRK15StringSumHelperPKc+0x1a>
   d4d38:	4608      	mov	r0, r1
   d4d3a:	f001 f960 	bl	d5ffe <strlen>
   d4d3e:	4629      	mov	r1, r5
   d4d40:	4602      	mov	r2, r0
   d4d42:	4620      	mov	r0, r4
   d4d44:	f7ff ffbd 	bl	d4cc2 <_ZN6String6concatEPKcj>
   d4d48:	b910      	cbnz	r0, d4d50 <_ZplRK15StringSumHelperPKc+0x20>
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f7ff ff28 	bl	d4ba0 <_ZN6String10invalidateEv>
	return a;
}
   d4d50:	4620      	mov	r0, r4
   d4d52:	bd38      	pop	{r3, r4, r5, pc}

000d4d54 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4d54:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4d56:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4d58:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4d5a:	b912      	cbnz	r2, d4d62 <_ZNK6String6equalsEPKc+0xe>
   d4d5c:	b919      	cbnz	r1, d4d66 <_ZNK6String6equalsEPKc+0x12>
   d4d5e:	2001      	movs	r0, #1
   d4d60:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4d62:	b911      	cbnz	r1, d4d6a <_ZNK6String6equalsEPKc+0x16>
   d4d64:	6803      	ldr	r3, [r0, #0]
   d4d66:	7818      	ldrb	r0, [r3, #0]
   d4d68:	e002      	b.n	d4d70 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d4d6a:	6800      	ldr	r0, [r0, #0]
   d4d6c:	f001 f91a 	bl	d5fa4 <strcmp>
   d4d70:	fab0 f080 	clz	r0, r0
   d4d74:	0940      	lsrs	r0, r0, #5
}
   d4d76:	bd08      	pop	{r3, pc}

000d4d78 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d4d78:	6800      	ldr	r0, [r0, #0]
   d4d7a:	b108      	cbz	r0, d4d80 <_ZNK6String5toIntEv+0x8>
   d4d7c:	f001 b8c4 	b.w	d5f08 <atol>
	return 0;
}
   d4d80:	4770      	bx	lr

000d4d82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4d82:	680b      	ldr	r3, [r1, #0]
   d4d84:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4d86:	b113      	cbz	r3, d4d8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4d88:	685a      	ldr	r2, [r3, #4]
   d4d8a:	3201      	adds	r2, #1
   d4d8c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4d8e:	4770      	bx	lr

000d4d90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d90:	4802      	ldr	r0, [pc, #8]	; (d4d9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4d92:	2300      	movs	r3, #0
   d4d94:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d96:	f7ff bce3 	b.w	d4760 <os_mutex_recursive_create>
   d4d9a:	bf00      	nop
   d4d9c:	2003e3c8 	.word	0x2003e3c8

000d4da0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4da2:	4606      	mov	r6, r0
   d4da4:	460d      	mov	r5, r1
   d4da6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4da8:	2400      	movs	r4, #0
  while (size--) {
   d4daa:	42bd      	cmp	r5, r7
   d4dac:	d00c      	beq.n	d4dc8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4dae:	6833      	ldr	r3, [r6, #0]
   d4db0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4db4:	689b      	ldr	r3, [r3, #8]
   d4db6:	4630      	mov	r0, r6
   d4db8:	4798      	blx	r3
     if (chunk>=0)
   d4dba:	2800      	cmp	r0, #0
   d4dbc:	db01      	blt.n	d4dc2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4dbe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4dc0:	e7f3      	b.n	d4daa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4dc2:	2c00      	cmp	r4, #0
   d4dc4:	bf08      	it	eq
   d4dc6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4dc8:	4620      	mov	r0, r4
   d4dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dcc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4dcc:	b570      	push	{r4, r5, r6, lr}
   d4dce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4dd0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4dd2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4dd4:	b149      	cbz	r1, d4dea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4dd6:	f001 f912 	bl	d5ffe <strlen>
   d4dda:	682b      	ldr	r3, [r5, #0]
   d4ddc:	4602      	mov	r2, r0
   d4dde:	4621      	mov	r1, r4
   d4de0:	4628      	mov	r0, r5
   d4de2:	68db      	ldr	r3, [r3, #12]
    }
   d4de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4de8:	4718      	bx	r3
    }
   d4dea:	bd70      	pop	{r4, r5, r6, pc}

000d4dec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4dec:	6803      	ldr	r3, [r0, #0]
   d4dee:	689b      	ldr	r3, [r3, #8]
   d4df0:	4718      	bx	r3

000d4df2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4df2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4df4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4df6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4df8:	f7ff fff8 	bl	d4dec <_ZN5Print5printEc>
  n += print('\n');
   d4dfc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4dfe:	4604      	mov	r4, r0
  n += print('\n');
   d4e00:	4628      	mov	r0, r5
   d4e02:	f7ff fff3 	bl	d4dec <_ZN5Print5printEc>
  return n;
}
   d4e06:	4420      	add	r0, r4
   d4e08:	bd38      	pop	{r3, r4, r5, pc}

000d4e0a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4e0a:	b538      	push	{r3, r4, r5, lr}
   d4e0c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e0e:	f7ff ffdd 	bl	d4dcc <_ZN5Print5writeEPKc>
   d4e12:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4e14:	4628      	mov	r0, r5
   d4e16:	f7ff ffec 	bl	d4df2 <_ZN5Print7printlnEv>
  return n;
}
   d4e1a:	4420      	add	r0, r4
   d4e1c:	bd38      	pop	{r3, r4, r5, pc}

000d4e1e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e1e:	b530      	push	{r4, r5, lr}
   d4e20:	b08b      	sub	sp, #44	; 0x2c
   d4e22:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e24:	2100      	movs	r1, #0
   d4e26:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e2a:	2a01      	cmp	r2, #1
   d4e2c:	bf98      	it	ls
   d4e2e:	220a      	movls	r2, #10
   d4e30:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4e34:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4e38:	fb05 3312 	mls	r3, r5, r2, r3
   d4e3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e40:	2b09      	cmp	r3, #9
   d4e42:	bf94      	ite	ls
   d4e44:	3330      	addls	r3, #48	; 0x30
   d4e46:	3337      	addhi	r3, #55	; 0x37
   d4e48:	b2db      	uxtb	r3, r3
   d4e4a:	4621      	mov	r1, r4
   d4e4c:	f804 3901 	strb.w	r3, [r4], #-1
   d4e50:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4e52:	2d00      	cmp	r5, #0
   d4e54:	d1ee      	bne.n	d4e34 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4e56:	f7ff ffb9 	bl	d4dcc <_ZN5Print5writeEPKc>
}
   d4e5a:	b00b      	add	sp, #44	; 0x2c
   d4e5c:	bd30      	pop	{r4, r5, pc}

000d4e5e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4e5e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4e60:	b92a      	cbnz	r2, d4e6e <_ZN5Print5printEmi+0x10>
   d4e62:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4e64:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4e68:	689b      	ldr	r3, [r3, #8]
   d4e6a:	b2c9      	uxtb	r1, r1
   d4e6c:	4718      	bx	r3
  else return printNumber(n, base);
   d4e6e:	b2d2      	uxtb	r2, r2
}
   d4e70:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e74:	f7ff bfd3 	b.w	d4e1e <_ZN5Print11printNumberEmh>

000d4e78 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4e78:	f7ff bff1 	b.w	d4e5e <_ZN5Print5printEmi>

000d4e7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e7c:	4b01      	ldr	r3, [pc, #4]	; (d4e84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e7e:	4a02      	ldr	r2, [pc, #8]	; (d4e88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e80:	601a      	str	r2, [r3, #0]
   d4e82:	4770      	bx	lr
   d4e84:	2003e3cc 	.word	0x2003e3cc
   d4e88:	000d633f 	.word	0x000d633f

000d4e8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e8c:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e8e:	681a      	ldr	r2, [r3, #0]
   d4e90:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e92:	601a      	str	r2, [r3, #0]
   d4e94:	4770      	bx	lr
   d4e96:	bf00      	nop
   d4e98:	2003e220 	.word	0x2003e220
   d4e9c:	2003e3d0 	.word	0x2003e3d0

000d4ea0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ea0:	2100      	movs	r1, #0
   d4ea2:	f7ff bced 	b.w	d4880 <system_delay_ms>

000d4ea6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ea6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ea8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4eaa:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4eac:	b113      	cbz	r3, d4eb4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4eae:	2203      	movs	r2, #3
   d4eb0:	4601      	mov	r1, r0
   d4eb2:	4798      	blx	r3
    }
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	bd10      	pop	{r4, pc}

000d4eb8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4eb8:	b510      	push	{r4, lr}
   d4eba:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ebc:	f7ff fff3 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	bd10      	pop	{r4, pc}

000d4ec4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4ec4:	b513      	push	{r0, r1, r4, lr}
   d4ec6:	460b      	mov	r3, r1
   d4ec8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eca:	c803      	ldmia	r0, {r0, r1}
   d4ecc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ed0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ed4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ed8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4edc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ee0:	b002      	add	sp, #8
   d4ee2:	bd10      	pop	{r4, pc}

000d4ee4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ee4:	4803      	ldr	r0, [pc, #12]	; (d4ef4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4ee6:	4a04      	ldr	r2, [pc, #16]	; (d4ef8 <_GLOBAL__sub_I_RGB+0x14>)
   d4ee8:	4904      	ldr	r1, [pc, #16]	; (d4efc <_GLOBAL__sub_I_RGB+0x18>)
   d4eea:	2300      	movs	r3, #0
   d4eec:	6083      	str	r3, [r0, #8]
   d4eee:	f000 beb9 	b.w	d5c64 <__aeabi_atexit>
   d4ef2:	bf00      	nop
   d4ef4:	2003e3d4 	.word	0x2003e3d4
   d4ef8:	2003e28c 	.word	0x2003e28c
   d4efc:	000d4eb9 	.word	0x000d4eb9

000d4f00 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4f00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4f02:	4b0c      	ldr	r3, [pc, #48]	; (d4f34 <serialEventRun+0x34>)
   d4f04:	b133      	cbz	r3, d4f14 <serialEventRun+0x14>
   d4f06:	f000 fc29 	bl	d575c <_Z16_fetch_usbserialv>
   d4f0a:	6803      	ldr	r3, [r0, #0]
   d4f0c:	691b      	ldr	r3, [r3, #16]
   d4f0e:	4798      	blx	r3
   d4f10:	2800      	cmp	r0, #0
   d4f12:	dc09      	bgt.n	d4f28 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4f14:	4b08      	ldr	r3, [pc, #32]	; (d4f38 <serialEventRun+0x38>)
   d4f16:	b163      	cbz	r3, d4f32 <serialEventRun+0x32>
   d4f18:	f000 fcf2 	bl	d5900 <_Z22__fetch_global_Serial1v>
   d4f1c:	6803      	ldr	r3, [r0, #0]
   d4f1e:	691b      	ldr	r3, [r3, #16]
   d4f20:	4798      	blx	r3
   d4f22:	2800      	cmp	r0, #0
   d4f24:	dc03      	bgt.n	d4f2e <serialEventRun+0x2e>
   d4f26:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4f28:	f3af 8000 	nop.w
   d4f2c:	e7f2      	b.n	d4f14 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4f2e:	f3af 8000 	nop.w
   d4f32:	bd08      	pop	{r3, pc}
	...

000d4f3c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4f3c:	b508      	push	{r3, lr}
	serialEventRun();
   d4f3e:	f7ff ffdf 	bl	d4f00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f42:	f7ff fbe5 	bl	d4710 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f46:	4b01      	ldr	r3, [pc, #4]	; (d4f4c <_post_loop+0x10>)
   d4f48:	6018      	str	r0, [r3, #0]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	2003e74c 	.word	0x2003e74c

000d4f50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f52:	2300      	movs	r3, #0
   d4f54:	9300      	str	r3, [sp, #0]
   d4f56:	461a      	mov	r2, r3
   d4f58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f5c:	f7ff fcb2 	bl	d48c4 <system_ctrl_set_result>
}
   d4f60:	b003      	add	sp, #12
   d4f62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f68 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4f68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4f6a:	8843      	ldrh	r3, [r0, #2]
   d4f6c:	2b0a      	cmp	r3, #10
   d4f6e:	d008      	beq.n	d4f82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4f70:	2b50      	cmp	r3, #80	; 0x50
   d4f72:	d109      	bne.n	d4f88 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4f74:	4b09      	ldr	r3, [pc, #36]	; (d4f9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4f76:	681b      	ldr	r3, [r3, #0]
   d4f78:	b13b      	cbz	r3, d4f8a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4f7a:	b003      	add	sp, #12
   d4f7c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4f80:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4f82:	f7ff ffe5 	bl	d4f50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4f86:	e006      	b.n	d4f96 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f88:	2300      	movs	r3, #0
   d4f8a:	9300      	str	r3, [sp, #0]
   d4f8c:	461a      	mov	r2, r3
   d4f8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f92:	f7ff fc97 	bl	d48c4 <system_ctrl_set_result>
        break;
    }
}
   d4f96:	b003      	add	sp, #12
   d4f98:	f85d fb04 	ldr.w	pc, [sp], #4
   d4f9c:	2003e3e4 	.word	0x2003e3e4

000d4fa0 <module_user_init_hook>:

void module_user_init_hook()
{
   d4fa0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4fa2:	f7ff fbad 	bl	d4700 <HAL_RNG_GetRandomNumber>
   d4fa6:	4604      	mov	r4, r0
    srand(seed);
   d4fa8:	f000 ffd4 	bl	d5f54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4fac:	4b07      	ldr	r3, [pc, #28]	; (d4fcc <module_user_init_hook+0x2c>)
   d4fae:	b113      	cbz	r3, d4fb6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4fb6:	2100      	movs	r1, #0
   d4fb8:	4804      	ldr	r0, [pc, #16]	; (d4fcc <module_user_init_hook+0x2c>)
   d4fba:	f7ff fd05 	bl	d49c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fbe:	2100      	movs	r1, #0
   d4fc0:	4803      	ldr	r0, [pc, #12]	; (d4fd0 <module_user_init_hook+0x30>)
}
   d4fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fc6:	f7ff bc73 	b.w	d48b0 <system_ctrl_set_app_request_handler>
   d4fca:	bf00      	nop
   d4fcc:	00000000 	.word	0x00000000
   d4fd0:	000d4f69 	.word	0x000d4f69

000d4fd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fd4:	4770      	bx	lr

000d4fd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4fd6:	2000      	movs	r0, #0
   d4fd8:	4770      	bx	lr

000d4fda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4fda:	b510      	push	{r4, lr}
   d4fdc:	2110      	movs	r1, #16
   d4fde:	4604      	mov	r4, r0
   d4fe0:	f000 fe45 	bl	d5c6e <_ZdlPvj>
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	bd10      	pop	{r4, pc}

000d4fe8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4fe8:	b508      	push	{r3, lr}
      { delete this; }
   d4fea:	b108      	cbz	r0, d4ff0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4fec:	f7ff fff5 	bl	d4fda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ff0:	bd08      	pop	{r3, pc}

000d4ff2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ff2:	2200      	movs	r2, #0
   d4ff4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4ff6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ff8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4ffc:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ffe:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5002:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5004:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5006:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5008:	680c      	ldr	r4, [r1, #0]
   d500a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d500c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d500e:	bd10      	pop	{r4, pc}

000d5010 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5010:	b510      	push	{r4, lr}
   d5012:	4604      	mov	r4, r0
    free((void*)msg_);
   d5014:	6800      	ldr	r0, [r0, #0]
   d5016:	f7ff fce7 	bl	d49e8 <free>
}
   d501a:	4620      	mov	r0, r4
   d501c:	bd10      	pop	{r4, pc}

000d501e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d501e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5020:	68c4      	ldr	r4, [r0, #12]
   d5022:	b1f4      	cbz	r4, d5062 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5024:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5026:	2b02      	cmp	r3, #2
   d5028:	d103      	bne.n	d5032 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d502a:	f104 000c 	add.w	r0, r4, #12
   d502e:	f7ff ffef 	bl	d5010 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5032:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5034:	b135      	cbz	r5, d5044 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5036:	4628      	mov	r0, r5
   d5038:	f7ff ff35 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
   d503c:	2110      	movs	r1, #16
   d503e:	4628      	mov	r0, r5
   d5040:	f000 fe15 	bl	d5c6e <_ZdlPvj>
   d5044:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5046:	b135      	cbz	r5, d5056 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5048:	4628      	mov	r0, r5
   d504a:	f7ff ff2c 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
   d504e:	2110      	movs	r1, #16
   d5050:	4628      	mov	r0, r5
   d5052:	f000 fe0c 	bl	d5c6e <_ZdlPvj>
   d5056:	4620      	mov	r0, r4
   d5058:	2114      	movs	r1, #20
   d505a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d505e:	f000 be06 	b.w	d5c6e <_ZdlPvj>
   d5062:	bd38      	pop	{r3, r4, r5, pc}

000d5064 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5064:	b510      	push	{r4, lr}
   d5066:	b088      	sub	sp, #32
   d5068:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d506a:	4668      	mov	r0, sp
   d506c:	f7ff fdd8 	bl	d4c20 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5070:	4669      	mov	r1, sp
   d5072:	a804      	add	r0, sp, #16
   d5074:	f7ff fdf6 	bl	d4c64 <_ZN6StringC1ERKS_>
   d5078:	a804      	add	r0, sp, #16
   d507a:	47a0      	blx	r4
   d507c:	4604      	mov	r4, r0
   d507e:	a804      	add	r0, sp, #16
   d5080:	f7ff fd87 	bl	d4b92 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5084:	4668      	mov	r0, sp
   d5086:	f7ff fd84 	bl	d4b92 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d508a:	4620      	mov	r0, r4
   d508c:	b008      	add	sp, #32
   d508e:	bd10      	pop	{r4, pc}

000d5090 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5090:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5092:	2410      	movs	r4, #16
   d5094:	b085      	sub	sp, #20
   d5096:	4607      	mov	r7, r0
   d5098:	460e      	mov	r6, r1
   d509a:	4615      	mov	r5, r2
   d509c:	2100      	movs	r1, #0
   d509e:	4622      	mov	r2, r4
   d50a0:	4668      	mov	r0, sp
   d50a2:	f000 ff4e 	bl	d5f42 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d50a6:	2200      	movs	r2, #0
   d50a8:	4669      	mov	r1, sp
   d50aa:	4610      	mov	r0, r2
         size = sizeof(*this);
   d50ac:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d50b0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d50b2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d50b4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d50b6:	f7ff fc67 	bl	d4988 <spark_function>
}
   d50ba:	b005      	add	sp, #20
   d50bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d50be:	b513      	push	{r0, r1, r4, lr}
   d50c0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d50c2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d50c6:	2300      	movs	r3, #0
   d50c8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d50ca:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d50cc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d50ce:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50d0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d50d2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d50d4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50d6:	f7fe ffff 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50da:	4620      	mov	r0, r4
   d50dc:	b002      	add	sp, #8
   d50de:	bd10      	pop	{r4, pc}

000d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d50e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50e2:	460c      	mov	r4, r1
   d50e4:	ad02      	add	r5, sp, #8
   d50e6:	f854 3b04 	ldr.w	r3, [r4], #4
   d50ea:	f845 3d08 	str.w	r3, [r5, #-8]!
   d50ee:	4606      	mov	r6, r0
   d50f0:	460f      	mov	r7, r1
   d50f2:	a801      	add	r0, sp, #4
   d50f4:	4621      	mov	r1, r4
   d50f6:	f7ff fe44 	bl	d4d82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d50fa:	4629      	mov	r1, r5
   d50fc:	4630      	mov	r0, r6
   d50fe:	f7ff ffde 	bl	d50be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5102:	a801      	add	r0, sp, #4
   d5104:	f7fe ffe8 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5108:	4620      	mov	r0, r4
   d510a:	f7fe ffe5 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d510e:	4638      	mov	r0, r7
   d5110:	2108      	movs	r1, #8
   d5112:	f000 fdac 	bl	d5c6e <_ZdlPvj>
        return p;
    }
   d5116:	4630      	mov	r0, r6
   d5118:	b003      	add	sp, #12
   d511a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d511c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d511c:	b538      	push	{r3, r4, r5, lr}
   d511e:	2300      	movs	r3, #0
   d5120:	4604      	mov	r4, r0
   d5122:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5124:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5126:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5128:	f7fe ffb5 	bl	d4096 <_Znwj>
   d512c:	b128      	cbz	r0, d513a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d512e:	2301      	movs	r3, #1
   d5130:	6043      	str	r3, [r0, #4]
   d5132:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5134:	4b02      	ldr	r3, [pc, #8]	; (d5140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5136:	6003      	str	r3, [r0, #0]
   d5138:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d513a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d513c:	4620      	mov	r0, r4
   d513e:	bd38      	pop	{r3, r4, r5, pc}
   d5140:	000d63e0 	.word	0x000d63e0

000d5144 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5144:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5146:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5148:	b90a      	cbnz	r2, d514e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d514a:	f000 fd92 	bl	d5c72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d514e:	68c3      	ldr	r3, [r0, #12]
    }
   d5150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5154:	4718      	bx	r3

000d5156 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5156:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5158:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d515a:	f100 0110 	add.w	r1, r0, #16
   d515e:	f7ff fff1 	bl	d5144 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5162:	bd08      	pop	{r3, pc}

000d5164 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5164:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5166:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5168:	b90a      	cbnz	r2, d516e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d516a:	f000 fd82 	bl	d5c72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d516e:	68c3      	ldr	r3, [r0, #12]
    }
   d5170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5174:	4718      	bx	r3

000d5176 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5176:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5178:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d517a:	f100 0110 	add.w	r1, r0, #16
   d517e:	f7ff fff1 	bl	d5164 <_ZNKSt8functionIFvRKbEEclES1_>
   d5182:	bd08      	pop	{r3, pc}

000d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5184:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5186:	2300      	movs	r3, #0
   d5188:	6083      	str	r3, [r0, #8]
   d518a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d518c:	4604      	mov	r4, r0
   d518e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5190:	b12b      	cbz	r3, d519e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5192:	2202      	movs	r2, #2
   d5194:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5196:	68eb      	ldr	r3, [r5, #12]
   d5198:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d519a:	68ab      	ldr	r3, [r5, #8]
   d519c:	60a3      	str	r3, [r4, #8]
	}
    }
   d519e:	4620      	mov	r0, r4
   d51a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d51a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51a6:	b089      	sub	sp, #36	; 0x24
   d51a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d51aa:	4668      	mov	r0, sp
   d51ac:	f7ff ff21 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d51b0:	2300      	movs	r3, #0
   d51b2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d51b6:	f04f 0202 	mov.w	r2, #2
   d51ba:	e8d4 3f4f 	ldrexb	r3, [r4]
   d51be:	2b00      	cmp	r3, #0
   d51c0:	d103      	bne.n	d51ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d51c2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d51c6:	2900      	cmp	r1, #0
   d51c8:	d1f7      	bne.n	d51ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d51ca:	d002      	beq.n	d51d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d51cc:	f88d 3008 	strb.w	r3, [sp, #8]
   d51d0:	e063      	b.n	d529a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d51d2:	f114 050c 	adds.w	r5, r4, #12
   d51d6:	d003      	beq.n	d51e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d51d8:	4669      	mov	r1, sp
   d51da:	4628      	mov	r0, r5
   d51dc:	f7ff ff09 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51e0:	f3bf 8f5f 	dmb	sy
   d51e4:	2301      	movs	r3, #1
   d51e6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d51e8:	2000      	movs	r0, #0
   d51ea:	f104 0308 	add.w	r3, r4, #8
   d51ee:	f3bf 8f5f 	dmb	sy
   d51f2:	e853 6f00 	ldrex	r6, [r3]
   d51f6:	e843 0200 	strex	r2, r0, [r3]
   d51fa:	2a00      	cmp	r2, #0
   d51fc:	d1f9      	bne.n	d51f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d51fe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5202:	2e00      	cmp	r6, #0
   d5204:	d049      	beq.n	d529a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5206:	f7ff fb43 	bl	d4890 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d520a:	b120      	cbz	r0, d5216 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d520c:	4629      	mov	r1, r5
   d520e:	4630      	mov	r0, r6
   d5210:	f7ff ff98 	bl	d5144 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5214:	e03a      	b.n	d528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5216:	4631      	mov	r1, r6
   d5218:	a802      	add	r0, sp, #8
   d521a:	f7ff ffb3 	bl	d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d521e:	68e0      	ldr	r0, [r4, #12]
   d5220:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5224:	b108      	cbz	r0, d522a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5226:	f000 fecf 	bl	d5fc8 <strdup>
   d522a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d522c:	2010      	movs	r0, #16
   d522e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5232:	f7fe ff30 	bl	d4096 <_Znwj>
   d5236:	4605      	mov	r5, r0
   d5238:	b1e8      	cbz	r0, d5276 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d523a:	2700      	movs	r7, #0
   d523c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d523e:	2018      	movs	r0, #24
   d5240:	f7fe ff29 	bl	d4096 <_Znwj>
   d5244:	4604      	mov	r4, r0
   d5246:	b188      	cbz	r0, d526c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5248:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d524a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d524c:	a802      	add	r0, sp, #8
   d524e:	f7ff fe39 	bl	d4ec4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5252:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5254:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5256:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5258:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d525a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d525c:	a906      	add	r1, sp, #24
   d525e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5260:	60e3      	str	r3, [r4, #12]
   d5262:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5266:	9205      	str	r2, [sp, #20]
   d5268:	f7ff fec3 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d526c:	4b0d      	ldr	r3, [pc, #52]	; (d52a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d526e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5270:	4b0d      	ldr	r3, [pc, #52]	; (d52a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5272:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5274:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5276:	a806      	add	r0, sp, #24
   d5278:	f7ff feca 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d527c:	a802      	add	r0, sp, #8
   d527e:	f7ff fe12 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5282:	2200      	movs	r2, #0
   d5284:	4629      	mov	r1, r5
   d5286:	4809      	ldr	r0, [pc, #36]	; (d52ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5288:	f7ff fb0a 	bl	d48a0 <application_thread_invoke>
   d528c:	4630      	mov	r0, r6
   d528e:	f7ff fe0a 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5292:	2110      	movs	r1, #16
   d5294:	4630      	mov	r0, r6
   d5296:	f000 fcea 	bl	d5c6e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d529a:	4668      	mov	r0, sp
   d529c:	f7ff feb8 	bl	d5010 <_ZN8particle5ErrorD1Ev>
    }
   d52a0:	b009      	add	sp, #36	; 0x24
   d52a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52a4:	000d5157 	.word	0x000d5157
   d52a8:	000d53cd 	.word	0x000d53cd
   d52ac:	000d594d 	.word	0x000d594d

000d52b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d52b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52b4:	b08b      	sub	sp, #44	; 0x2c
   d52b6:	4606      	mov	r6, r0
   d52b8:	460f      	mov	r7, r1
   d52ba:	4690      	mov	r8, r2
   d52bc:	4699      	mov	r9, r3
   d52be:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52c2:	f7ff fb69 	bl	d4998 <spark_cloud_flag_connected>
   d52c6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d52c8:	4683      	mov	fp, r0
   d52ca:	bb30      	cbnz	r0, d531a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d52cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d52d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52d2:	a905      	add	r1, sp, #20
   d52d4:	4628      	mov	r0, r5
   d52d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52da:	f7ff fe8a 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
   d52de:	2014      	movs	r0, #20
   d52e0:	f7fe fed9 	bl	d4096 <_Znwj>
   d52e4:	4604      	mov	r4, r0
   d52e6:	b158      	cbz	r0, d5300 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d52e8:	2302      	movs	r3, #2
   d52ea:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52ec:	2301      	movs	r3, #1
   d52ee:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d52f0:	f8c0 b004 	str.w	fp, [r0, #4]
   d52f4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d52f8:	4629      	mov	r1, r5
   d52fa:	300c      	adds	r0, #12
   d52fc:	f7ff fe79 	bl	d4ff2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5300:	4630      	mov	r0, r6
   d5302:	4621      	mov	r1, r4
   d5304:	f840 4b04 	str.w	r4, [r0], #4
   d5308:	f7ff ff08 	bl	d511c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d530c:	4628      	mov	r0, r5
   d530e:	f7ff fe7f 	bl	d5010 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5312:	a805      	add	r0, sp, #20
   d5314:	f7ff fe7c 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   d5318:	e052      	b.n	d53c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d531a:	2400      	movs	r4, #0
   d531c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d531e:	2014      	movs	r0, #20
   d5320:	606c      	str	r4, [r5, #4]
   d5322:	60ac      	str	r4, [r5, #8]
   d5324:	9307      	str	r3, [sp, #28]
   d5326:	f7fe feb6 	bl	d4096 <_Znwj>
   d532a:	4601      	mov	r1, r0
   d532c:	b118      	cbz	r0, d5336 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d532e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5330:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5332:	6044      	str	r4, [r0, #4]
   d5334:	6084      	str	r4, [r0, #8]
   d5336:	a804      	add	r0, sp, #16
   d5338:	9103      	str	r1, [sp, #12]
   d533a:	f7ff feef 	bl	d511c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d533e:	4b22      	ldr	r3, [pc, #136]	; (d53c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5340:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5342:	2008      	movs	r0, #8
   d5344:	f7fe fea7 	bl	d4096 <_Znwj>
   d5348:	4604      	mov	r4, r0
   d534a:	b128      	cbz	r0, d5358 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d534c:	9b03      	ldr	r3, [sp, #12]
   d534e:	f840 3b04 	str.w	r3, [r0], #4
   d5352:	a904      	add	r1, sp, #16
   d5354:	f7ff fd15 	bl	d4d82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5358:	9500      	str	r5, [sp, #0]
   d535a:	fa5f f38a 	uxtb.w	r3, sl
   d535e:	464a      	mov	r2, r9
   d5360:	4641      	mov	r1, r8
   d5362:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5364:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5366:	f7ff fb1f 	bl	d49a8 <spark_send_event>
   d536a:	b920      	cbnz	r0, d5376 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d536c:	9b03      	ldr	r3, [sp, #12]
   d536e:	785b      	ldrb	r3, [r3, #1]
   d5370:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5374:	b183      	cbz	r3, d5398 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5376:	9b03      	ldr	r3, [sp, #12]
   d5378:	9305      	str	r3, [sp, #20]
   d537a:	a904      	add	r1, sp, #16
   d537c:	a806      	add	r0, sp, #24
   d537e:	f7ff fd00 	bl	d4d82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5382:	a905      	add	r1, sp, #20
   d5384:	4630      	mov	r0, r6
   d5386:	f7ff fe9a 	bl	d50be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d538a:	a806      	add	r0, sp, #24
   d538c:	f7fe fea4 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5390:	a804      	add	r0, sp, #16
   d5392:	f7fe fea1 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5396:	e013      	b.n	d53c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5398:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d539c:	a905      	add	r1, sp, #20
   d539e:	a803      	add	r0, sp, #12
   d53a0:	9205      	str	r2, [sp, #20]
   d53a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d53a6:	f7ff fefd 	bl	d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d53aa:	a805      	add	r0, sp, #20
   d53ac:	f7ff fe30 	bl	d5010 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d53b0:	a805      	add	r0, sp, #20
   d53b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d53b4:	f7ff fe94 	bl	d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d53b8:	a806      	add	r0, sp, #24
   d53ba:	f7fe fe8d 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53be:	e7da      	b.n	d5376 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d53c0:	4630      	mov	r0, r6
   d53c2:	b00b      	add	sp, #44	; 0x2c
   d53c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d53c8:	000d553d 	.word	0x000d553d

000d53cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d53cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d53ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d53d2:	d006      	beq.n	d53e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d53d4:	2a03      	cmp	r2, #3
   d53d6:	d017      	beq.n	d5408 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d53d8:	2a01      	cmp	r2, #1
   d53da:	d122      	bne.n	d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d53dc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53de:	6003      	str	r3, [r0, #0]
	      break;
   d53e0:	e01f      	b.n	d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53e2:	2018      	movs	r0, #24
   d53e4:	680e      	ldr	r6, [r1, #0]
   d53e6:	f7fe fe56 	bl	d4096 <_Znwj>
   d53ea:	4605      	mov	r5, r0
   d53ec:	b150      	cbz	r0, d5404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d53ee:	4631      	mov	r1, r6
   d53f0:	f7ff fec8 	bl	d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d53f4:	6930      	ldr	r0, [r6, #16]
   d53f6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d53fa:	b108      	cbz	r0, d5400 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d53fc:	f000 fde4 	bl	d5fc8 <strdup>
   d5400:	6128      	str	r0, [r5, #16]
   d5402:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5404:	6025      	str	r5, [r4, #0]
   d5406:	e00c      	b.n	d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5408:	6804      	ldr	r4, [r0, #0]
   d540a:	b154      	cbz	r4, d5422 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d540c:	f104 0010 	add.w	r0, r4, #16
   d5410:	f7ff fdfe 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5414:	4620      	mov	r0, r4
   d5416:	f7ff fd46 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d541a:	2118      	movs	r1, #24
   d541c:	4620      	mov	r0, r4
   d541e:	f000 fc26 	bl	d5c6e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5422:	2000      	movs	r0, #0
   d5424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5426 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5426:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5428:	2300      	movs	r3, #0
   d542a:	6083      	str	r3, [r0, #8]
   d542c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d542e:	4604      	mov	r4, r0
   d5430:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5432:	b12b      	cbz	r3, d5440 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5434:	2202      	movs	r2, #2
   d5436:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5438:	68eb      	ldr	r3, [r5, #12]
   d543a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d543c:	68ab      	ldr	r3, [r5, #8]
   d543e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5440:	4620      	mov	r0, r4
   d5442:	bd38      	pop	{r3, r4, r5, pc}

000d5444 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5444:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5446:	b570      	push	{r4, r5, r6, lr}
   d5448:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d544a:	d006      	beq.n	d545a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d544c:	2a03      	cmp	r2, #3
   d544e:	d011      	beq.n	d5474 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5450:	2a01      	cmp	r2, #1
   d5452:	d118      	bne.n	d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5454:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5456:	6003      	str	r3, [r0, #0]
	      break;
   d5458:	e015      	b.n	d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d545a:	2014      	movs	r0, #20
   d545c:	680e      	ldr	r6, [r1, #0]
   d545e:	f7fe fe1a 	bl	d4096 <_Znwj>
   d5462:	4605      	mov	r5, r0
   d5464:	b120      	cbz	r0, d5470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5466:	4631      	mov	r1, r6
   d5468:	f7ff ffdd 	bl	d5426 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d546c:	7c33      	ldrb	r3, [r6, #16]
   d546e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5470:	6025      	str	r5, [r4, #0]
   d5472:	e008      	b.n	d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5474:	6804      	ldr	r4, [r0, #0]
   d5476:	b134      	cbz	r4, d5486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5478:	4620      	mov	r0, r4
   d547a:	f7ff fd14 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d547e:	2114      	movs	r1, #20
   d5480:	4620      	mov	r0, r4
   d5482:	f000 fbf4 	bl	d5c6e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5486:	2000      	movs	r0, #0
   d5488:	bd70      	pop	{r4, r5, r6, pc}
	...

000d548c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d548c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d548e:	2300      	movs	r3, #0
   d5490:	b087      	sub	sp, #28
   d5492:	460c      	mov	r4, r1
   d5494:	f3bf 8f5f 	dmb	sy
   d5498:	e850 6f00 	ldrex	r6, [r0]
   d549c:	e840 3200 	strex	r2, r3, [r0]
   d54a0:	2a00      	cmp	r2, #0
   d54a2:	d1f9      	bne.n	d5498 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d54a4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d54a8:	2e00      	cmp	r6, #0
   d54aa:	d03f      	beq.n	d552c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d54ac:	4618      	mov	r0, r3
   d54ae:	f7ff f9ef 	bl	d4890 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d54b2:	4607      	mov	r7, r0
   d54b4:	b120      	cbz	r0, d54c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d54b6:	4621      	mov	r1, r4
   d54b8:	4630      	mov	r0, r6
   d54ba:	f7ff fe53 	bl	d5164 <_ZNKSt8functionIFvRKbEEclES1_>
   d54be:	e02e      	b.n	d551e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d54c0:	4631      	mov	r1, r6
   d54c2:	a801      	add	r0, sp, #4
   d54c4:	f7ff ffaf 	bl	d5426 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d54c8:	7823      	ldrb	r3, [r4, #0]
   d54ca:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d54ce:	2010      	movs	r0, #16
   d54d0:	f7fe fde1 	bl	d4096 <_Znwj>
   d54d4:	4605      	mov	r5, r0
   d54d6:	b1d0      	cbz	r0, d550e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54d8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54da:	2014      	movs	r0, #20
   d54dc:	f7fe fddb 	bl	d4096 <_Znwj>
   d54e0:	4604      	mov	r4, r0
   d54e2:	b178      	cbz	r0, d5504 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54e4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d54e6:	4601      	mov	r1, r0
   d54e8:	a801      	add	r0, sp, #4
   d54ea:	f7ff fceb 	bl	d4ec4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54ee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54f2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54f4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54f6:	9203      	str	r2, [sp, #12]
   d54f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54fa:	60e3      	str	r3, [r4, #12]
   d54fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5500:	9204      	str	r2, [sp, #16]
   d5502:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5504:	4b0a      	ldr	r3, [pc, #40]	; (d5530 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5506:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5508:	4b0a      	ldr	r3, [pc, #40]	; (d5534 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d550a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d550c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d550e:	a801      	add	r0, sp, #4
   d5510:	f7ff fcc9 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5514:	2200      	movs	r2, #0
   d5516:	4629      	mov	r1, r5
   d5518:	4807      	ldr	r0, [pc, #28]	; (d5538 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d551a:	f7ff f9c1 	bl	d48a0 <application_thread_invoke>
   d551e:	4630      	mov	r0, r6
   d5520:	f7ff fcc1 	bl	d4ea6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5524:	2110      	movs	r1, #16
   d5526:	4630      	mov	r0, r6
   d5528:	f000 fba1 	bl	d5c6e <_ZdlPvj>
        }
    }
   d552c:	b007      	add	sp, #28
   d552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5530:	000d5177 	.word	0x000d5177
   d5534:	000d5445 	.word	0x000d5445
   d5538:	000d594d 	.word	0x000d594d

000d553c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d553c:	b530      	push	{r4, r5, lr}
   d553e:	b085      	sub	sp, #20
   d5540:	4604      	mov	r4, r0
   d5542:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5544:	4668      	mov	r0, sp
   d5546:	4611      	mov	r1, r2
   d5548:	f7ff fdca 	bl	d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d554c:	b17c      	cbz	r4, d556e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d554e:	b224      	sxth	r4, r4
   d5550:	4628      	mov	r0, r5
   d5552:	b10d      	cbz	r5, d5558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5554:	f000 fd38 	bl	d5fc8 <strdup>
   d5558:	9002      	str	r0, [sp, #8]
   d555a:	a902      	add	r1, sp, #8
   d555c:	4668      	mov	r0, sp
   d555e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5562:	f7ff fe1f 	bl	d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5566:	a802      	add	r0, sp, #8
   d5568:	f7ff fd52 	bl	d5010 <_ZN8particle5ErrorD1Ev>
   d556c:	e01d      	b.n	d55aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d556e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5570:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5574:	f04f 0201 	mov.w	r2, #1
   d5578:	e8d0 3f4f 	ldrexb	r3, [r0]
   d557c:	42a3      	cmp	r3, r4
   d557e:	d103      	bne.n	d5588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5580:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5584:	2900      	cmp	r1, #0
   d5586:	d1f7      	bne.n	d5578 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5588:	d002      	beq.n	d5590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d558a:	f88d 3008 	strb.w	r3, [sp, #8]
   d558e:	e00c      	b.n	d55aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5590:	f110 010c 	adds.w	r1, r0, #12
   d5594:	f04f 0301 	mov.w	r3, #1
   d5598:	bf18      	it	ne
   d559a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d559c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d55a0:	3004      	adds	r0, #4
   d55a2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d55a6:	f7ff ff71 	bl	d548c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d55aa:	a801      	add	r0, sp, #4
   d55ac:	f7fe fd94 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d55b0:	b005      	add	sp, #20
   d55b2:	bd30      	pop	{r4, r5, pc}

000d55b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d55b4:	4770      	bx	lr

000d55b6 <_ZN9IPAddressD0Ev>:
   d55b6:	b510      	push	{r4, lr}
   d55b8:	2118      	movs	r1, #24
   d55ba:	4604      	mov	r4, r0
   d55bc:	f000 fb57 	bl	d5c6e <_ZdlPvj>
   d55c0:	4620      	mov	r0, r4
   d55c2:	bd10      	pop	{r4, pc}

000d55c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55c6:	7d03      	ldrb	r3, [r0, #20]
   d55c8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55ca:	b08d      	sub	sp, #52	; 0x34
   d55cc:	460e      	mov	r6, r1
   d55ce:	f100 0704 	add.w	r7, r0, #4
   d55d2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55d6:	d002      	beq.n	d55de <_ZNK9IPAddress7printToER5Print+0x1a>
   d55d8:	f100 0508 	add.w	r5, r0, #8
   d55dc:	e018      	b.n	d5610 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55de:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55e0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55e2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55e6:	232f      	movs	r3, #47	; 0x2f
   d55e8:	462a      	mov	r2, r5
   d55ea:	200a      	movs	r0, #10
   d55ec:	f7ff f8c0 	bl	d4770 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55f0:	4628      	mov	r0, r5
   d55f2:	f000 fd04 	bl	d5ffe <strlen>
   d55f6:	6833      	ldr	r3, [r6, #0]
   d55f8:	4602      	mov	r2, r0
   d55fa:	68db      	ldr	r3, [r3, #12]
   d55fc:	4629      	mov	r1, r5
   d55fe:	4630      	mov	r0, r6
   d5600:	4798      	blx	r3
   d5602:	e00f      	b.n	d5624 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5604:	b124      	cbz	r4, d5610 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5606:	212e      	movs	r1, #46	; 0x2e
   d5608:	4630      	mov	r0, r6
   d560a:	f7ff fbef 	bl	d4dec <_ZN5Print5printEc>
   d560e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5610:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5614:	220a      	movs	r2, #10
   d5616:	4630      	mov	r0, r6
   d5618:	f7ff fc2e 	bl	d4e78 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d561c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d561e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5620:	d1f0      	bne.n	d5604 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5622:	4620      	mov	r0, r4
    }
    return n;
}
   d5624:	b00d      	add	sp, #52	; 0x34
   d5626:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5628 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5628:	b510      	push	{r4, lr}
   d562a:	4b05      	ldr	r3, [pc, #20]	; (d5640 <_ZN9IPAddressC1Ev+0x18>)
   d562c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d562e:	2211      	movs	r2, #17
   d5630:	f840 3b04 	str.w	r3, [r0], #4
   d5634:	2100      	movs	r1, #0
   d5636:	f000 fc84 	bl	d5f42 <memset>
{
    clear();
}
   d563a:	4620      	mov	r0, r4
   d563c:	bd10      	pop	{r4, pc}
   d563e:	bf00      	nop
   d5640:	000d63fc 	.word	0x000d63fc

000d5644 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5644:	4603      	mov	r3, r0
   d5646:	4a07      	ldr	r2, [pc, #28]	; (d5664 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5648:	b510      	push	{r4, lr}
   d564a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d564e:	f101 0210 	add.w	r2, r1, #16
   d5652:	f851 4b04 	ldr.w	r4, [r1], #4
   d5656:	f843 4b04 	str.w	r4, [r3], #4
   d565a:	4291      	cmp	r1, r2
   d565c:	d1f9      	bne.n	d5652 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d565e:	780a      	ldrb	r2, [r1, #0]
   d5660:	701a      	strb	r2, [r3, #0]
}
   d5662:	bd10      	pop	{r4, pc}
   d5664:	000d63fc 	.word	0x000d63fc

000d5668 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5668:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d566a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d566e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5672:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5676:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d567a:	2304      	movs	r3, #4
   d567c:	6041      	str	r1, [r0, #4]
   d567e:	7503      	strb	r3, [r0, #20]
   d5680:	bd10      	pop	{r4, pc}

000d5682 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5682:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5684:	780d      	ldrb	r5, [r1, #0]
   d5686:	788b      	ldrb	r3, [r1, #2]
   d5688:	784a      	ldrb	r2, [r1, #1]
   d568a:	78c9      	ldrb	r1, [r1, #3]
   d568c:	9100      	str	r1, [sp, #0]
   d568e:	4629      	mov	r1, r5
   d5690:	f7ff ffea 	bl	d5668 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5694:	b003      	add	sp, #12
   d5696:	bd30      	pop	{r4, r5, pc}

000d5698 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5698:	7441      	strb	r1, [r0, #17]
   d569a:	4770      	bx	lr

000d569c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d569c:	4770      	bx	lr

000d569e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d569e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d56a0:	2100      	movs	r1, #0
   d56a2:	7c00      	ldrb	r0, [r0, #16]
   d56a4:	f7ff f8cc 	bl	d4840 <HAL_USB_USART_Receive_Data>
}
   d56a8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56ac:	bf28      	it	cs
   d56ae:	f04f 30ff 	movcs.w	r0, #4294967295
   d56b2:	bd08      	pop	{r3, pc}

000d56b4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d56b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d56b6:	2101      	movs	r1, #1
   d56b8:	7c00      	ldrb	r0, [r0, #16]
   d56ba:	f7ff f8c1 	bl	d4840 <HAL_USB_USART_Receive_Data>
}
   d56be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56c2:	bf28      	it	cs
   d56c4:	f04f 30ff 	movcs.w	r0, #4294967295
   d56c8:	bd08      	pop	{r3, pc}

000d56ca <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d56ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d56cc:	7c00      	ldrb	r0, [r0, #16]
   d56ce:	f7ff f8af 	bl	d4830 <HAL_USB_USART_Available_Data_For_Write>
}
   d56d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56d6:	bd08      	pop	{r3, pc}

000d56d8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d56d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d56da:	7c00      	ldrb	r0, [r0, #16]
   d56dc:	f7ff f8a0 	bl	d4820 <HAL_USB_USART_Available_Data>
}
   d56e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56e4:	bd08      	pop	{r3, pc}

000d56e6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d56e6:	7c00      	ldrb	r0, [r0, #16]
   d56e8:	f7ff b8ba 	b.w	d4860 <HAL_USB_USART_Flush_Data>

000d56ec <_ZN9USBSerialD0Ev>:
   d56ec:	b510      	push	{r4, lr}
   d56ee:	2114      	movs	r1, #20
   d56f0:	4604      	mov	r4, r0
   d56f2:	f000 fabc 	bl	d5c6e <_ZdlPvj>
   d56f6:	4620      	mov	r0, r4
   d56f8:	bd10      	pop	{r4, pc}

000d56fa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d56fa:	b538      	push	{r3, r4, r5, lr}
   d56fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56fe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5700:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5702:	f7ff f895 	bl	d4830 <HAL_USB_USART_Available_Data_For_Write>
   d5706:	2800      	cmp	r0, #0
   d5708:	dc01      	bgt.n	d570e <_ZN9USBSerial5writeEh+0x14>
   d570a:	7c60      	ldrb	r0, [r4, #17]
   d570c:	b128      	cbz	r0, d571a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d570e:	4629      	mov	r1, r5
   d5710:	7c20      	ldrb	r0, [r4, #16]
   d5712:	f7ff f89d 	bl	d4850 <HAL_USB_USART_Send_Data>
   d5716:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d571a:	bd38      	pop	{r3, r4, r5, pc}

000d571c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d571c:	b510      	push	{r4, lr}
   d571e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5720:	2300      	movs	r3, #0
   d5722:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5728:	60a3      	str	r3, [r4, #8]
   d572a:	4b05      	ldr	r3, [pc, #20]	; (d5740 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d572c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d572e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5730:	4608      	mov	r0, r1
{
  _serial = serial;
   d5732:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5734:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5736:	4611      	mov	r1, r2
   d5738:	f7ff f862 	bl	d4800 <HAL_USB_USART_Init>
}
   d573c:	4620      	mov	r0, r4
   d573e:	bd10      	pop	{r4, pc}
   d5740:	000d6410 	.word	0x000d6410

000d5744 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5744:	2200      	movs	r2, #0
   d5746:	7c00      	ldrb	r0, [r0, #16]
   d5748:	f7ff b862 	b.w	d4810 <HAL_USB_USART_Begin>

000d574c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d574c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d574e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5750:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5752:	2100      	movs	r1, #0
   d5754:	f000 fbf5 	bl	d5f42 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5758:	4620      	mov	r0, r4
   d575a:	bd10      	pop	{r4, pc}

000d575c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d575c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d575e:	4d0e      	ldr	r5, [pc, #56]	; (d5798 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5760:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5762:	a801      	add	r0, sp, #4
   d5764:	f7ff fff2 	bl	d574c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5768:	6829      	ldr	r1, [r5, #0]
   d576a:	f011 0401 	ands.w	r4, r1, #1
   d576e:	d110      	bne.n	d5792 <_Z16_fetch_usbserialv+0x36>
   d5770:	4628      	mov	r0, r5
   d5772:	f7fe fc96 	bl	d40a2 <__cxa_guard_acquire>
   d5776:	b160      	cbz	r0, d5792 <_Z16_fetch_usbserialv+0x36>
   d5778:	aa01      	add	r2, sp, #4
   d577a:	4621      	mov	r1, r4
   d577c:	4807      	ldr	r0, [pc, #28]	; (d579c <_Z16_fetch_usbserialv+0x40>)
   d577e:	f7ff ffcd 	bl	d571c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5782:	4628      	mov	r0, r5
   d5784:	f7fe fc92 	bl	d40ac <__cxa_guard_release>
   d5788:	4a05      	ldr	r2, [pc, #20]	; (d57a0 <_Z16_fetch_usbserialv+0x44>)
   d578a:	4906      	ldr	r1, [pc, #24]	; (d57a4 <_Z16_fetch_usbserialv+0x48>)
   d578c:	4803      	ldr	r0, [pc, #12]	; (d579c <_Z16_fetch_usbserialv+0x40>)
   d578e:	f000 fa69 	bl	d5c64 <__aeabi_atexit>
	return _usbserial;
}
   d5792:	4802      	ldr	r0, [pc, #8]	; (d579c <_Z16_fetch_usbserialv+0x40>)
   d5794:	b007      	add	sp, #28
   d5796:	bd30      	pop	{r4, r5, pc}
   d5798:	2003e3e8 	.word	0x2003e3e8
   d579c:	2003e3ec 	.word	0x2003e3ec
   d57a0:	2003e28c 	.word	0x2003e28c
   d57a4:	000d569d 	.word	0x000d569d

000d57a8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d57a8:	2200      	movs	r2, #0
   d57aa:	4611      	mov	r1, r2
   d57ac:	6840      	ldr	r0, [r0, #4]
   d57ae:	f7ff b8ab 	b.w	d4908 <network_ready>

000d57b2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57b2:	2200      	movs	r2, #0
   d57b4:	4611      	mov	r1, r2
   d57b6:	6840      	ldr	r0, [r0, #4]
   d57b8:	f7ff b8c6 	b.w	d4948 <network_listening>

000d57bc <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57bc:	2200      	movs	r2, #0
   d57be:	4611      	mov	r1, r2
   d57c0:	6840      	ldr	r0, [r0, #4]
   d57c2:	f7ff b8d1 	b.w	d4968 <network_get_listen_timeout>

000d57c6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57c6:	2200      	movs	r2, #0
   d57c8:	6840      	ldr	r0, [r0, #4]
   d57ca:	f7ff b8c5 	b.w	d4958 <network_set_listen_timeout>

000d57ce <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57ce:	2200      	movs	r2, #0
   d57d0:	f081 0101 	eor.w	r1, r1, #1
   d57d4:	6840      	ldr	r0, [r0, #4]
   d57d6:	f7ff b8af 	b.w	d4938 <network_listen>

000d57da <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d57da:	2300      	movs	r3, #0
   d57dc:	461a      	mov	r2, r3
   d57de:	4619      	mov	r1, r3
   d57e0:	6840      	ldr	r0, [r0, #4]
   d57e2:	f7ff b8a1 	b.w	d4928 <network_off>

000d57e6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d57e6:	2300      	movs	r3, #0
   d57e8:	461a      	mov	r2, r3
   d57ea:	4619      	mov	r1, r3
   d57ec:	6840      	ldr	r0, [r0, #4]
   d57ee:	f7ff b893 	b.w	d4918 <network_on>

000d57f2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57f2:	2200      	movs	r2, #0
   d57f4:	4611      	mov	r1, r2
   d57f6:	6840      	ldr	r0, [r0, #4]
   d57f8:	f7ff b876 	b.w	d48e8 <network_connecting>

000d57fc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57fc:	2200      	movs	r2, #0
   d57fe:	2102      	movs	r1, #2
   d5800:	6840      	ldr	r0, [r0, #4]
   d5802:	f7ff b879 	b.w	d48f8 <network_disconnect>

000d5806 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5806:	2300      	movs	r3, #0
   d5808:	461a      	mov	r2, r3
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	f7ff b864 	b.w	d48d8 <network_connect>

000d5810 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5810:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5812:	4c08      	ldr	r4, [pc, #32]	; (d5834 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5814:	2528      	movs	r5, #40	; 0x28
   d5816:	462a      	mov	r2, r5
   d5818:	2100      	movs	r1, #0
   d581a:	4620      	mov	r0, r4
   d581c:	f000 fb91 	bl	d5f42 <memset>
        cid = -1;
   d5820:	f04f 33ff 	mov.w	r3, #4294967295
   d5824:	6063      	str	r3, [r4, #4]
   d5826:	4b04      	ldr	r3, [pc, #16]	; (d5838 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5828:	8025      	strh	r5, [r4, #0]
   d582a:	2204      	movs	r2, #4
   d582c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d582e:	4a03      	ldr	r2, [pc, #12]	; (d583c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5830:	601a      	str	r2, [r3, #0]
   d5832:	bd38      	pop	{r3, r4, r5, pc}
   d5834:	2003e408 	.word	0x2003e408
   d5838:	2003e400 	.word	0x2003e400
   d583c:	000d6440 	.word	0x000d6440

000d5840 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5840:	4770      	bx	lr

000d5842 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5842:	7441      	strb	r1, [r0, #17]
   d5844:	4770      	bx	lr

000d5846 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5846:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5848:	7c00      	ldrb	r0, [r0, #16]
   d584a:	f7fe ffc9 	bl	d47e0 <HAL_USART_Available_Data_For_Write>
}
   d584e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5852:	bd08      	pop	{r3, pc}

000d5854 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5854:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5856:	7c00      	ldrb	r0, [r0, #16]
   d5858:	f7fe ffa2 	bl	d47a0 <HAL_USART_Available_Data>
}
   d585c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5860:	bd08      	pop	{r3, pc}

000d5862 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5862:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5864:	7c00      	ldrb	r0, [r0, #16]
   d5866:	f7fe ffab 	bl	d47c0 <HAL_USART_Peek_Data>
}
   d586a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d586e:	bf28      	it	cs
   d5870:	f04f 30ff 	movcs.w	r0, #4294967295
   d5874:	bd08      	pop	{r3, pc}

000d5876 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5876:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5878:	7c00      	ldrb	r0, [r0, #16]
   d587a:	f7fe ff99 	bl	d47b0 <HAL_USART_Read_Data>
}
   d587e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5882:	bf28      	it	cs
   d5884:	f04f 30ff 	movcs.w	r0, #4294967295
   d5888:	bd08      	pop	{r3, pc}

000d588a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d588a:	7c00      	ldrb	r0, [r0, #16]
   d588c:	f7fe bfa0 	b.w	d47d0 <HAL_USART_Flush_Data>

000d5890 <_ZN11USARTSerialD0Ev>:
   d5890:	b510      	push	{r4, lr}
   d5892:	2114      	movs	r1, #20
   d5894:	4604      	mov	r4, r0
   d5896:	f000 f9ea 	bl	d5c6e <_ZdlPvj>
   d589a:	4620      	mov	r0, r4
   d589c:	bd10      	pop	{r4, pc}

000d589e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d589e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d58a2:	4604      	mov	r4, r0
   d58a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58a6:	b925      	cbnz	r5, d58b2 <_ZN11USARTSerial5writeEh+0x14>
   d58a8:	7c00      	ldrb	r0, [r0, #16]
   d58aa:	f7fe ff99 	bl	d47e0 <HAL_USART_Available_Data_For_Write>
   d58ae:	2800      	cmp	r0, #0
   d58b0:	dd05      	ble.n	d58be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58b2:	4631      	mov	r1, r6
   d58b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d58b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58ba:	f7fe bf69 	b.w	d4790 <HAL_USART_Write_Data>
  }
  return 0;
}
   d58be:	4628      	mov	r0, r5
   d58c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d58c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d58c4:	b510      	push	{r4, lr}
   d58c6:	4604      	mov	r4, r0
   d58c8:	4608      	mov	r0, r1
   d58ca:	4611      	mov	r1, r2
   d58cc:	2200      	movs	r2, #0
   d58ce:	6062      	str	r2, [r4, #4]
   d58d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d58d4:	60a2      	str	r2, [r4, #8]
   d58d6:	4a05      	ldr	r2, [pc, #20]	; (d58ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d58d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d58da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d58dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d58de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d58e0:	461a      	mov	r2, r3
   d58e2:	f7fe ff4d 	bl	d4780 <HAL_USART_Init>
}
   d58e6:	4620      	mov	r0, r4
   d58e8:	bd10      	pop	{r4, pc}
   d58ea:	bf00      	nop
   d58ec:	000d6474 	.word	0x000d6474

000d58f0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d58f0:	2300      	movs	r3, #0
   d58f2:	7c00      	ldrb	r0, [r0, #16]
   d58f4:	f7fe bf7c 	b.w	d47f0 <HAL_USART_BeginConfig>

000d58f8 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d58f8:	2200      	movs	r2, #0
   d58fa:	f7ff bff9 	b.w	d58f0 <_ZN11USARTSerial5beginEmm>
	...

000d5900 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5900:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5902:	4d0c      	ldr	r5, [pc, #48]	; (d5934 <_Z22__fetch_global_Serial1v+0x34>)
   d5904:	6829      	ldr	r1, [r5, #0]
   d5906:	f011 0401 	ands.w	r4, r1, #1
   d590a:	d111      	bne.n	d5930 <_Z22__fetch_global_Serial1v+0x30>
   d590c:	4628      	mov	r0, r5
   d590e:	f7fe fbc8 	bl	d40a2 <__cxa_guard_acquire>
   d5912:	b168      	cbz	r0, d5930 <_Z22__fetch_global_Serial1v+0x30>
   d5914:	4a08      	ldr	r2, [pc, #32]	; (d5938 <_Z22__fetch_global_Serial1v+0x38>)
   d5916:	4b09      	ldr	r3, [pc, #36]	; (d593c <_Z22__fetch_global_Serial1v+0x3c>)
   d5918:	4809      	ldr	r0, [pc, #36]	; (d5940 <_Z22__fetch_global_Serial1v+0x40>)
   d591a:	4621      	mov	r1, r4
   d591c:	f7ff ffd2 	bl	d58c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5920:	4628      	mov	r0, r5
   d5922:	f7fe fbc3 	bl	d40ac <__cxa_guard_release>
   d5926:	4a07      	ldr	r2, [pc, #28]	; (d5944 <_Z22__fetch_global_Serial1v+0x44>)
   d5928:	4907      	ldr	r1, [pc, #28]	; (d5948 <_Z22__fetch_global_Serial1v+0x48>)
   d592a:	4805      	ldr	r0, [pc, #20]	; (d5940 <_Z22__fetch_global_Serial1v+0x40>)
   d592c:	f000 f99a 	bl	d5c64 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5930:	4803      	ldr	r0, [pc, #12]	; (d5940 <_Z22__fetch_global_Serial1v+0x40>)
   d5932:	bd38      	pop	{r3, r4, r5, pc}
   d5934:	2003e4c8 	.word	0x2003e4c8
   d5938:	2003e4cc 	.word	0x2003e4cc
   d593c:	2003e444 	.word	0x2003e444
   d5940:	2003e430 	.word	0x2003e430
   d5944:	2003e28c 	.word	0x2003e28c
   d5948:	000d5841 	.word	0x000d5841

000d594c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d594c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d594e:	6883      	ldr	r3, [r0, #8]
   d5950:	4604      	mov	r4, r0
   d5952:	b90b      	cbnz	r3, d5958 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5954:	f000 f98d 	bl	d5c72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5958:	68c3      	ldr	r3, [r0, #12]
   d595a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d595c:	68a3      	ldr	r3, [r4, #8]
   d595e:	b11b      	cbz	r3, d5968 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5960:	2203      	movs	r2, #3
   d5962:	4621      	mov	r1, r4
   d5964:	4620      	mov	r0, r4
   d5966:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5968:	4620      	mov	r0, r4
   d596a:	2110      	movs	r1, #16
}
   d596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5970:	f000 b97d 	b.w	d5c6e <_ZdlPvj>

000d5974 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5974:	2200      	movs	r2, #0
   d5976:	4611      	mov	r1, r2
   d5978:	6840      	ldr	r0, [r0, #4]
   d597a:	f7fe bfe5 	b.w	d4948 <network_listening>

000d597e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d597e:	2200      	movs	r2, #0
   d5980:	4611      	mov	r1, r2
   d5982:	6840      	ldr	r0, [r0, #4]
   d5984:	f7fe bff0 	b.w	d4968 <network_get_listen_timeout>

000d5988 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5988:	2200      	movs	r2, #0
   d598a:	6840      	ldr	r0, [r0, #4]
   d598c:	f7fe bfe4 	b.w	d4958 <network_set_listen_timeout>

000d5990 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5990:	2200      	movs	r2, #0
   d5992:	f081 0101 	eor.w	r1, r1, #1
   d5996:	6840      	ldr	r0, [r0, #4]
   d5998:	f7fe bfce 	b.w	d4938 <network_listen>

000d599c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d599c:	2300      	movs	r3, #0
   d599e:	461a      	mov	r2, r3
   d59a0:	2101      	movs	r1, #1
   d59a2:	6840      	ldr	r0, [r0, #4]
   d59a4:	f7fe bfc0 	b.w	d4928 <network_off>

000d59a8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d59a8:	2300      	movs	r3, #0
   d59aa:	461a      	mov	r2, r3
   d59ac:	4619      	mov	r1, r3
   d59ae:	6840      	ldr	r0, [r0, #4]
   d59b0:	f7fe bfb2 	b.w	d4918 <network_on>

000d59b4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59b4:	2200      	movs	r2, #0
   d59b6:	4611      	mov	r1, r2
   d59b8:	6840      	ldr	r0, [r0, #4]
   d59ba:	f7fe bfa5 	b.w	d4908 <network_ready>

000d59be <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59be:	2200      	movs	r2, #0
   d59c0:	4611      	mov	r1, r2
   d59c2:	6840      	ldr	r0, [r0, #4]
   d59c4:	f7fe bf90 	b.w	d48e8 <network_connecting>

000d59c8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59c8:	2200      	movs	r2, #0
   d59ca:	2102      	movs	r1, #2
   d59cc:	6840      	ldr	r0, [r0, #4]
   d59ce:	f7fe bf93 	b.w	d48f8 <network_disconnect>

000d59d2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59d2:	2300      	movs	r3, #0
   d59d4:	461a      	mov	r2, r3
   d59d6:	6840      	ldr	r0, [r0, #4]
   d59d8:	f7fe bf7e 	b.w	d48d8 <network_connect>

000d59dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d59dc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59de:	4605      	mov	r5, r0
   d59e0:	b188      	cbz	r0, d5a06 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59e2:	6804      	ldr	r4, [r0, #0]
   d59e4:	b14c      	cbz	r4, d59fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d59e6:	68a3      	ldr	r3, [r4, #8]
   d59e8:	b11b      	cbz	r3, d59f2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d59ea:	2203      	movs	r2, #3
   d59ec:	4621      	mov	r1, r4
   d59ee:	4620      	mov	r0, r4
   d59f0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59f2:	2110      	movs	r1, #16
   d59f4:	4620      	mov	r0, r4
   d59f6:	f000 f93a 	bl	d5c6e <_ZdlPvj>
   d59fa:	4628      	mov	r0, r5
   d59fc:	2114      	movs	r1, #20
      }
   d59fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a02:	f000 b934 	b.w	d5c6e <_ZdlPvj>
   d5a06:	bd38      	pop	{r3, r4, r5, pc}

000d5a08 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5a08:	b110      	cbz	r0, d5a10 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5a0a:	6803      	ldr	r3, [r0, #0]
   d5a0c:	685b      	ldr	r3, [r3, #4]
   d5a0e:	4718      	bx	r3
   d5a10:	4770      	bx	lr

000d5a12 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5a12:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a14:	6803      	ldr	r3, [r0, #0]
   d5a16:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5a18:	b1bb      	cbz	r3, d5a4a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5a1a:	6858      	ldr	r0, [r3, #4]
   d5a1c:	f7fe fe80 	bl	d4720 <os_thread_is_current>
   d5a20:	b978      	cbnz	r0, d5a42 <_ZN6ThreadD1Ev+0x30>
   d5a22:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5a24:	7c5a      	ldrb	r2, [r3, #17]
   d5a26:	b912      	cbnz	r2, d5a2e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5a28:	6858      	ldr	r0, [r3, #4]
   d5a2a:	f7fe fe81 	bl	d4730 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5a2e:	6823      	ldr	r3, [r4, #0]
   d5a30:	6858      	ldr	r0, [r3, #4]
   d5a32:	f7fe fe85 	bl	d4740 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a36:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a38:	2300      	movs	r3, #0
   d5a3a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a3c:	b128      	cbz	r0, d5a4a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5a3e:	f7ff ffcd 	bl	d59dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a42:	6820      	ldr	r0, [r4, #0]
   d5a44:	b108      	cbz	r0, d5a4a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5a46:	f7ff ffc9 	bl	d59dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	bd10      	pop	{r4, pc}
	...

000d5a50 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5a50:	b538      	push	{r3, r4, r5, lr}
   d5a52:	4b0c      	ldr	r3, [pc, #48]	; (d5a84 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5a54:	6003      	str	r3, [r0, #0]
   d5a56:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a58:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5a5c:	b108      	cbz	r0, d5a62 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5a5e:	f7fe fb1e 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a62:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5a66:	b135      	cbz	r5, d5a76 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a68:	4628      	mov	r0, r5
   d5a6a:	f7ff ffd2 	bl	d5a12 <_ZN6ThreadD1Ev>
   d5a6e:	2104      	movs	r1, #4
   d5a70:	4628      	mov	r0, r5
   d5a72:	f000 f8fc 	bl	d5c6e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a76:	68a0      	ldr	r0, [r4, #8]
   d5a78:	b108      	cbz	r0, d5a7e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5a7a:	f7ff ffc5 	bl	d5a08 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5a7e:	4620      	mov	r0, r4
   d5a80:	bd38      	pop	{r3, r4, r5, pc}
   d5a82:	bf00      	nop
   d5a84:	000d64a4 	.word	0x000d64a4

000d5a88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5a88:	b538      	push	{r3, r4, r5, lr}
   d5a8a:	4c0e      	ldr	r4, [pc, #56]	; (d5ac4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5a8c:	4b0e      	ldr	r3, [pc, #56]	; (d5ac8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5a8e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5a90:	2500      	movs	r5, #0
   d5a92:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5a94:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5a98:	6063      	str	r3, [r4, #4]
   d5a9a:	60a5      	str	r5, [r4, #8]
   d5a9c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5aa0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5aa4:	f7fe fe5c 	bl	d4760 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5aa8:	4b08      	ldr	r3, [pc, #32]	; (d5acc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5aaa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5aae:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5ab2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	4a06      	ldr	r2, [pc, #24]	; (d5ad0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5ab8:	4906      	ldr	r1, [pc, #24]	; (d5ad4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5abe:	f000 b8d1 	b.w	d5c64 <__aeabi_atexit>
   d5ac2:	bf00      	nop
   d5ac4:	2003e550 	.word	0x2003e550
   d5ac8:	000d64d8 	.word	0x000d64d8
   d5acc:	000d64a4 	.word	0x000d64a4
   d5ad0:	2003e28c 	.word	0x2003e28c
   d5ad4:	000d5a51 	.word	0x000d5a51

000d5ad8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5ad8:	2300      	movs	r3, #0
   d5ada:	461a      	mov	r2, r3
   d5adc:	6840      	ldr	r0, [r0, #4]
   d5ade:	f7fe befb 	b.w	d48d8 <network_connect>

000d5ae2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ae2:	2200      	movs	r2, #0
   d5ae4:	2102      	movs	r1, #2
   d5ae6:	6840      	ldr	r0, [r0, #4]
   d5ae8:	f7fe bf06 	b.w	d48f8 <network_disconnect>

000d5aec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5aec:	2200      	movs	r2, #0
   d5aee:	4611      	mov	r1, r2
   d5af0:	6840      	ldr	r0, [r0, #4]
   d5af2:	f7fe bef9 	b.w	d48e8 <network_connecting>

000d5af6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5af6:	2200      	movs	r2, #0
   d5af8:	4611      	mov	r1, r2
   d5afa:	6840      	ldr	r0, [r0, #4]
   d5afc:	f7fe bf04 	b.w	d4908 <network_ready>

000d5b00 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5b00:	2300      	movs	r3, #0
   d5b02:	461a      	mov	r2, r3
   d5b04:	4619      	mov	r1, r3
   d5b06:	6840      	ldr	r0, [r0, #4]
   d5b08:	f7fe bf06 	b.w	d4918 <network_on>

000d5b0c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5b0c:	2300      	movs	r3, #0
   d5b0e:	461a      	mov	r2, r3
   d5b10:	4619      	mov	r1, r3
   d5b12:	6840      	ldr	r0, [r0, #4]
   d5b14:	f7fe bf08 	b.w	d4928 <network_off>

000d5b18 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5b18:	2200      	movs	r2, #0
   d5b1a:	f081 0101 	eor.w	r1, r1, #1
   d5b1e:	6840      	ldr	r0, [r0, #4]
   d5b20:	f7fe bf0a 	b.w	d4938 <network_listen>

000d5b24 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5b24:	2200      	movs	r2, #0
   d5b26:	6840      	ldr	r0, [r0, #4]
   d5b28:	f7fe bf16 	b.w	d4958 <network_set_listen_timeout>

000d5b2c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5b2c:	2200      	movs	r2, #0
   d5b2e:	4611      	mov	r1, r2
   d5b30:	6840      	ldr	r0, [r0, #4]
   d5b32:	f7fe bf19 	b.w	d4968 <network_get_listen_timeout>

000d5b36 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5b36:	2200      	movs	r2, #0
   d5b38:	4611      	mov	r1, r2
   d5b3a:	6840      	ldr	r0, [r0, #4]
   d5b3c:	f7fe bf04 	b.w	d4948 <network_listening>

000d5b40 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b44:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b46:	b095      	sub	sp, #84	; 0x54
   d5b48:	4616      	mov	r6, r2
   d5b4a:	460d      	mov	r5, r1
   d5b4c:	4607      	mov	r7, r0
    IPAddress addr;
   d5b4e:	f7ff fd6b 	bl	d5628 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5b52:	4621      	mov	r1, r4
   d5b54:	2220      	movs	r2, #32
   d5b56:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b58:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5b5a:	f000 f9f2 	bl	d5f42 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5b5e:	2340      	movs	r3, #64	; 0x40
   d5b60:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5b62:	4621      	mov	r1, r4
   d5b64:	466b      	mov	r3, sp
   d5b66:	aa0c      	add	r2, sp, #48	; 0x30
   d5b68:	4630      	mov	r0, r6
   d5b6a:	f7fe fdb1 	bl	d46d0 <netdb_getaddrinfo>
    if (!r) {
   d5b6e:	4604      	mov	r4, r0
   d5b70:	2800      	cmp	r0, #0
   d5b72:	d144      	bne.n	d5bfe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b74:	4602      	mov	r2, r0
   d5b76:	2101      	movs	r1, #1
   d5b78:	6868      	ldr	r0, [r5, #4]
   d5b7a:	f7fe fec5 	bl	d4908 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b7e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b80:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b82:	4622      	mov	r2, r4
   d5b84:	6868      	ldr	r0, [r5, #4]
   d5b86:	f7fe febf 	bl	d4908 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b8a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b8c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5b8e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b90:	2e00      	cmp	r6, #0
   d5b92:	d034      	beq.n	d5bfe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5b94:	2900      	cmp	r1, #0
   d5b96:	d132      	bne.n	d5bfe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5b98:	6873      	ldr	r3, [r6, #4]
   d5b9a:	2b02      	cmp	r3, #2
   d5b9c:	d002      	beq.n	d5ba4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5b9e:	2b0a      	cmp	r3, #10
   d5ba0:	d009      	beq.n	d5bb6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5ba2:	e02a      	b.n	d5bfa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ba4:	f1b8 0f00 	cmp.w	r8, #0
   d5ba8:	d027      	beq.n	d5bfa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5baa:	6971      	ldr	r1, [r6, #20]
   d5bac:	4638      	mov	r0, r7
   d5bae:	3104      	adds	r1, #4
   d5bb0:	f7ff fd67 	bl	d5682 <_ZN9IPAddressaSEPKh>
   d5bb4:	e020      	b.n	d5bf8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5bb6:	f1b9 0f00 	cmp.w	r9, #0
   d5bba:	d01e      	beq.n	d5bfa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5bbc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5bbe:	2211      	movs	r2, #17
   d5bc0:	a801      	add	r0, sp, #4
   d5bc2:	f000 f9be 	bl	d5f42 <memset>
                    a.v = 6;
   d5bc6:	2306      	movs	r3, #6
   d5bc8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5bcc:	ad01      	add	r5, sp, #4
   d5bce:	f104 0308 	add.w	r3, r4, #8
   d5bd2:	3418      	adds	r4, #24
   d5bd4:	6818      	ldr	r0, [r3, #0]
   d5bd6:	6859      	ldr	r1, [r3, #4]
   d5bd8:	462a      	mov	r2, r5
   d5bda:	c203      	stmia	r2!, {r0, r1}
   d5bdc:	3308      	adds	r3, #8
   d5bde:	42a3      	cmp	r3, r4
   d5be0:	4615      	mov	r5, r2
   d5be2:	d1f7      	bne.n	d5bd4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5be4:	a901      	add	r1, sp, #4
   d5be6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5be8:	ad07      	add	r5, sp, #28
   d5bea:	f7ff fd2b 	bl	d5644 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5bf0:	1d3c      	adds	r4, r7, #4
   d5bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5bf4:	682b      	ldr	r3, [r5, #0]
   d5bf6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5bf8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5bfa:	69f6      	ldr	r6, [r6, #28]
   d5bfc:	e7c8      	b.n	d5b90 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5bfe:	9800      	ldr	r0, [sp, #0]
   d5c00:	f7fe fd5e 	bl	d46c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5c04:	4638      	mov	r0, r7
   d5c06:	b015      	add	sp, #84	; 0x54
   d5c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5c0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5c0c:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5c0e:	4a03      	ldr	r2, [pc, #12]	; (d5c1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5c10:	601a      	str	r2, [r3, #0]
   d5c12:	2200      	movs	r2, #0
   d5c14:	605a      	str	r2, [r3, #4]
   d5c16:	4770      	bx	lr
   d5c18:	2003e724 	.word	0x2003e724
   d5c1c:	000d64d8 	.word	0x000d64d8

000d5c20 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5c20:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5c22:	4c0c      	ldr	r4, [pc, #48]	; (d5c54 <_GLOBAL__sub_I_SPI+0x34>)
   d5c24:	4e0c      	ldr	r6, [pc, #48]	; (d5c58 <_GLOBAL__sub_I_SPI+0x38>)
   d5c26:	4d0d      	ldr	r5, [pc, #52]	; (d5c5c <_GLOBAL__sub_I_SPI+0x3c>)
   d5c28:	2100      	movs	r1, #0
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	f7fe ff42 	bl	d4ab4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c30:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5c32:	4c0b      	ldr	r4, [pc, #44]	; (d5c60 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5c34:	4632      	mov	r2, r6
   d5c36:	4629      	mov	r1, r5
   d5c38:	f000 f814 	bl	d5c64 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5c3c:	2101      	movs	r1, #1
   d5c3e:	4620      	mov	r0, r4
   d5c40:	f7fe ff38 	bl	d4ab4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5c44:	4632      	mov	r2, r6
   d5c46:	4629      	mov	r1, r5
   d5c48:	4620      	mov	r0, r4
   d5c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5c4e:	f000 b809 	b.w	d5c64 <__aeabi_atexit>
   d5c52:	bf00      	nop
   d5c54:	2003e72c 	.word	0x2003e72c
   d5c58:	2003e28c 	.word	0x2003e28c
   d5c5c:	000d4aa5 	.word	0x000d4aa5
   d5c60:	2003e73c 	.word	0x2003e73c

000d5c64 <__aeabi_atexit>:
   d5c64:	460b      	mov	r3, r1
   d5c66:	4601      	mov	r1, r0
   d5c68:	4618      	mov	r0, r3
   d5c6a:	f000 b951 	b.w	d5f10 <__cxa_atexit>

000d5c6e <_ZdlPvj>:
   d5c6e:	f7fe ba14 	b.w	d409a <_ZdlPv>

000d5c72 <_ZSt25__throw_bad_function_callv>:
   d5c72:	b508      	push	{r3, lr}
   d5c74:	f7fe fec8 	bl	d4a08 <abort>

000d5c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c78:	4b18      	ldr	r3, [pc, #96]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d1      	lsls	r1, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b16      	ldr	r3, [pc, #88]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d2      	lsls	r2, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b14      	ldr	r3, [pc, #80]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d0      	lsls	r0, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4b12      	ldr	r3, [pc, #72]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d1      	lsls	r1, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4b10      	ldr	r3, [pc, #64]	; (d5cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5caa:	681a      	ldr	r2, [r3, #0]
   d5cac:	07d2      	lsls	r2, r2, #31
   d5cae:	bf5c      	itt	pl
   d5cb0:	2201      	movpl	r2, #1
   d5cb2:	601a      	strpl	r2, [r3, #0]
   d5cb4:	4b0e      	ldr	r3, [pc, #56]	; (d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5cb6:	681a      	ldr	r2, [r3, #0]
   d5cb8:	07d0      	lsls	r0, r2, #31
   d5cba:	bf5c      	itt	pl
   d5cbc:	2201      	movpl	r2, #1
   d5cbe:	601a      	strpl	r2, [r3, #0]
   d5cc0:	4b0c      	ldr	r3, [pc, #48]	; (d5cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5cc2:	681a      	ldr	r2, [r3, #0]
   d5cc4:	07d1      	lsls	r1, r2, #31
   d5cc6:	bf5c      	itt	pl
   d5cc8:	2201      	movpl	r2, #1
   d5cca:	601a      	strpl	r2, [r3, #0]
   d5ccc:	4b0a      	ldr	r3, [pc, #40]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5cce:	681a      	ldr	r2, [r3, #0]
   d5cd0:	07d2      	lsls	r2, r2, #31
   d5cd2:	bf5c      	itt	pl
   d5cd4:	2201      	movpl	r2, #1
   d5cd6:	601a      	strpl	r2, [r3, #0]
   d5cd8:	4770      	bx	lr
   d5cda:	bf00      	nop
   d5cdc:	2003e76c 	.word	0x2003e76c
   d5ce0:	2003e768 	.word	0x2003e768
   d5ce4:	2003e764 	.word	0x2003e764
   d5ce8:	2003e760 	.word	0x2003e760
   d5cec:	2003e75c 	.word	0x2003e75c
   d5cf0:	2003e758 	.word	0x2003e758
   d5cf4:	2003e754 	.word	0x2003e754
   d5cf8:	2003e750 	.word	0x2003e750

000d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5cfc:	4b24      	ldr	r3, [pc, #144]	; (d5d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5cfe:	681a      	ldr	r2, [r3, #0]
   d5d00:	07d0      	lsls	r0, r2, #31
   d5d02:	bf5c      	itt	pl
   d5d04:	2201      	movpl	r2, #1
   d5d06:	601a      	strpl	r2, [r3, #0]
   d5d08:	4b22      	ldr	r3, [pc, #136]	; (d5d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5d0a:	681a      	ldr	r2, [r3, #0]
   d5d0c:	07d1      	lsls	r1, r2, #31
   d5d0e:	bf5c      	itt	pl
   d5d10:	2201      	movpl	r2, #1
   d5d12:	601a      	strpl	r2, [r3, #0]
   d5d14:	4b20      	ldr	r3, [pc, #128]	; (d5d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d2      	lsls	r2, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4b1e      	ldr	r3, [pc, #120]	; (d5d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d0      	lsls	r0, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4b1c      	ldr	r3, [pc, #112]	; (d5da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5d2e:	681a      	ldr	r2, [r3, #0]
   d5d30:	07d1      	lsls	r1, r2, #31
   d5d32:	bf5c      	itt	pl
   d5d34:	2201      	movpl	r2, #1
   d5d36:	601a      	strpl	r2, [r3, #0]
   d5d38:	4b1a      	ldr	r3, [pc, #104]	; (d5da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5d3a:	681a      	ldr	r2, [r3, #0]
   d5d3c:	07d2      	lsls	r2, r2, #31
   d5d3e:	bf5c      	itt	pl
   d5d40:	2201      	movpl	r2, #1
   d5d42:	601a      	strpl	r2, [r3, #0]
   d5d44:	4b18      	ldr	r3, [pc, #96]	; (d5da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d0      	lsls	r0, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b16      	ldr	r3, [pc, #88]	; (d5dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d1      	lsls	r1, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b14      	ldr	r3, [pc, #80]	; (d5db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d2      	lsls	r2, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b12      	ldr	r3, [pc, #72]	; (d5db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d0      	lsls	r0, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4b10      	ldr	r3, [pc, #64]	; (d5db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d1      	lsls	r1, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4b0e      	ldr	r3, [pc, #56]	; (d5dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5d82:	681a      	ldr	r2, [r3, #0]
   d5d84:	07d2      	lsls	r2, r2, #31
   d5d86:	bf5c      	itt	pl
   d5d88:	2201      	movpl	r2, #1
   d5d8a:	601a      	strpl	r2, [r3, #0]
   d5d8c:	4770      	bx	lr
   d5d8e:	bf00      	nop
   d5d90:	2003e79c 	.word	0x2003e79c
   d5d94:	2003e798 	.word	0x2003e798
   d5d98:	2003e794 	.word	0x2003e794
   d5d9c:	2003e790 	.word	0x2003e790
   d5da0:	2003e78c 	.word	0x2003e78c
   d5da4:	2003e788 	.word	0x2003e788
   d5da8:	2003e784 	.word	0x2003e784
   d5dac:	2003e780 	.word	0x2003e780
   d5db0:	2003e77c 	.word	0x2003e77c
   d5db4:	2003e778 	.word	0x2003e778
   d5db8:	2003e774 	.word	0x2003e774
   d5dbc:	2003e770 	.word	0x2003e770

000d5dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5dc0:	4b24      	ldr	r3, [pc, #144]	; (d5e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5dc2:	681a      	ldr	r2, [r3, #0]
   d5dc4:	07d0      	lsls	r0, r2, #31
   d5dc6:	bf5c      	itt	pl
   d5dc8:	2201      	movpl	r2, #1
   d5dca:	601a      	strpl	r2, [r3, #0]
   d5dcc:	4b22      	ldr	r3, [pc, #136]	; (d5e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5dce:	681a      	ldr	r2, [r3, #0]
   d5dd0:	07d1      	lsls	r1, r2, #31
   d5dd2:	bf5c      	itt	pl
   d5dd4:	2201      	movpl	r2, #1
   d5dd6:	601a      	strpl	r2, [r3, #0]
   d5dd8:	4b20      	ldr	r3, [pc, #128]	; (d5e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5dda:	681a      	ldr	r2, [r3, #0]
   d5ddc:	07d2      	lsls	r2, r2, #31
   d5dde:	bf5c      	itt	pl
   d5de0:	2201      	movpl	r2, #1
   d5de2:	601a      	strpl	r2, [r3, #0]
   d5de4:	4b1e      	ldr	r3, [pc, #120]	; (d5e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5de6:	681a      	ldr	r2, [r3, #0]
   d5de8:	07d0      	lsls	r0, r2, #31
   d5dea:	bf5c      	itt	pl
   d5dec:	2201      	movpl	r2, #1
   d5dee:	601a      	strpl	r2, [r3, #0]
   d5df0:	4b1c      	ldr	r3, [pc, #112]	; (d5e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5df2:	681a      	ldr	r2, [r3, #0]
   d5df4:	07d1      	lsls	r1, r2, #31
   d5df6:	bf5c      	itt	pl
   d5df8:	2201      	movpl	r2, #1
   d5dfa:	601a      	strpl	r2, [r3, #0]
   d5dfc:	4b1a      	ldr	r3, [pc, #104]	; (d5e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5dfe:	681a      	ldr	r2, [r3, #0]
   d5e00:	07d2      	lsls	r2, r2, #31
   d5e02:	bf5c      	itt	pl
   d5e04:	2201      	movpl	r2, #1
   d5e06:	601a      	strpl	r2, [r3, #0]
   d5e08:	4b18      	ldr	r3, [pc, #96]	; (d5e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5e0a:	681a      	ldr	r2, [r3, #0]
   d5e0c:	07d0      	lsls	r0, r2, #31
   d5e0e:	bf5c      	itt	pl
   d5e10:	2201      	movpl	r2, #1
   d5e12:	601a      	strpl	r2, [r3, #0]
   d5e14:	4b16      	ldr	r3, [pc, #88]	; (d5e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5e16:	681a      	ldr	r2, [r3, #0]
   d5e18:	07d1      	lsls	r1, r2, #31
   d5e1a:	bf5c      	itt	pl
   d5e1c:	2201      	movpl	r2, #1
   d5e1e:	601a      	strpl	r2, [r3, #0]
   d5e20:	4b14      	ldr	r3, [pc, #80]	; (d5e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5e22:	681a      	ldr	r2, [r3, #0]
   d5e24:	07d2      	lsls	r2, r2, #31
   d5e26:	bf5c      	itt	pl
   d5e28:	2201      	movpl	r2, #1
   d5e2a:	601a      	strpl	r2, [r3, #0]
   d5e2c:	4b12      	ldr	r3, [pc, #72]	; (d5e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5e2e:	681a      	ldr	r2, [r3, #0]
   d5e30:	07d0      	lsls	r0, r2, #31
   d5e32:	bf5c      	itt	pl
   d5e34:	2201      	movpl	r2, #1
   d5e36:	601a      	strpl	r2, [r3, #0]
   d5e38:	4b10      	ldr	r3, [pc, #64]	; (d5e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5e3a:	681a      	ldr	r2, [r3, #0]
   d5e3c:	07d1      	lsls	r1, r2, #31
   d5e3e:	bf5c      	itt	pl
   d5e40:	2201      	movpl	r2, #1
   d5e42:	601a      	strpl	r2, [r3, #0]
   d5e44:	4b0e      	ldr	r3, [pc, #56]	; (d5e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5e46:	681a      	ldr	r2, [r3, #0]
   d5e48:	07d2      	lsls	r2, r2, #31
   d5e4a:	bf5c      	itt	pl
   d5e4c:	2201      	movpl	r2, #1
   d5e4e:	601a      	strpl	r2, [r3, #0]
   d5e50:	4770      	bx	lr
   d5e52:	bf00      	nop
   d5e54:	2003e7cc 	.word	0x2003e7cc
   d5e58:	2003e7c8 	.word	0x2003e7c8
   d5e5c:	2003e7c4 	.word	0x2003e7c4
   d5e60:	2003e7c0 	.word	0x2003e7c0
   d5e64:	2003e7bc 	.word	0x2003e7bc
   d5e68:	2003e7b8 	.word	0x2003e7b8
   d5e6c:	2003e7b4 	.word	0x2003e7b4
   d5e70:	2003e7b0 	.word	0x2003e7b0
   d5e74:	2003e7ac 	.word	0x2003e7ac
   d5e78:	2003e7a8 	.word	0x2003e7a8
   d5e7c:	2003e7a4 	.word	0x2003e7a4
   d5e80:	2003e7a0 	.word	0x2003e7a0

000d5e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e84:	4b18      	ldr	r3, [pc, #96]	; (d5ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e86:	681a      	ldr	r2, [r3, #0]
   d5e88:	07d1      	lsls	r1, r2, #31
   d5e8a:	bf5c      	itt	pl
   d5e8c:	2201      	movpl	r2, #1
   d5e8e:	601a      	strpl	r2, [r3, #0]
   d5e90:	4b16      	ldr	r3, [pc, #88]	; (d5eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e92:	681a      	ldr	r2, [r3, #0]
   d5e94:	07d2      	lsls	r2, r2, #31
   d5e96:	bf5c      	itt	pl
   d5e98:	2201      	movpl	r2, #1
   d5e9a:	601a      	strpl	r2, [r3, #0]
   d5e9c:	4b14      	ldr	r3, [pc, #80]	; (d5ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e9e:	681a      	ldr	r2, [r3, #0]
   d5ea0:	07d0      	lsls	r0, r2, #31
   d5ea2:	bf5c      	itt	pl
   d5ea4:	2201      	movpl	r2, #1
   d5ea6:	601a      	strpl	r2, [r3, #0]
   d5ea8:	4b12      	ldr	r3, [pc, #72]	; (d5ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5eaa:	681a      	ldr	r2, [r3, #0]
   d5eac:	07d1      	lsls	r1, r2, #31
   d5eae:	bf5c      	itt	pl
   d5eb0:	2201      	movpl	r2, #1
   d5eb2:	601a      	strpl	r2, [r3, #0]
   d5eb4:	4b10      	ldr	r3, [pc, #64]	; (d5ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5eb6:	681a      	ldr	r2, [r3, #0]
   d5eb8:	07d2      	lsls	r2, r2, #31
   d5eba:	bf5c      	itt	pl
   d5ebc:	2201      	movpl	r2, #1
   d5ebe:	601a      	strpl	r2, [r3, #0]
   d5ec0:	4b0e      	ldr	r3, [pc, #56]	; (d5efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ec2:	681a      	ldr	r2, [r3, #0]
   d5ec4:	07d0      	lsls	r0, r2, #31
   d5ec6:	bf5c      	itt	pl
   d5ec8:	2201      	movpl	r2, #1
   d5eca:	601a      	strpl	r2, [r3, #0]
   d5ecc:	4b0c      	ldr	r3, [pc, #48]	; (d5f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ece:	681a      	ldr	r2, [r3, #0]
   d5ed0:	07d1      	lsls	r1, r2, #31
   d5ed2:	bf5c      	itt	pl
   d5ed4:	2201      	movpl	r2, #1
   d5ed6:	601a      	strpl	r2, [r3, #0]
   d5ed8:	4b0a      	ldr	r3, [pc, #40]	; (d5f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5eda:	681a      	ldr	r2, [r3, #0]
   d5edc:	07d2      	lsls	r2, r2, #31
   d5ede:	bf5c      	itt	pl
   d5ee0:	2201      	movpl	r2, #1
   d5ee2:	601a      	strpl	r2, [r3, #0]
   d5ee4:	4770      	bx	lr
   d5ee6:	bf00      	nop
   d5ee8:	2003e7ec 	.word	0x2003e7ec
   d5eec:	2003e7e8 	.word	0x2003e7e8
   d5ef0:	2003e7e4 	.word	0x2003e7e4
   d5ef4:	2003e7e0 	.word	0x2003e7e0
   d5ef8:	2003e7dc 	.word	0x2003e7dc
   d5efc:	2003e7d8 	.word	0x2003e7d8
   d5f00:	2003e7d4 	.word	0x2003e7d4
   d5f04:	2003e7d0 	.word	0x2003e7d0

000d5f08 <atol>:
   d5f08:	220a      	movs	r2, #10
   d5f0a:	2100      	movs	r1, #0
   d5f0c:	f000 b906 	b.w	d611c <strtol>

000d5f10 <__cxa_atexit>:
   d5f10:	b510      	push	{r4, lr}
   d5f12:	4c05      	ldr	r4, [pc, #20]	; (d5f28 <__cxa_atexit+0x18>)
   d5f14:	4613      	mov	r3, r2
   d5f16:	b12c      	cbz	r4, d5f24 <__cxa_atexit+0x14>
   d5f18:	460a      	mov	r2, r1
   d5f1a:	4601      	mov	r1, r0
   d5f1c:	2002      	movs	r0, #2
   d5f1e:	f3af 8000 	nop.w
   d5f22:	bd10      	pop	{r4, pc}
   d5f24:	4620      	mov	r0, r4
   d5f26:	bd10      	pop	{r4, pc}
   d5f28:	00000000 	.word	0x00000000

000d5f2c <memcpy>:
   d5f2c:	b510      	push	{r4, lr}
   d5f2e:	1e43      	subs	r3, r0, #1
   d5f30:	440a      	add	r2, r1
   d5f32:	4291      	cmp	r1, r2
   d5f34:	d004      	beq.n	d5f40 <memcpy+0x14>
   d5f36:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5f3e:	e7f8      	b.n	d5f32 <memcpy+0x6>
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <memset>:
   d5f42:	4402      	add	r2, r0
   d5f44:	4603      	mov	r3, r0
   d5f46:	4293      	cmp	r3, r2
   d5f48:	d002      	beq.n	d5f50 <memset+0xe>
   d5f4a:	f803 1b01 	strb.w	r1, [r3], #1
   d5f4e:	e7fa      	b.n	d5f46 <memset+0x4>
   d5f50:	4770      	bx	lr
	...

000d5f54 <srand>:
   d5f54:	b538      	push	{r3, r4, r5, lr}
   d5f56:	4b12      	ldr	r3, [pc, #72]	; (d5fa0 <srand+0x4c>)
   d5f58:	681c      	ldr	r4, [r3, #0]
   d5f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5f5c:	4605      	mov	r5, r0
   d5f5e:	b9d3      	cbnz	r3, d5f96 <srand+0x42>
   d5f60:	2018      	movs	r0, #24
   d5f62:	f7fe fd39 	bl	d49d8 <malloc>
   d5f66:	f243 330e 	movw	r3, #13070	; 0x330e
   d5f6a:	63a0      	str	r0, [r4, #56]	; 0x38
   d5f6c:	8003      	strh	r3, [r0, #0]
   d5f6e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5f72:	8043      	strh	r3, [r0, #2]
   d5f74:	f241 2334 	movw	r3, #4660	; 0x1234
   d5f78:	8083      	strh	r3, [r0, #4]
   d5f7a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5f7e:	80c3      	strh	r3, [r0, #6]
   d5f80:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5f84:	8103      	strh	r3, [r0, #8]
   d5f86:	2305      	movs	r3, #5
   d5f88:	8143      	strh	r3, [r0, #10]
   d5f8a:	230b      	movs	r3, #11
   d5f8c:	8183      	strh	r3, [r0, #12]
   d5f8e:	2201      	movs	r2, #1
   d5f90:	2300      	movs	r3, #0
   d5f92:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5f96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5f98:	2200      	movs	r2, #0
   d5f9a:	611d      	str	r5, [r3, #16]
   d5f9c:	615a      	str	r2, [r3, #20]
   d5f9e:	bd38      	pop	{r3, r4, r5, pc}
   d5fa0:	2003e288 	.word	0x2003e288

000d5fa4 <strcmp>:
   d5fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5fac:	2a01      	cmp	r2, #1
   d5fae:	bf28      	it	cs
   d5fb0:	429a      	cmpcs	r2, r3
   d5fb2:	d0f7      	beq.n	d5fa4 <strcmp>
   d5fb4:	1ad0      	subs	r0, r2, r3
   d5fb6:	4770      	bx	lr

000d5fb8 <strcpy>:
   d5fb8:	4603      	mov	r3, r0
   d5fba:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5fbe:	f803 2b01 	strb.w	r2, [r3], #1
   d5fc2:	2a00      	cmp	r2, #0
   d5fc4:	d1f9      	bne.n	d5fba <strcpy+0x2>
   d5fc6:	4770      	bx	lr

000d5fc8 <strdup>:
   d5fc8:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <strdup+0xc>)
   d5fca:	4601      	mov	r1, r0
   d5fcc:	6818      	ldr	r0, [r3, #0]
   d5fce:	f000 b803 	b.w	d5fd8 <_strdup_r>
   d5fd2:	bf00      	nop
   d5fd4:	2003e288 	.word	0x2003e288

000d5fd8 <_strdup_r>:
   d5fd8:	b570      	push	{r4, r5, r6, lr}
   d5fda:	4606      	mov	r6, r0
   d5fdc:	4608      	mov	r0, r1
   d5fde:	460c      	mov	r4, r1
   d5fe0:	f000 f80d 	bl	d5ffe <strlen>
   d5fe4:	1c45      	adds	r5, r0, #1
   d5fe6:	4629      	mov	r1, r5
   d5fe8:	4630      	mov	r0, r6
   d5fea:	f7fe fd15 	bl	d4a18 <_malloc_r>
   d5fee:	4606      	mov	r6, r0
   d5ff0:	b118      	cbz	r0, d5ffa <_strdup_r+0x22>
   d5ff2:	462a      	mov	r2, r5
   d5ff4:	4621      	mov	r1, r4
   d5ff6:	f7ff ff99 	bl	d5f2c <memcpy>
   d5ffa:	4630      	mov	r0, r6
   d5ffc:	bd70      	pop	{r4, r5, r6, pc}

000d5ffe <strlen>:
   d5ffe:	4603      	mov	r3, r0
   d6000:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6004:	2a00      	cmp	r2, #0
   d6006:	d1fb      	bne.n	d6000 <strlen+0x2>
   d6008:	1a18      	subs	r0, r3, r0
   d600a:	3801      	subs	r0, #1
   d600c:	4770      	bx	lr
	...

000d6010 <_strtol_r>:
   d6010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6014:	4680      	mov	r8, r0
   d6016:	4840      	ldr	r0, [pc, #256]	; (d6118 <_strtol_r+0x108>)
   d6018:	f8d0 9000 	ldr.w	r9, [r0]
   d601c:	460f      	mov	r7, r1
   d601e:	463d      	mov	r5, r7
   d6020:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6024:	eb09 0004 	add.w	r0, r9, r4
   d6028:	7840      	ldrb	r0, [r0, #1]
   d602a:	f000 0008 	and.w	r0, r0, #8
   d602e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d6032:	b108      	cbz	r0, d6038 <_strtol_r+0x28>
   d6034:	462f      	mov	r7, r5
   d6036:	e7f2      	b.n	d601e <_strtol_r+0xe>
   d6038:	2c2d      	cmp	r4, #45	; 0x2d
   d603a:	d103      	bne.n	d6044 <_strtol_r+0x34>
   d603c:	1cbd      	adds	r5, r7, #2
   d603e:	787c      	ldrb	r4, [r7, #1]
   d6040:	2601      	movs	r6, #1
   d6042:	e003      	b.n	d604c <_strtol_r+0x3c>
   d6044:	2c2b      	cmp	r4, #43	; 0x2b
   d6046:	bf04      	itt	eq
   d6048:	787c      	ldrbeq	r4, [r7, #1]
   d604a:	1cbd      	addeq	r5, r7, #2
   d604c:	b113      	cbz	r3, d6054 <_strtol_r+0x44>
   d604e:	2b10      	cmp	r3, #16
   d6050:	d10a      	bne.n	d6068 <_strtol_r+0x58>
   d6052:	e05b      	b.n	d610c <_strtol_r+0xfc>
   d6054:	2c30      	cmp	r4, #48	; 0x30
   d6056:	d157      	bne.n	d6108 <_strtol_r+0xf8>
   d6058:	7828      	ldrb	r0, [r5, #0]
   d605a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d605e:	2858      	cmp	r0, #88	; 0x58
   d6060:	d14d      	bne.n	d60fe <_strtol_r+0xee>
   d6062:	786c      	ldrb	r4, [r5, #1]
   d6064:	2310      	movs	r3, #16
   d6066:	3502      	adds	r5, #2
   d6068:	2e00      	cmp	r6, #0
   d606a:	bf14      	ite	ne
   d606c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d6070:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d6074:	2700      	movs	r7, #0
   d6076:	fbbc faf3 	udiv	sl, ip, r3
   d607a:	4638      	mov	r0, r7
   d607c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d6080:	eb09 0e04 	add.w	lr, r9, r4
   d6084:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6088:	f01e 0f04 	tst.w	lr, #4
   d608c:	d001      	beq.n	d6092 <_strtol_r+0x82>
   d608e:	3c30      	subs	r4, #48	; 0x30
   d6090:	e00b      	b.n	d60aa <_strtol_r+0x9a>
   d6092:	f01e 0e03 	ands.w	lr, lr, #3
   d6096:	d01b      	beq.n	d60d0 <_strtol_r+0xc0>
   d6098:	f1be 0f01 	cmp.w	lr, #1
   d609c:	bf0c      	ite	eq
   d609e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d60a2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d60a6:	ebce 0404 	rsb	r4, lr, r4
   d60aa:	42a3      	cmp	r3, r4
   d60ac:	dd10      	ble.n	d60d0 <_strtol_r+0xc0>
   d60ae:	f1b7 3fff 	cmp.w	r7, #4294967295
   d60b2:	d00a      	beq.n	d60ca <_strtol_r+0xba>
   d60b4:	4550      	cmp	r0, sl
   d60b6:	d806      	bhi.n	d60c6 <_strtol_r+0xb6>
   d60b8:	d101      	bne.n	d60be <_strtol_r+0xae>
   d60ba:	4564      	cmp	r4, ip
   d60bc:	dc03      	bgt.n	d60c6 <_strtol_r+0xb6>
   d60be:	fb03 4000 	mla	r0, r3, r0, r4
   d60c2:	2701      	movs	r7, #1
   d60c4:	e001      	b.n	d60ca <_strtol_r+0xba>
   d60c6:	f04f 37ff 	mov.w	r7, #4294967295
   d60ca:	f815 4b01 	ldrb.w	r4, [r5], #1
   d60ce:	e7d7      	b.n	d6080 <_strtol_r+0x70>
   d60d0:	1c7b      	adds	r3, r7, #1
   d60d2:	d10c      	bne.n	d60ee <_strtol_r+0xde>
   d60d4:	2e00      	cmp	r6, #0
   d60d6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d60da:	bf14      	ite	ne
   d60dc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d60e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d60e4:	f8c8 3000 	str.w	r3, [r8]
   d60e8:	b92a      	cbnz	r2, d60f6 <_strtol_r+0xe6>
   d60ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d60ee:	b106      	cbz	r6, d60f2 <_strtol_r+0xe2>
   d60f0:	4240      	negs	r0, r0
   d60f2:	b172      	cbz	r2, d6112 <_strtol_r+0x102>
   d60f4:	b107      	cbz	r7, d60f8 <_strtol_r+0xe8>
   d60f6:	1e69      	subs	r1, r5, #1
   d60f8:	6011      	str	r1, [r2, #0]
   d60fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d60fe:	2430      	movs	r4, #48	; 0x30
   d6100:	2b00      	cmp	r3, #0
   d6102:	d1b1      	bne.n	d6068 <_strtol_r+0x58>
   d6104:	2308      	movs	r3, #8
   d6106:	e7af      	b.n	d6068 <_strtol_r+0x58>
   d6108:	230a      	movs	r3, #10
   d610a:	e7ad      	b.n	d6068 <_strtol_r+0x58>
   d610c:	2c30      	cmp	r4, #48	; 0x30
   d610e:	d0a3      	beq.n	d6058 <_strtol_r+0x48>
   d6110:	e7aa      	b.n	d6068 <_strtol_r+0x58>
   d6112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6116:	bf00      	nop
   d6118:	2003e224 	.word	0x2003e224

000d611c <strtol>:
   d611c:	4613      	mov	r3, r2
   d611e:	460a      	mov	r2, r1
   d6120:	4601      	mov	r1, r0
   d6122:	4802      	ldr	r0, [pc, #8]	; (d612c <strtol+0x10>)
   d6124:	6800      	ldr	r0, [r0, #0]
   d6126:	f7ff bf73 	b.w	d6010 <_strtol_r>
   d612a:	bf00      	nop
   d612c:	2003e288 	.word	0x2003e288

000d6130 <dynalib_user>:
   d6130:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d6140:	00000000 7774002a 6f696c69 736d735f     ....*.twilio_sms
   d6150:	6c6f7600 65676174 74616200 79726574     .voltage.battery
   d6160:	73706700 0074614c 4c737067 00676e6f     .gpsLat.gpsLong.
   d6170:	53737067 56737461 61007369 7469746c     gpsSatsVis.altit
   d6180:	00656475 6c6c6f72 74697000 79006863     ude.roll.pitch.y
   d6190:	6d007761 69737369 75436e6f 6e657272     aw.missionCurren
   d61a0:	69610074 65707372 68006465 69646165     t.airspeed.headi
   d61b0:	6900676e 536f666e 7300534d 65746174     ng.infoSMS.state
   d61c0:	00534d53 4d746567 696c7661 20006b6e     SMS.getMavlink. 
   d61d0:	5600202d 61746c6f 000a6567 74746142     - .Voltage..Batt
   d61e0:	0a797265 74614c00 64757469 4c000a65     ery..Latitude..L
   d61f0:	69676e6f 65647574 6153000a 6c6c6574     ongitude..Satell
   d6200:	73657469 73695620 656c6269 6c41000a     ites Visible..Al
   d6210:	75746974 000a6564 6c6c6f52 6950000a     titude..Roll..Pi
   d6220:	0a686374 77615900 694d000a 6f697373     tch..Yaw..Missio
   d6230:	7543206e 6e657272 65532074 6e657571     n Current Sequen
   d6240:	000a6563 73726941 64656570 6548000a     ce..Airspeed..He
   d6250:	6e696461 20000a67 6c41202d 7954006c     ading.. - All.Ty
   d6260:	6f206570 6f20656e 68742066 6f632065     pe one of the co
   d6270:	70736572 69646e6f 6e20676e 65626d75     responding numbe
   d6280:	0a2e7372 00000000                       rs......

000d6288 <_ZTVN5spark13EthernetClassE>:
	...
   d6290:	000d4a87 000d4a7d 000d4a73 000d4a69     .J..}J..sJ..iJ..
   d62a0:	000d4a5d 000d4a51 000d4a45 000d4a3d     ]J..QJ..EJ..=J..
   d62b0:	000d4a33 000d4a29 000d5b41              3J..)J..A[..

000d62bc <_ZTV8SPIClass>:
	...
   d62c4:	000d4aa5 000d4aa7 64756162 72655300     .J...J..baud.Ser
   d62d4:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d62e4:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d62f4:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d6304:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d6314:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d6324:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d6334:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d6344:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d6354:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d6364:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d6374:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d6384:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d6394:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d63a4:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d63b4:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d63c4:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d63d4:	00000065                                e...

000d63d8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d63e0:	000d4fd5 000d4fdb 000d501f 000d4fe9     .O...O...P...O..
   d63f0:	000d4fd7                                .O..

000d63f4 <_ZTV9IPAddress>:
	...
   d63fc:	000d55c5 000d55b5 000d55b7              .U...U...U..

000d6408 <_ZTV9USBSerial>:
	...
   d6410:	000d569d 000d56ed 000d56fb 000d4da1     .V...V...V...M..
   d6420:	000d56d9 000d569f 000d56b5 000d56e7     .V...V...V...V..
   d6430:	000d56cb 000d5699                       .V...V..

000d6438 <_ZTVN5spark13CellularClassE>:
	...
   d6440:	000d5807 000d57fd 000d57f3 000d57a9     .X...W...W...W..
   d6450:	000d57e7 000d57db 000d57cf 000d57c7     .W...W...W...W..
   d6460:	000d57bd 000d57b3 000d5b41              .W...W..A[..

000d646c <_ZTV11USARTSerial>:
	...
   d6474:	000d5841 000d5891 000d589f 000d4da1     AX...X...X...M..
   d6484:	000d5855 000d5877 000d5863 000d588b     UX..wX..cX...X..
   d6494:	000d5843 000d5847                       CX..GX..

000d649c <_ZTVN5spark9MeshClassE>:
	...
   d64a4:	000d59d3 000d59c9 000d59bf 000d59b5     .Y...Y...Y...Y..
   d64b4:	000d59a9 000d599d 000d5991 000d5989     .Y...Y...Y...Y..
   d64c4:	000d597f 000d5975 000d5b41              .Y..uY..A[..

000d64d0 <_ZTVN5spark12NetworkClassE>:
	...
   d64d8:	000d5ad9 000d5ae3 000d5aed 000d5af7     .Z...Z...Z...Z..
   d64e8:	000d5b01 000d5b0d 000d5b19 000d5b25     .[...[...[..%[..
   d64f8:	000d5b2d 000d5b37 000d5b41              -[..7[..A[..

000d6504 <_ctype_>:
   d6504:	20202000 20202020 28282020 20282828     .         ((((( 
   d6514:	20202020 20202020 20202020 20202020                     
   d6524:	10108820 10101010 10101010 10101010      ...............
   d6534:	04040410 04040404 10040404 10101010     ................
   d6544:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6554:	01010101 01010101 01010101 10101010     ................
   d6564:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6574:	02020202 02020202 02020202 10101010     ................
   d6584:	00000020 00000000 00000000 00000000      ...............
	...

000d6608 <__sf_fake_stdin>:
	...

000d6628 <__sf_fake_stdout>:
	...

000d6648 <__sf_fake_stderr>:
	...
   d6668:	00000043                                         C.

000d666a <link_const_variable_data_end>:
	...

000d666c <link_constructors_location>:
   d666c:	000d4545 	.word	0x000d4545
   d6670:	000d4a91 	.word	0x000d4a91
   d6674:	000d4add 	.word	0x000d4add
   d6678:	000d4d91 	.word	0x000d4d91
   d667c:	000d4e7d 	.word	0x000d4e7d
   d6680:	000d4e8d 	.word	0x000d4e8d
   d6684:	000d4ee5 	.word	0x000d4ee5
   d6688:	000d5811 	.word	0x000d5811
   d668c:	000d5a89 	.word	0x000d5a89
   d6690:	000d5c0d 	.word	0x000d5c0d
   d6694:	000d5c21 	.word	0x000d5c21
   d6698:	000d5c79 	.word	0x000d5c79
   d669c:	000d5cfd 	.word	0x000d5cfd
   d66a0:	000d5dc1 	.word	0x000d5dc1
   d66a4:	000d5e85 	.word	0x000d5e85

000d66a8 <link_constructors_end>:
	...
