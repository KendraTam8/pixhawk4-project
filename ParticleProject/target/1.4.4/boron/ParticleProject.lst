
c:/Users/kendr/OneDrive/Documents/GitHub/Particle/ParticleProject/target/1.4.4/boron/ParticleProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000015f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000156a8  2**0
                  CONTENTS
  4 .data         0000006c  2003e31c  000d5610  0000e31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000468  2003e388  2003e388  0001e388  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d567c  000d567c  0001567c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d56a4  000d56a4  000156a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b2013  00000000  00000000  000156a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000de33  00000000  00000000  000c76bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b036  00000000  00000000  000d54ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002110  00000000  00000000  000f0524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f40  00000000  00000000  000f2634  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030665  00000000  00000000  000f6574  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000216c4  00000000  00000000  00126bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fb9bd  00000000  00000000  0014829d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c210  00000000  00000000  00243c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f90d 	bl	d524c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f912 	bl	d5262 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e31c 	.word	0x2003e31c
   d4048:	000d5610 	.word	0x000d5610
   d404c:	2003e388 	.word	0x2003e388
   d4050:	2003e388 	.word	0x2003e388
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fc3b 	bl	d48d4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5604 	.word	0x000d5604
   d4080:	000d55c8 	.word	0x000d55c8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f841 	bl	d4110 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bbed 	b.w	d4870 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba11 	b.w	d44bc <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba0f 	b.w	d44bc <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40ae:	6810      	ldr	r0, [r2, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
int count = 0;
int incomingByte;
char letter;

// setup() runs once, when the device is first turned on.
void setup() {
   d40b4:	b513      	push	{r0, r1, r4, lr}
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d40b6:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d40b8:	2201      	movs	r2, #1
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40ba:	4618      	mov	r0, r3

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d40bc:	2408      	movs	r4, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d40be:	9201      	str	r2, [sp, #4]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40c0:	490f      	ldr	r1, [pc, #60]	; (d4100 <setup+0x4c>)
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d40c2:	9300      	str	r3, [sp, #0]
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40c4:	466a      	mov	r2, sp

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d40c6:	f8ad 4000 	strh.w	r4, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40ca:	f000 f9df 	bl	d448c <spark_set_connection_property>
    // Set the keep-alive value for 3rd party SIM card here
    Particle.keepAlive(120);

    Serial.begin();
   d40ce:	f000 fcef 	bl	d4ab0 <_Z16_fetch_usbserialv>
   d40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d6:	f000 fcdf 	bl	d4a98 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
   d40da:	f000 fdbb 	bl	d4c54 <_Z22__fetch_global_Serial1v>
   d40de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40e2:	f000 fdb3 	bl	d4c4c <_ZN11USARTSerial5beginEm>
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
   d40e6:	4b07      	ldr	r3, [pc, #28]	; (d4104 <setup+0x50>)
   d40e8:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d40ea:	2204      	movs	r2, #4
   d40ec:	466b      	mov	r3, sp
   d40ee:	4906      	ldr	r1, [pc, #24]	; (d4108 <setup+0x54>)
   d40f0:	4806      	ldr	r0, [pc, #24]	; (d410c <setup+0x58>)

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d40f2:	f8ad 4000 	strh.w	r4, [sp]
        extra.update = update_string_variable;
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d40f6:	f000 f9c1 	bl	d447c <spark_variable>

    Particle.variable("returnValue", value);
	}
   d40fa:	b002      	add	sp, #8
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	0001d4c0 	.word	0x0001d4c0
   d4104:	000d40af 	.word	0x000d40af
   d4108:	2003e39c 	.word	0x2003e39c
   d410c:	000d52f8 	.word	0x000d52f8

000d4110 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4110:	b538      	push	{r3, r4, r5, lr}
    if (Serial1.available() > 0) {
   d4112:	f000 fd9f 	bl	d4c54 <_Z22__fetch_global_Serial1v>
   d4116:	6803      	ldr	r3, [r0, #0]
   d4118:	691b      	ldr	r3, [r3, #16]
   d411a:	4798      	blx	r3
   d411c:	2800      	cmp	r0, #0
   d411e:	dd27      	ble.n	d4170 <loop+0x60>
        incomingByte = Serial1.read();
   d4120:	f000 fd98 	bl	d4c54 <_Z22__fetch_global_Serial1v>
   d4124:	6803      	ldr	r3, [r0, #0]
   d4126:	4c15      	ldr	r4, [pc, #84]	; (d417c <loop+0x6c>)
   d4128:	695b      	ldr	r3, [r3, #20]
   d412a:	4798      	blx	r3
   d412c:	4b14      	ldr	r3, [pc, #80]	; (d4180 <loop+0x70>)
        letter = incomingByte;
   d412e:	b2c1      	uxtb	r1, r0
	}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
    if (Serial1.available() > 0) {
        incomingByte = Serial1.read();
   d4130:	6018      	str	r0, [r3, #0]
        letter = incomingByte;
   d4132:	4b14      	ldr	r3, [pc, #80]	; (d4184 <loop+0x74>)
        if (letter == '\n' || count >= maxlimit) {
   d4134:	290a      	cmp	r1, #10

// loop() runs over and over again, as quickly as it can execute.
void loop() {
    if (Serial1.available() > 0) {
        incomingByte = Serial1.read();
        letter = incomingByte;
   d4136:	7019      	strb	r1, [r3, #0]
        if (letter == '\n' || count >= maxlimit) {
   d4138:	d004      	beq.n	d4144 <loop+0x34>
   d413a:	4a13      	ldr	r2, [pc, #76]	; (d4188 <loop+0x78>)
   d413c:	6823      	ldr	r3, [r4, #0]
   d413e:	6812      	ldr	r2, [r2, #0]
   d4140:	4293      	cmp	r3, r2
   d4142:	db10      	blt.n	d4166 <loop+0x56>
            value = word;
   d4144:	4d11      	ldr	r5, [pc, #68]	; (d418c <loop+0x7c>)
   d4146:	4912      	ldr	r1, [pc, #72]	; (d4190 <loop+0x80>)
   d4148:	4628      	mov	r0, r5
   d414a:	f000 fa87 	bl	d465c <_ZN6StringaSERKS_>
            Serial.println(value);
   d414e:	f000 fcaf 	bl	d4ab0 <_Z16_fetch_usbserialv>
   d4152:	6829      	ldr	r1, [r5, #0]
   d4154:	f000 fb03 	bl	d475e <_ZN5Print7printlnEPKc>
            word = "";
   d4158:	490e      	ldr	r1, [pc, #56]	; (d4194 <loop+0x84>)
   d415a:	480d      	ldr	r0, [pc, #52]	; (d4190 <loop+0x80>)
   d415c:	f000 fa8d 	bl	d467a <_ZN6StringaSEPKc>
            count = 0;
   d4160:	2300      	movs	r3, #0
   d4162:	6023      	str	r3, [r4, #0]
   d4164:	e004      	b.n	d4170 <loop+0x60>
        }
        else {
            count++;
   d4166:	3301      	adds	r3, #1

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d4168:	4809      	ldr	r0, [pc, #36]	; (d4190 <loop+0x80>)
   d416a:	6023      	str	r3, [r4, #0]
   d416c:	f000 faad 	bl	d46ca <_ZN6String6concatEc>
            word += letter;
        }

    }
	delay(10);
   d4170:	200a      	movs	r0, #10
   d4172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            count++;
            word += letter;
        }

    }
	delay(10);
   d4176:	f000 bb3d 	b.w	d47f4 <delay>
   d417a:	bf00      	nop
   d417c:	2003e3b0 	.word	0x2003e3b0
   d4180:	2003e3b4 	.word	0x2003e3b4
   d4184:	2003e3ac 	.word	0x2003e3ac
   d4188:	2003e31c 	.word	0x2003e31c
   d418c:	2003e39c 	.word	0x2003e39c
   d4190:	2003e38c 	.word	0x2003e38c
   d4194:	000d53ef 	.word	0x000d53ef

000d4198 <_GLOBAL__sub_I_word>:
   d4198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Description: 
 * Author: Kendra Tam
 * Date: December 23, 2019
 */

String word = "";
   d419a:	4f0d      	ldr	r7, [pc, #52]	; (d41d0 <_GLOBAL__sub_I_word+0x38>)
   d419c:	4c0d      	ldr	r4, [pc, #52]	; (d41d4 <_GLOBAL__sub_I_word+0x3c>)
   d419e:	4e0e      	ldr	r6, [pc, #56]	; (d41d8 <_GLOBAL__sub_I_word+0x40>)
   d41a0:	4d0e      	ldr	r5, [pc, #56]	; (d41dc <_GLOBAL__sub_I_word+0x44>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41a2:	f000 f82f 	bl	d4204 <HAL_Pin_Map>
   d41a6:	4639      	mov	r1, r7
   d41a8:	4620      	mov	r0, r4
   d41aa:	f000 fa44 	bl	d4636 <_ZN6StringC1EPK19__FlashStringHelper>
   d41ae:	4620      	mov	r0, r4
String value = "";
   d41b0:	4c0b      	ldr	r4, [pc, #44]	; (d41e0 <_GLOBAL__sub_I_word+0x48>)
 * Description: 
 * Author: Kendra Tam
 * Date: December 23, 2019
 */

String word = "";
   d41b2:	4632      	mov	r2, r6
   d41b4:	4629      	mov	r1, r5
   d41b6:	f000 feeb 	bl	d4f90 <__aeabi_atexit>
String value = "";
   d41ba:	4639      	mov	r1, r7
   d41bc:	4620      	mov	r0, r4
   d41be:	f000 fa3a 	bl	d4636 <_ZN6StringC1EPK19__FlashStringHelper>
   d41c2:	4632      	mov	r2, r6
   d41c4:	4629      	mov	r1, r5
   d41c6:	4620      	mov	r0, r4
            word += letter;
        }

    }
	delay(10);
   d41c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 * Author: Kendra Tam
 * Date: December 23, 2019
 */

String word = "";
String value = "";
   d41cc:	f000 bee0 	b.w	d4f90 <__aeabi_atexit>
   d41d0:	000d53ef 	.word	0x000d53ef
   d41d4:	2003e38c 	.word	0x2003e38c
   d41d8:	2003e388 	.word	0x2003e388
   d41dc:	000d45a9 	.word	0x000d45a9
   d41e0:	2003e39c 	.word	0x2003e39c

000d41e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41e4:	b508      	push	{r3, lr}
   d41e6:	4b02      	ldr	r3, [pc, #8]	; (d41f0 <netdb_freeaddrinfo+0xc>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	689b      	ldr	r3, [r3, #8]
   d41ec:	9301      	str	r3, [sp, #4]
   d41ee:	bd08      	pop	{r3, pc}
   d41f0:	00030268 	.word	0x00030268

000d41f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41f4:	b508      	push	{r3, lr}
   d41f6:	4b02      	ldr	r3, [pc, #8]	; (d4200 <netdb_getaddrinfo+0xc>)
   d41f8:	681b      	ldr	r3, [r3, #0]
   d41fa:	68db      	ldr	r3, [r3, #12]
   d41fc:	9301      	str	r3, [sp, #4]
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	00030268 	.word	0x00030268

000d4204 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4204:	b508      	push	{r3, lr}
   d4206:	4b02      	ldr	r3, [pc, #8]	; (d4210 <HAL_Pin_Map+0xc>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	681b      	ldr	r3, [r3, #0]
   d420c:	9301      	str	r3, [sp, #4]
   d420e:	bd08      	pop	{r3, pc}
   d4210:	0003022c 	.word	0x0003022c

000d4214 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4214:	b508      	push	{r3, lr}
   d4216:	4b02      	ldr	r3, [pc, #8]	; (d4220 <HAL_SPI_Init+0xc>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	69db      	ldr	r3, [r3, #28]
   d421c:	9301      	str	r3, [sp, #4]
   d421e:	bd08      	pop	{r3, pc}
   d4220:	00030230 	.word	0x00030230

000d4224 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4224:	b508      	push	{r3, lr}
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <HAL_RNG_GetRandomNumber+0xc>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	685b      	ldr	r3, [r3, #4]
   d422c:	9301      	str	r3, [sp, #4]
   d422e:	bd08      	pop	{r3, pc}
   d4230:	00030218 	.word	0x00030218

000d4234 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4234:	b508      	push	{r3, lr}
   d4236:	4b02      	ldr	r3, [pc, #8]	; (d4240 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4238:	681b      	ldr	r3, [r3, #0]
   d423a:	695b      	ldr	r3, [r3, #20]
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	bd08      	pop	{r3, pc}
   d4240:	00030218 	.word	0x00030218

000d4244 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4244:	b508      	push	{r3, lr}
   d4246:	4b02      	ldr	r3, [pc, #8]	; (d4250 <os_thread_is_current+0xc>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	689b      	ldr	r3, [r3, #8]
   d424c:	9301      	str	r3, [sp, #4]
   d424e:	bd08      	pop	{r3, pc}
   d4250:	00030248 	.word	0x00030248

000d4254 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <os_thread_join+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	691b      	ldr	r3, [r3, #16]
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	00030248 	.word	0x00030248

000d4264 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <os_thread_cleanup+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	695b      	ldr	r3, [r3, #20]
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	00030248 	.word	0x00030248

000d4274 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <os_mutex_create+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030248 	.word	0x00030248

000d4284 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <os_mutex_recursive_create+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030248 	.word	0x00030248

000d4294 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <inet_inet_ntop+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	695b      	ldr	r3, [r3, #20]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030264 	.word	0x00030264

000d42a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <HAL_USART_Init+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	681b      	ldr	r3, [r3, #0]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	0003023c 	.word	0x0003023c

000d42b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <HAL_USART_Write_Data+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	68db      	ldr	r3, [r3, #12]
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	0003023c 	.word	0x0003023c

000d42c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <HAL_USART_Available_Data+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	691b      	ldr	r3, [r3, #16]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	0003023c 	.word	0x0003023c

000d42d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <HAL_USART_Read_Data+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	695b      	ldr	r3, [r3, #20]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	0003023c 	.word	0x0003023c

000d42e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <HAL_USART_Peek_Data+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	699b      	ldr	r3, [r3, #24]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	0003023c 	.word	0x0003023c

000d42f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <HAL_USART_Flush_Data+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	69db      	ldr	r3, [r3, #28]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	0003023c 	.word	0x0003023c

000d4304 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <HAL_USART_Available_Data_For_Write+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	0003023c 	.word	0x0003023c

000d4314 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <HAL_USART_BeginConfig+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	0003023c 	.word	0x0003023c

000d4324 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <HAL_USB_USART_Init+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	681b      	ldr	r3, [r3, #0]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	0003024c 	.word	0x0003024c

000d4334 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <HAL_USB_USART_Begin+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	685b      	ldr	r3, [r3, #4]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	0003024c 	.word	0x0003024c

000d4344 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <HAL_USB_USART_Available_Data+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	691b      	ldr	r3, [r3, #16]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	0003024c 	.word	0x0003024c

000d4354 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	695b      	ldr	r3, [r3, #20]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	0003024c 	.word	0x0003024c

000d4364 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_USB_USART_Receive_Data+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	699b      	ldr	r3, [r3, #24]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	0003024c 	.word	0x0003024c

000d4374 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_USB_USART_Send_Data+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	69db      	ldr	r3, [r3, #28]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	0003024c 	.word	0x0003024c

000d4384 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_USB_USART_Flush_Data+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6a1b      	ldr	r3, [r3, #32]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003024c 	.word	0x0003024c

000d4394 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <set_system_mode+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	685b      	ldr	r3, [r3, #4]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030220 	.word	0x00030220

000d43a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <system_delay_ms+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	695b      	ldr	r3, [r3, #20]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030220 	.word	0x00030220

000d43b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b03      	ldr	r3, [pc, #12]	; (d43c4 <system_ctrl_set_app_request_handler+0x10>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d43be:	9301      	str	r3, [sp, #4]
   d43c0:	bd08      	pop	{r3, pc}
   d43c2:	0000      	.short	0x0000
   d43c4:	00030220 	.word	0x00030220

000d43c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b03      	ldr	r3, [pc, #12]	; (d43d8 <system_ctrl_set_result+0x10>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d43d2:	9301      	str	r3, [sp, #4]
   d43d4:	bd08      	pop	{r3, pc}
   d43d6:	0000      	.short	0x0000
   d43d8:	00030220 	.word	0x00030220

000d43dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <network_connect+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	685b      	ldr	r3, [r3, #4]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030240 	.word	0x00030240

000d43ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <network_connecting+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	689b      	ldr	r3, [r3, #8]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030240 	.word	0x00030240

000d43fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <network_disconnect+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	68db      	ldr	r3, [r3, #12]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030240 	.word	0x00030240

000d440c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <network_ready+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	691b      	ldr	r3, [r3, #16]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030240 	.word	0x00030240

000d441c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <network_on+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	695b      	ldr	r3, [r3, #20]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030240 	.word	0x00030240

000d442c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <network_off+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	699b      	ldr	r3, [r3, #24]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030240 	.word	0x00030240

000d443c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <network_listen+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	69db      	ldr	r3, [r3, #28]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030240 	.word	0x00030240

000d444c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <network_listening+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	6a1b      	ldr	r3, [r3, #32]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030240 	.word	0x00030240

000d445c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <network_set_listen_timeout+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030240 	.word	0x00030240

000d446c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <network_get_listen_timeout+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030240 	.word	0x00030240

000d447c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <spark_variable+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	681b      	ldr	r3, [r3, #0]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030244 	.word	0x00030244

000d448c <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <spark_set_connection_property+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030244 	.word	0x00030244

000d449c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030244 	.word	0x00030244

000d44ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <malloc+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	681b      	ldr	r3, [r3, #0]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003021c 	.word	0x0003021c

000d44bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <free+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	685b      	ldr	r3, [r3, #4]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	0003021c 	.word	0x0003021c

000d44cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <realloc+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	689b      	ldr	r3, [r3, #8]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	0003021c 	.word	0x0003021c

000d44dc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d44dc:	2200      	movs	r2, #0
   d44de:	4611      	mov	r1, r2
   d44e0:	6840      	ldr	r0, [r0, #4]
   d44e2:	f7ff bfb3 	b.w	d444c <network_listening>

000d44e6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d44e6:	2200      	movs	r2, #0
   d44e8:	4611      	mov	r1, r2
   d44ea:	6840      	ldr	r0, [r0, #4]
   d44ec:	f7ff bfbe 	b.w	d446c <network_get_listen_timeout>

000d44f0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d44f0:	2200      	movs	r2, #0
   d44f2:	6840      	ldr	r0, [r0, #4]
   d44f4:	f7ff bfb2 	b.w	d445c <network_set_listen_timeout>

000d44f8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d44f8:	2200      	movs	r2, #0
   d44fa:	f081 0101 	eor.w	r1, r1, #1
   d44fe:	6840      	ldr	r0, [r0, #4]
   d4500:	f7ff bf9c 	b.w	d443c <network_listen>

000d4504 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4504:	2300      	movs	r3, #0
   d4506:	461a      	mov	r2, r3
   d4508:	4619      	mov	r1, r3
   d450a:	6840      	ldr	r0, [r0, #4]
   d450c:	f7ff bf8e 	b.w	d442c <network_off>

000d4510 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4510:	2300      	movs	r3, #0
   d4512:	461a      	mov	r2, r3
   d4514:	4619      	mov	r1, r3
   d4516:	6840      	ldr	r0, [r0, #4]
   d4518:	f7ff bf80 	b.w	d441c <network_on>

000d451c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d451c:	2200      	movs	r2, #0
   d451e:	4611      	mov	r1, r2
   d4520:	6840      	ldr	r0, [r0, #4]
   d4522:	f7ff bf73 	b.w	d440c <network_ready>

000d4526 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4526:	2200      	movs	r2, #0
   d4528:	4611      	mov	r1, r2
   d452a:	6840      	ldr	r0, [r0, #4]
   d452c:	f7ff bf5e 	b.w	d43ec <network_connecting>

000d4530 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4530:	2200      	movs	r2, #0
   d4532:	2102      	movs	r1, #2
   d4534:	6840      	ldr	r0, [r0, #4]
   d4536:	f7ff bf61 	b.w	d43fc <network_disconnect>

000d453a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d453a:	2300      	movs	r3, #0
   d453c:	461a      	mov	r2, r3
   d453e:	6840      	ldr	r0, [r0, #4]
   d4540:	f7ff bf4c 	b.w	d43dc <network_connect>

000d4544 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4544:	4b02      	ldr	r3, [pc, #8]	; (d4550 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4546:	2203      	movs	r2, #3
   d4548:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d454a:	4a02      	ldr	r2, [pc, #8]	; (d4554 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d454c:	601a      	str	r2, [r3, #0]
   d454e:	4770      	bx	lr
   d4550:	2003e3b8 	.word	0x2003e3b8
   d4554:	000d530c 	.word	0x000d530c

000d4558 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4558:	4770      	bx	lr

000d455a <_ZN8SPIClassD0Ev>:
   d455a:	b510      	push	{r4, lr}
   d455c:	2110      	movs	r1, #16
   d455e:	4604      	mov	r4, r0
   d4560:	f000 fd1b 	bl	d4f9a <_ZdlPvj>
   d4564:	4620      	mov	r0, r4
   d4566:	bd10      	pop	{r4, pc}

000d4568 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4568:	b570      	push	{r4, r5, r6, lr}
   d456a:	4b08      	ldr	r3, [pc, #32]	; (d458c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d456c:	6003      	str	r3, [r0, #0]
   d456e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4570:	2500      	movs	r5, #0
   d4572:	460e      	mov	r6, r1
   d4574:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4578:	f7ff fe7c 	bl	d4274 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d457c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d457e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4580:	f7ff fe48 	bl	d4214 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4584:	60a5      	str	r5, [r4, #8]
}
   d4586:	4620      	mov	r0, r4
   d4588:	bd70      	pop	{r4, r5, r6, pc}
   d458a:	bf00      	nop
   d458c:	000d5340 	.word	0x000d5340

000d4590 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4590:	4b04      	ldr	r3, [pc, #16]	; (d45a4 <_GLOBAL__sub_I_System+0x14>)
   d4592:	2000      	movs	r0, #0
   d4594:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4598:	7018      	strb	r0, [r3, #0]
   d459a:	8058      	strh	r0, [r3, #2]
   d459c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d459e:	f7ff bef9 	b.w	d4394 <set_system_mode>
   d45a2:	bf00      	nop
   d45a4:	2003e3c0 	.word	0x2003e3c0

000d45a8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d45a8:	b510      	push	{r4, lr}
   d45aa:	4604      	mov	r4, r0
{
	free(buffer);
   d45ac:	6800      	ldr	r0, [r0, #0]
   d45ae:	f7ff ff85 	bl	d44bc <free>
}
   d45b2:	4620      	mov	r0, r4
   d45b4:	bd10      	pop	{r4, pc}

000d45b6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d45b6:	b510      	push	{r4, lr}
   d45b8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d45ba:	6800      	ldr	r0, [r0, #0]
   d45bc:	b108      	cbz	r0, d45c2 <_ZN6String10invalidateEv+0xc>
   d45be:	f7ff ff7d 	bl	d44bc <free>
	buffer = NULL;
   d45c2:	2300      	movs	r3, #0
   d45c4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d45c6:	60a3      	str	r3, [r4, #8]
   d45c8:	6063      	str	r3, [r4, #4]
   d45ca:	bd10      	pop	{r4, pc}

000d45cc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d45cc:	b538      	push	{r3, r4, r5, lr}
   d45ce:	4604      	mov	r4, r0
   d45d0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d45d2:	6800      	ldr	r0, [r0, #0]
   d45d4:	3101      	adds	r1, #1
   d45d6:	f7ff ff79 	bl	d44cc <realloc>
	if (newbuffer) {
   d45da:	b110      	cbz	r0, d45e2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d45dc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d45e0:	2001      	movs	r0, #1
	}
	return 0;
}
   d45e2:	bd38      	pop	{r3, r4, r5, pc}

000d45e4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d45e4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d45e6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d45e8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d45ea:	b113      	cbz	r3, d45f2 <_ZN6String7reserveEj+0xe>
   d45ec:	6843      	ldr	r3, [r0, #4]
   d45ee:	428b      	cmp	r3, r1
   d45f0:	d207      	bcs.n	d4602 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d45f2:	4620      	mov	r0, r4
   d45f4:	f7ff ffea 	bl	d45cc <_ZN6String12changeBufferEj>
   d45f8:	b120      	cbz	r0, d4604 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d45fa:	68a3      	ldr	r3, [r4, #8]
   d45fc:	b90b      	cbnz	r3, d4602 <_ZN6String7reserveEj+0x1e>
   d45fe:	6822      	ldr	r2, [r4, #0]
   d4600:	7013      	strb	r3, [r2, #0]
   d4602:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4604:	bd10      	pop	{r4, pc}

000d4606 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4606:	b570      	push	{r4, r5, r6, lr}
   d4608:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d460a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d460c:	4604      	mov	r4, r0
   d460e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4610:	f7ff ffe8 	bl	d45e4 <_ZN6String7reserveEj>
   d4614:	b918      	cbnz	r0, d461e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4616:	4620      	mov	r0, r4
   d4618:	f7ff ffcd 	bl	d45b6 <_ZN6String10invalidateEv>
		return *this;
   d461c:	e009      	b.n	d4632 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d461e:	462a      	mov	r2, r5
   d4620:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4622:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4624:	6820      	ldr	r0, [r4, #0]
   d4626:	f000 fe11 	bl	d524c <memcpy>
	buffer[len] = 0;
   d462a:	6822      	ldr	r2, [r4, #0]
   d462c:	68a3      	ldr	r3, [r4, #8]
   d462e:	2100      	movs	r1, #0
   d4630:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4632:	4620      	mov	r0, r4
   d4634:	bd70      	pop	{r4, r5, r6, pc}

000d4636 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4636:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4638:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d463a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d463c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d463e:	6043      	str	r3, [r0, #4]
	len = 0;
   d4640:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4642:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4644:	460d      	mov	r5, r1
   d4646:	b139      	cbz	r1, d4658 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4648:	4608      	mov	r0, r1
   d464a:	f000 fe43 	bl	d52d4 <strlen>
   d464e:	4629      	mov	r1, r5
   d4650:	4602      	mov	r2, r0
   d4652:	4620      	mov	r0, r4
   d4654:	f7ff ffd7 	bl	d4606 <_ZN6String4copyEPKcj>
}
   d4658:	4620      	mov	r0, r4
   d465a:	bd38      	pop	{r3, r4, r5, pc}

000d465c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d465c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d465e:	b510      	push	{r4, lr}
   d4660:	460b      	mov	r3, r1
   d4662:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4664:	d007      	beq.n	d4676 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4666:	6809      	ldr	r1, [r1, #0]
   d4668:	b119      	cbz	r1, d4672 <_ZN6StringaSERKS_+0x16>
   d466a:	689a      	ldr	r2, [r3, #8]
   d466c:	f7ff ffcb 	bl	d4606 <_ZN6String4copyEPKcj>
   d4670:	e001      	b.n	d4676 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4672:	f7ff ffa0 	bl	d45b6 <_ZN6String10invalidateEv>

	return *this;
}
   d4676:	4620      	mov	r0, r4
   d4678:	bd10      	pop	{r4, pc}

000d467a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d467a:	b538      	push	{r3, r4, r5, lr}
   d467c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d467e:	460c      	mov	r4, r1
   d4680:	b141      	cbz	r1, d4694 <_ZN6StringaSEPKc+0x1a>
   d4682:	4608      	mov	r0, r1
   d4684:	f000 fe26 	bl	d52d4 <strlen>
   d4688:	4621      	mov	r1, r4
   d468a:	4602      	mov	r2, r0
   d468c:	4628      	mov	r0, r5
   d468e:	f7ff ffba 	bl	d4606 <_ZN6String4copyEPKcj>
   d4692:	e001      	b.n	d4698 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4694:	f7ff ff8f 	bl	d45b6 <_ZN6String10invalidateEv>

	return *this;
}
   d4698:	4628      	mov	r0, r5
   d469a:	bd38      	pop	{r3, r4, r5, pc}

000d469c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d469c:	b570      	push	{r4, r5, r6, lr}
   d469e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d46a0:	460e      	mov	r6, r1
   d46a2:	b909      	cbnz	r1, d46a8 <_ZN6String6concatEPKcj+0xc>
   d46a4:	2000      	movs	r0, #0
   d46a6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d46a8:	b16a      	cbz	r2, d46c6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d46aa:	6883      	ldr	r3, [r0, #8]
   d46ac:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d46ae:	4629      	mov	r1, r5
   d46b0:	f7ff ff98 	bl	d45e4 <_ZN6String7reserveEj>
   d46b4:	2800      	cmp	r0, #0
   d46b6:	d0f5      	beq.n	d46a4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d46b8:	6820      	ldr	r0, [r4, #0]
   d46ba:	68a3      	ldr	r3, [r4, #8]
   d46bc:	4631      	mov	r1, r6
   d46be:	4418      	add	r0, r3
   d46c0:	f000 fe00 	bl	d52c4 <strcpy>
	len = newlen;
   d46c4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d46c6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d46c8:	bd70      	pop	{r4, r5, r6, pc}

000d46ca <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d46ca:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d46cc:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d46ce:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d46d2:	2201      	movs	r2, #1
   d46d4:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d46d6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d46da:	f7ff ffdf 	bl	d469c <_ZN6String6concatEPKcj>
}
   d46de:	b003      	add	sp, #12
   d46e0:	f85d fb04 	ldr.w	pc, [sp], #4

000d46e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d46e4:	4802      	ldr	r0, [pc, #8]	; (d46f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d46e6:	2300      	movs	r3, #0
   d46e8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d46ea:	f7ff bdcb 	b.w	d4284 <os_mutex_recursive_create>
   d46ee:	bf00      	nop
   d46f0:	2003e3c8 	.word	0x2003e3c8

000d46f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d46f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46f6:	4606      	mov	r6, r0
   d46f8:	460d      	mov	r5, r1
   d46fa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d46fc:	2400      	movs	r4, #0
  while (size--) {
   d46fe:	42bd      	cmp	r5, r7
   d4700:	d00c      	beq.n	d471c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4702:	6833      	ldr	r3, [r6, #0]
   d4704:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4708:	689b      	ldr	r3, [r3, #8]
   d470a:	4630      	mov	r0, r6
   d470c:	4798      	blx	r3
     if (chunk>=0)
   d470e:	2800      	cmp	r0, #0
   d4710:	db01      	blt.n	d4716 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4712:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4714:	e7f3      	b.n	d46fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4716:	2c00      	cmp	r4, #0
   d4718:	bf08      	it	eq
   d471a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d471c:	4620      	mov	r0, r4
   d471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4720 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4720:	b570      	push	{r4, r5, r6, lr}
   d4722:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4724:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4726:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4728:	b149      	cbz	r1, d473e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d472a:	f000 fdd3 	bl	d52d4 <strlen>
   d472e:	682b      	ldr	r3, [r5, #0]
   d4730:	4602      	mov	r2, r0
   d4732:	4621      	mov	r1, r4
   d4734:	4628      	mov	r0, r5
   d4736:	68db      	ldr	r3, [r3, #12]
    }
   d4738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d473c:	4718      	bx	r3
    }
   d473e:	bd70      	pop	{r4, r5, r6, pc}

000d4740 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4740:	6803      	ldr	r3, [r0, #0]
   d4742:	689b      	ldr	r3, [r3, #8]
   d4744:	4718      	bx	r3

000d4746 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4746:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4748:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d474a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d474c:	f7ff fff8 	bl	d4740 <_ZN5Print5printEc>
  n += print('\n');
   d4750:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4752:	4604      	mov	r4, r0
  n += print('\n');
   d4754:	4628      	mov	r0, r5
   d4756:	f7ff fff3 	bl	d4740 <_ZN5Print5printEc>
  return n;
}
   d475a:	4420      	add	r0, r4
   d475c:	bd38      	pop	{r3, r4, r5, pc}

000d475e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d475e:	b538      	push	{r3, r4, r5, lr}
   d4760:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4762:	f7ff ffdd 	bl	d4720 <_ZN5Print5writeEPKc>
   d4766:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4768:	4628      	mov	r0, r5
   d476a:	f7ff ffec 	bl	d4746 <_ZN5Print7printlnEv>
  return n;
}
   d476e:	4420      	add	r0, r4
   d4770:	bd38      	pop	{r3, r4, r5, pc}

000d4772 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4772:	b530      	push	{r4, r5, lr}
   d4774:	b08b      	sub	sp, #44	; 0x2c
   d4776:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4778:	2100      	movs	r1, #0
   d477a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d477e:	2a01      	cmp	r2, #1
   d4780:	bf98      	it	ls
   d4782:	220a      	movls	r2, #10
   d4784:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4788:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d478c:	fb05 3312 	mls	r3, r5, r2, r3
   d4790:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4794:	2b09      	cmp	r3, #9
   d4796:	bf94      	ite	ls
   d4798:	3330      	addls	r3, #48	; 0x30
   d479a:	3337      	addhi	r3, #55	; 0x37
   d479c:	b2db      	uxtb	r3, r3
   d479e:	4621      	mov	r1, r4
   d47a0:	f804 3901 	strb.w	r3, [r4], #-1
   d47a4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d47a6:	2d00      	cmp	r5, #0
   d47a8:	d1ee      	bne.n	d4788 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d47aa:	f7ff ffb9 	bl	d4720 <_ZN5Print5writeEPKc>
}
   d47ae:	b00b      	add	sp, #44	; 0x2c
   d47b0:	bd30      	pop	{r4, r5, pc}

000d47b2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d47b2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d47b4:	b92a      	cbnz	r2, d47c2 <_ZN5Print5printEmi+0x10>
   d47b6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d47b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d47bc:	689b      	ldr	r3, [r3, #8]
   d47be:	b2c9      	uxtb	r1, r1
   d47c0:	4718      	bx	r3
  else return printNumber(n, base);
   d47c2:	b2d2      	uxtb	r2, r2
}
   d47c4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d47c8:	f7ff bfd3 	b.w	d4772 <_ZN5Print11printNumberEmh>

000d47cc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d47cc:	f7ff bff1 	b.w	d47b2 <_ZN5Print5printEmi>

000d47d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d47d0:	4b01      	ldr	r3, [pc, #4]	; (d47d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d47d2:	4a02      	ldr	r2, [pc, #8]	; (d47dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d47d4:	601a      	str	r2, [r3, #0]
   d47d6:	4770      	bx	lr
   d47d8:	2003e3cc 	.word	0x2003e3cc
   d47dc:	000d53bb 	.word	0x000d53bb

000d47e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d47e0:	4b02      	ldr	r3, [pc, #8]	; (d47ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d47e2:	681a      	ldr	r2, [r3, #0]
   d47e4:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d47e6:	601a      	str	r2, [r3, #0]
   d47e8:	4770      	bx	lr
   d47ea:	bf00      	nop
   d47ec:	2003e320 	.word	0x2003e320
   d47f0:	2003e3d0 	.word	0x2003e3d0

000d47f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d47f4:	2100      	movs	r1, #0
   d47f6:	f7ff bdd5 	b.w	d43a4 <system_delay_ms>

000d47fa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d47fa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d47fc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d47fe:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4800:	b113      	cbz	r3, d4808 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4802:	2203      	movs	r2, #3
   d4804:	4601      	mov	r1, r0
   d4806:	4798      	blx	r3
    }
   d4808:	4620      	mov	r0, r4
   d480a:	bd10      	pop	{r4, pc}

000d480c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d480c:	b510      	push	{r4, lr}
   d480e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4810:	f7ff fff3 	bl	d47fa <_ZNSt14_Function_baseD1Ev>
   d4814:	4620      	mov	r0, r4
   d4816:	bd10      	pop	{r4, pc}

000d4818 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4818:	4803      	ldr	r0, [pc, #12]	; (d4828 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d481a:	4a04      	ldr	r2, [pc, #16]	; (d482c <_GLOBAL__sub_I_RGB+0x14>)
   d481c:	4904      	ldr	r1, [pc, #16]	; (d4830 <_GLOBAL__sub_I_RGB+0x18>)
   d481e:	2300      	movs	r3, #0
   d4820:	6083      	str	r3, [r0, #8]
   d4822:	f000 bbb5 	b.w	d4f90 <__aeabi_atexit>
   d4826:	bf00      	nop
   d4828:	2003e3d4 	.word	0x2003e3d4
   d482c:	2003e388 	.word	0x2003e388
   d4830:	000d480d 	.word	0x000d480d

000d4834 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4834:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4836:	4b0c      	ldr	r3, [pc, #48]	; (d4868 <serialEventRun+0x34>)
   d4838:	b133      	cbz	r3, d4848 <serialEventRun+0x14>
   d483a:	f000 f939 	bl	d4ab0 <_Z16_fetch_usbserialv>
   d483e:	6803      	ldr	r3, [r0, #0]
   d4840:	691b      	ldr	r3, [r3, #16]
   d4842:	4798      	blx	r3
   d4844:	2800      	cmp	r0, #0
   d4846:	dc09      	bgt.n	d485c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4848:	4b08      	ldr	r3, [pc, #32]	; (d486c <serialEventRun+0x38>)
   d484a:	b163      	cbz	r3, d4866 <serialEventRun+0x32>
   d484c:	f000 fa02 	bl	d4c54 <_Z22__fetch_global_Serial1v>
   d4850:	6803      	ldr	r3, [r0, #0]
   d4852:	691b      	ldr	r3, [r3, #16]
   d4854:	4798      	blx	r3
   d4856:	2800      	cmp	r0, #0
   d4858:	dc03      	bgt.n	d4862 <serialEventRun+0x2e>
   d485a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d485c:	f3af 8000 	nop.w
   d4860:	e7f2      	b.n	d4848 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4862:	f3af 8000 	nop.w
   d4866:	bd08      	pop	{r3, pc}
	...

000d4870 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4870:	b508      	push	{r3, lr}
	serialEventRun();
   d4872:	f7ff ffdf 	bl	d4834 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4876:	f7ff fcdd 	bl	d4234 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d487a:	4b01      	ldr	r3, [pc, #4]	; (d4880 <_post_loop+0x10>)
   d487c:	6018      	str	r0, [r3, #0]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	2003e74c 	.word	0x2003e74c

000d4884 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4884:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4886:	2300      	movs	r3, #0
   d4888:	9300      	str	r3, [sp, #0]
   d488a:	461a      	mov	r2, r3
   d488c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4890:	f7ff fd9a 	bl	d43c8 <system_ctrl_set_result>
}
   d4894:	b003      	add	sp, #12
   d4896:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d489c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d489c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d489e:	8843      	ldrh	r3, [r0, #2]
   d48a0:	2b0a      	cmp	r3, #10
   d48a2:	d008      	beq.n	d48b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d48a4:	2b50      	cmp	r3, #80	; 0x50
   d48a6:	d109      	bne.n	d48bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d48a8:	4b09      	ldr	r3, [pc, #36]	; (d48d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d48aa:	681b      	ldr	r3, [r3, #0]
   d48ac:	b13b      	cbz	r3, d48be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d48ae:	b003      	add	sp, #12
   d48b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d48b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d48b6:	f7ff ffe5 	bl	d4884 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d48ba:	e006      	b.n	d48ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d48bc:	2300      	movs	r3, #0
   d48be:	9300      	str	r3, [sp, #0]
   d48c0:	461a      	mov	r2, r3
   d48c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d48c6:	f7ff fd7f 	bl	d43c8 <system_ctrl_set_result>
        break;
    }
}
   d48ca:	b003      	add	sp, #12
   d48cc:	f85d fb04 	ldr.w	pc, [sp], #4
   d48d0:	2003e3e4 	.word	0x2003e3e4

000d48d4 <module_user_init_hook>:

void module_user_init_hook()
{
   d48d4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d48d6:	f7ff fca5 	bl	d4224 <HAL_RNG_GetRandomNumber>
   d48da:	4604      	mov	r4, r0
    srand(seed);
   d48dc:	f000 fcca 	bl	d5274 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d48e0:	4b07      	ldr	r3, [pc, #28]	; (d4900 <module_user_init_hook+0x2c>)
   d48e2:	b113      	cbz	r3, d48ea <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d48e4:	4620      	mov	r0, r4
   d48e6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d48ea:	2100      	movs	r1, #0
   d48ec:	4804      	ldr	r0, [pc, #16]	; (d4900 <module_user_init_hook+0x2c>)
   d48ee:	f7ff fdd5 	bl	d449c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d48f2:	2100      	movs	r1, #0
   d48f4:	4803      	ldr	r0, [pc, #12]	; (d4904 <module_user_init_hook+0x30>)
}
   d48f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d48fa:	f7ff bd5b 	b.w	d43b4 <system_ctrl_set_app_request_handler>
   d48fe:	bf00      	nop
   d4900:	00000000 	.word	0x00000000
   d4904:	000d489d 	.word	0x000d489d

000d4908 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4908:	4770      	bx	lr

000d490a <_ZN9IPAddressD0Ev>:
   d490a:	b510      	push	{r4, lr}
   d490c:	2118      	movs	r1, #24
   d490e:	4604      	mov	r4, r0
   d4910:	f000 fb43 	bl	d4f9a <_ZdlPvj>
   d4914:	4620      	mov	r0, r4
   d4916:	bd10      	pop	{r4, pc}

000d4918 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4918:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d491a:	7d03      	ldrb	r3, [r0, #20]
   d491c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d491e:	b08d      	sub	sp, #52	; 0x34
   d4920:	460e      	mov	r6, r1
   d4922:	f100 0704 	add.w	r7, r0, #4
   d4926:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d492a:	d002      	beq.n	d4932 <_ZNK9IPAddress7printToER5Print+0x1a>
   d492c:	f100 0508 	add.w	r5, r0, #8
   d4930:	e018      	b.n	d4964 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4932:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4934:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4936:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d493a:	232f      	movs	r3, #47	; 0x2f
   d493c:	462a      	mov	r2, r5
   d493e:	200a      	movs	r0, #10
   d4940:	f7ff fca8 	bl	d4294 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4944:	4628      	mov	r0, r5
   d4946:	f000 fcc5 	bl	d52d4 <strlen>
   d494a:	6833      	ldr	r3, [r6, #0]
   d494c:	4602      	mov	r2, r0
   d494e:	68db      	ldr	r3, [r3, #12]
   d4950:	4629      	mov	r1, r5
   d4952:	4630      	mov	r0, r6
   d4954:	4798      	blx	r3
   d4956:	e00f      	b.n	d4978 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4958:	b124      	cbz	r4, d4964 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d495a:	212e      	movs	r1, #46	; 0x2e
   d495c:	4630      	mov	r0, r6
   d495e:	f7ff feef 	bl	d4740 <_ZN5Print5printEc>
   d4962:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4964:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4968:	220a      	movs	r2, #10
   d496a:	4630      	mov	r0, r6
   d496c:	f7ff ff2e 	bl	d47cc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4970:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4972:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4974:	d1f0      	bne.n	d4958 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4976:	4620      	mov	r0, r4
    }
    return n;
}
   d4978:	b00d      	add	sp, #52	; 0x34
   d497a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d497c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d497c:	b510      	push	{r4, lr}
   d497e:	4b05      	ldr	r3, [pc, #20]	; (d4994 <_ZN9IPAddressC1Ev+0x18>)
   d4980:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4982:	2211      	movs	r2, #17
   d4984:	f840 3b04 	str.w	r3, [r0], #4
   d4988:	2100      	movs	r1, #0
   d498a:	f000 fc6a 	bl	d5262 <memset>
{
    clear();
}
   d498e:	4620      	mov	r0, r4
   d4990:	bd10      	pop	{r4, pc}
   d4992:	bf00      	nop
   d4994:	000d545c 	.word	0x000d545c

000d4998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4998:	4603      	mov	r3, r0
   d499a:	4a07      	ldr	r2, [pc, #28]	; (d49b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d499c:	b510      	push	{r4, lr}
   d499e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d49a2:	f101 0210 	add.w	r2, r1, #16
   d49a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d49aa:	f843 4b04 	str.w	r4, [r3], #4
   d49ae:	4291      	cmp	r1, r2
   d49b0:	d1f9      	bne.n	d49a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d49b2:	780a      	ldrb	r2, [r1, #0]
   d49b4:	701a      	strb	r2, [r3, #0]
}
   d49b6:	bd10      	pop	{r4, pc}
   d49b8:	000d545c 	.word	0x000d545c

000d49bc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d49bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d49be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d49c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d49c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d49ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d49ce:	2304      	movs	r3, #4
   d49d0:	6041      	str	r1, [r0, #4]
   d49d2:	7503      	strb	r3, [r0, #20]
   d49d4:	bd10      	pop	{r4, pc}

000d49d6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d49d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d49d8:	780d      	ldrb	r5, [r1, #0]
   d49da:	788b      	ldrb	r3, [r1, #2]
   d49dc:	784a      	ldrb	r2, [r1, #1]
   d49de:	78c9      	ldrb	r1, [r1, #3]
   d49e0:	9100      	str	r1, [sp, #0]
   d49e2:	4629      	mov	r1, r5
   d49e4:	f7ff ffea 	bl	d49bc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d49e8:	b003      	add	sp, #12
   d49ea:	bd30      	pop	{r4, r5, pc}

000d49ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d49ec:	7441      	strb	r1, [r0, #17]
   d49ee:	4770      	bx	lr

000d49f0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d49f0:	4770      	bx	lr

000d49f2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d49f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d49f4:	2100      	movs	r1, #0
   d49f6:	7c00      	ldrb	r0, [r0, #16]
   d49f8:	f7ff fcb4 	bl	d4364 <HAL_USB_USART_Receive_Data>
}
   d49fc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4a00:	bf28      	it	cs
   d4a02:	f04f 30ff 	movcs.w	r0, #4294967295
   d4a06:	bd08      	pop	{r3, pc}

000d4a08 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4a08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4a0a:	2101      	movs	r1, #1
   d4a0c:	7c00      	ldrb	r0, [r0, #16]
   d4a0e:	f7ff fca9 	bl	d4364 <HAL_USB_USART_Receive_Data>
}
   d4a12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4a16:	bf28      	it	cs
   d4a18:	f04f 30ff 	movcs.w	r0, #4294967295
   d4a1c:	bd08      	pop	{r3, pc}

000d4a1e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4a1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4a20:	7c00      	ldrb	r0, [r0, #16]
   d4a22:	f7ff fc97 	bl	d4354 <HAL_USB_USART_Available_Data_For_Write>
}
   d4a26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a2a:	bd08      	pop	{r3, pc}

000d4a2c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4a2c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4a2e:	7c00      	ldrb	r0, [r0, #16]
   d4a30:	f7ff fc88 	bl	d4344 <HAL_USB_USART_Available_Data>
}
   d4a34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a38:	bd08      	pop	{r3, pc}

000d4a3a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4a3a:	7c00      	ldrb	r0, [r0, #16]
   d4a3c:	f7ff bca2 	b.w	d4384 <HAL_USB_USART_Flush_Data>

000d4a40 <_ZN9USBSerialD0Ev>:
   d4a40:	b510      	push	{r4, lr}
   d4a42:	2114      	movs	r1, #20
   d4a44:	4604      	mov	r4, r0
   d4a46:	f000 faa8 	bl	d4f9a <_ZdlPvj>
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	bd10      	pop	{r4, pc}

000d4a4e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4a4e:	b538      	push	{r3, r4, r5, lr}
   d4a50:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a52:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4a54:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a56:	f7ff fc7d 	bl	d4354 <HAL_USB_USART_Available_Data_For_Write>
   d4a5a:	2800      	cmp	r0, #0
   d4a5c:	dc01      	bgt.n	d4a62 <_ZN9USBSerial5writeEh+0x14>
   d4a5e:	7c60      	ldrb	r0, [r4, #17]
   d4a60:	b128      	cbz	r0, d4a6e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4a62:	4629      	mov	r1, r5
   d4a64:	7c20      	ldrb	r0, [r4, #16]
   d4a66:	f7ff fc85 	bl	d4374 <HAL_USB_USART_Send_Data>
   d4a6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4a6e:	bd38      	pop	{r3, r4, r5, pc}

000d4a70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4a70:	b510      	push	{r4, lr}
   d4a72:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4a74:	2300      	movs	r3, #0
   d4a76:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a7c:	60a3      	str	r3, [r4, #8]
   d4a7e:	4b05      	ldr	r3, [pc, #20]	; (d4a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4a80:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4a82:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4a84:	4608      	mov	r0, r1
{
  _serial = serial;
   d4a86:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4a88:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4a8a:	4611      	mov	r1, r2
   d4a8c:	f7ff fc4a 	bl	d4324 <HAL_USB_USART_Init>
}
   d4a90:	4620      	mov	r0, r4
   d4a92:	bd10      	pop	{r4, pc}
   d4a94:	000d5470 	.word	0x000d5470

000d4a98 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4a98:	2200      	movs	r2, #0
   d4a9a:	7c00      	ldrb	r0, [r0, #16]
   d4a9c:	f7ff bc4a 	b.w	d4334 <HAL_USB_USART_Begin>

000d4aa0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4aa0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4aa2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4aa4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4aa6:	2100      	movs	r1, #0
   d4aa8:	f000 fbdb 	bl	d5262 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4aac:	4620      	mov	r0, r4
   d4aae:	bd10      	pop	{r4, pc}

000d4ab0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4ab0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4ab2:	4d0e      	ldr	r5, [pc, #56]	; (d4aec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4ab4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4ab6:	a801      	add	r0, sp, #4
   d4ab8:	f7ff fff2 	bl	d4aa0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4abc:	6829      	ldr	r1, [r5, #0]
   d4abe:	f011 0401 	ands.w	r4, r1, #1
   d4ac2:	d110      	bne.n	d4ae6 <_Z16_fetch_usbserialv+0x36>
   d4ac4:	4628      	mov	r0, r5
   d4ac6:	f7ff faea 	bl	d409e <__cxa_guard_acquire>
   d4aca:	b160      	cbz	r0, d4ae6 <_Z16_fetch_usbserialv+0x36>
   d4acc:	aa01      	add	r2, sp, #4
   d4ace:	4621      	mov	r1, r4
   d4ad0:	4807      	ldr	r0, [pc, #28]	; (d4af0 <_Z16_fetch_usbserialv+0x40>)
   d4ad2:	f7ff ffcd 	bl	d4a70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4ad6:	4628      	mov	r0, r5
   d4ad8:	f7ff fae6 	bl	d40a8 <__cxa_guard_release>
   d4adc:	4a05      	ldr	r2, [pc, #20]	; (d4af4 <_Z16_fetch_usbserialv+0x44>)
   d4ade:	4906      	ldr	r1, [pc, #24]	; (d4af8 <_Z16_fetch_usbserialv+0x48>)
   d4ae0:	4803      	ldr	r0, [pc, #12]	; (d4af0 <_Z16_fetch_usbserialv+0x40>)
   d4ae2:	f000 fa55 	bl	d4f90 <__aeabi_atexit>
	return _usbserial;
}
   d4ae6:	4802      	ldr	r0, [pc, #8]	; (d4af0 <_Z16_fetch_usbserialv+0x40>)
   d4ae8:	b007      	add	sp, #28
   d4aea:	bd30      	pop	{r4, r5, pc}
   d4aec:	2003e3e8 	.word	0x2003e3e8
   d4af0:	2003e3ec 	.word	0x2003e3ec
   d4af4:	2003e388 	.word	0x2003e388
   d4af8:	000d49f1 	.word	0x000d49f1

000d4afc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4afc:	2200      	movs	r2, #0
   d4afe:	4611      	mov	r1, r2
   d4b00:	6840      	ldr	r0, [r0, #4]
   d4b02:	f7ff bc83 	b.w	d440c <network_ready>

000d4b06 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b06:	2200      	movs	r2, #0
   d4b08:	4611      	mov	r1, r2
   d4b0a:	6840      	ldr	r0, [r0, #4]
   d4b0c:	f7ff bc9e 	b.w	d444c <network_listening>

000d4b10 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b10:	2200      	movs	r2, #0
   d4b12:	4611      	mov	r1, r2
   d4b14:	6840      	ldr	r0, [r0, #4]
   d4b16:	f7ff bca9 	b.w	d446c <network_get_listen_timeout>

000d4b1a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b1a:	2200      	movs	r2, #0
   d4b1c:	6840      	ldr	r0, [r0, #4]
   d4b1e:	f7ff bc9d 	b.w	d445c <network_set_listen_timeout>

000d4b22 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b22:	2200      	movs	r2, #0
   d4b24:	f081 0101 	eor.w	r1, r1, #1
   d4b28:	6840      	ldr	r0, [r0, #4]
   d4b2a:	f7ff bc87 	b.w	d443c <network_listen>

000d4b2e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4b2e:	2300      	movs	r3, #0
   d4b30:	461a      	mov	r2, r3
   d4b32:	4619      	mov	r1, r3
   d4b34:	6840      	ldr	r0, [r0, #4]
   d4b36:	f7ff bc79 	b.w	d442c <network_off>

000d4b3a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4b3a:	2300      	movs	r3, #0
   d4b3c:	461a      	mov	r2, r3
   d4b3e:	4619      	mov	r1, r3
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	f7ff bc6b 	b.w	d441c <network_on>

000d4b46 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b46:	2200      	movs	r2, #0
   d4b48:	4611      	mov	r1, r2
   d4b4a:	6840      	ldr	r0, [r0, #4]
   d4b4c:	f7ff bc4e 	b.w	d43ec <network_connecting>

000d4b50 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b50:	2200      	movs	r2, #0
   d4b52:	2102      	movs	r1, #2
   d4b54:	6840      	ldr	r0, [r0, #4]
   d4b56:	f7ff bc51 	b.w	d43fc <network_disconnect>

000d4b5a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b5a:	2300      	movs	r3, #0
   d4b5c:	461a      	mov	r2, r3
   d4b5e:	6840      	ldr	r0, [r0, #4]
   d4b60:	f7ff bc3c 	b.w	d43dc <network_connect>

000d4b64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4b64:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4b66:	4c08      	ldr	r4, [pc, #32]	; (d4b88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4b68:	2528      	movs	r5, #40	; 0x28
   d4b6a:	462a      	mov	r2, r5
   d4b6c:	2100      	movs	r1, #0
   d4b6e:	4620      	mov	r0, r4
   d4b70:	f000 fb77 	bl	d5262 <memset>
        cid = -1;
   d4b74:	f04f 33ff 	mov.w	r3, #4294967295
   d4b78:	6063      	str	r3, [r4, #4]
   d4b7a:	4b04      	ldr	r3, [pc, #16]	; (d4b8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4b7c:	8025      	strh	r5, [r4, #0]
   d4b7e:	2204      	movs	r2, #4
   d4b80:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4b82:	4a03      	ldr	r2, [pc, #12]	; (d4b90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4b84:	601a      	str	r2, [r3, #0]
   d4b86:	bd38      	pop	{r3, r4, r5, pc}
   d4b88:	2003e408 	.word	0x2003e408
   d4b8c:	2003e400 	.word	0x2003e400
   d4b90:	000d54a0 	.word	0x000d54a0

000d4b94 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4b94:	4770      	bx	lr

000d4b96 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b96:	7441      	strb	r1, [r0, #17]
   d4b98:	4770      	bx	lr

000d4b9a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4b9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4b9c:	7c00      	ldrb	r0, [r0, #16]
   d4b9e:	f7ff fbb1 	bl	d4304 <HAL_USART_Available_Data_For_Write>
}
   d4ba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ba6:	bd08      	pop	{r3, pc}

000d4ba8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4ba8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4baa:	7c00      	ldrb	r0, [r0, #16]
   d4bac:	f7ff fb8a 	bl	d42c4 <HAL_USART_Available_Data>
}
   d4bb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4bb4:	bd08      	pop	{r3, pc}

000d4bb6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4bb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4bb8:	7c00      	ldrb	r0, [r0, #16]
   d4bba:	f7ff fb93 	bl	d42e4 <HAL_USART_Peek_Data>
}
   d4bbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4bc2:	bf28      	it	cs
   d4bc4:	f04f 30ff 	movcs.w	r0, #4294967295
   d4bc8:	bd08      	pop	{r3, pc}

000d4bca <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4bca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4bcc:	7c00      	ldrb	r0, [r0, #16]
   d4bce:	f7ff fb81 	bl	d42d4 <HAL_USART_Read_Data>
}
   d4bd2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4bd6:	bf28      	it	cs
   d4bd8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4bdc:	bd08      	pop	{r3, pc}

000d4bde <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4bde:	7c00      	ldrb	r0, [r0, #16]
   d4be0:	f7ff bb88 	b.w	d42f4 <HAL_USART_Flush_Data>

000d4be4 <_ZN11USARTSerialD0Ev>:
   d4be4:	b510      	push	{r4, lr}
   d4be6:	2114      	movs	r1, #20
   d4be8:	4604      	mov	r4, r0
   d4bea:	f000 f9d6 	bl	d4f9a <_ZdlPvj>
   d4bee:	4620      	mov	r0, r4
   d4bf0:	bd10      	pop	{r4, pc}

000d4bf2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4bf2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4bf4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4bf6:	4604      	mov	r4, r0
   d4bf8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4bfa:	b925      	cbnz	r5, d4c06 <_ZN11USARTSerial5writeEh+0x14>
   d4bfc:	7c00      	ldrb	r0, [r0, #16]
   d4bfe:	f7ff fb81 	bl	d4304 <HAL_USART_Available_Data_For_Write>
   d4c02:	2800      	cmp	r0, #0
   d4c04:	dd05      	ble.n	d4c12 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c06:	4631      	mov	r1, r6
   d4c08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c0e:	f7ff bb51 	b.w	d42b4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4c12:	4628      	mov	r0, r5
   d4c14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4c18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4c18:	b510      	push	{r4, lr}
   d4c1a:	4604      	mov	r4, r0
   d4c1c:	4608      	mov	r0, r1
   d4c1e:	4611      	mov	r1, r2
   d4c20:	2200      	movs	r2, #0
   d4c22:	6062      	str	r2, [r4, #4]
   d4c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c28:	60a2      	str	r2, [r4, #8]
   d4c2a:	4a05      	ldr	r2, [pc, #20]	; (d4c40 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4c2c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4c2e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4c30:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4c32:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4c34:	461a      	mov	r2, r3
   d4c36:	f7ff fb35 	bl	d42a4 <HAL_USART_Init>
}
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	bd10      	pop	{r4, pc}
   d4c3e:	bf00      	nop
   d4c40:	000d54d4 	.word	0x000d54d4

000d4c44 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d4c44:	2300      	movs	r3, #0
   d4c46:	7c00      	ldrb	r0, [r0, #16]
   d4c48:	f7ff bb64 	b.w	d4314 <HAL_USART_BeginConfig>

000d4c4c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d4c4c:	2200      	movs	r2, #0
   d4c4e:	f7ff bff9 	b.w	d4c44 <_ZN11USARTSerial5beginEmm>
	...

000d4c54 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4c54:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4c56:	4d0c      	ldr	r5, [pc, #48]	; (d4c88 <_Z22__fetch_global_Serial1v+0x34>)
   d4c58:	6829      	ldr	r1, [r5, #0]
   d4c5a:	f011 0401 	ands.w	r4, r1, #1
   d4c5e:	d111      	bne.n	d4c84 <_Z22__fetch_global_Serial1v+0x30>
   d4c60:	4628      	mov	r0, r5
   d4c62:	f7ff fa1c 	bl	d409e <__cxa_guard_acquire>
   d4c66:	b168      	cbz	r0, d4c84 <_Z22__fetch_global_Serial1v+0x30>
   d4c68:	4a08      	ldr	r2, [pc, #32]	; (d4c8c <_Z22__fetch_global_Serial1v+0x38>)
   d4c6a:	4b09      	ldr	r3, [pc, #36]	; (d4c90 <_Z22__fetch_global_Serial1v+0x3c>)
   d4c6c:	4809      	ldr	r0, [pc, #36]	; (d4c94 <_Z22__fetch_global_Serial1v+0x40>)
   d4c6e:	4621      	mov	r1, r4
   d4c70:	f7ff ffd2 	bl	d4c18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4c74:	4628      	mov	r0, r5
   d4c76:	f7ff fa17 	bl	d40a8 <__cxa_guard_release>
   d4c7a:	4a07      	ldr	r2, [pc, #28]	; (d4c98 <_Z22__fetch_global_Serial1v+0x44>)
   d4c7c:	4907      	ldr	r1, [pc, #28]	; (d4c9c <_Z22__fetch_global_Serial1v+0x48>)
   d4c7e:	4805      	ldr	r0, [pc, #20]	; (d4c94 <_Z22__fetch_global_Serial1v+0x40>)
   d4c80:	f000 f986 	bl	d4f90 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4c84:	4803      	ldr	r0, [pc, #12]	; (d4c94 <_Z22__fetch_global_Serial1v+0x40>)
   d4c86:	bd38      	pop	{r3, r4, r5, pc}
   d4c88:	2003e4c8 	.word	0x2003e4c8
   d4c8c:	2003e4cc 	.word	0x2003e4cc
   d4c90:	2003e444 	.word	0x2003e444
   d4c94:	2003e430 	.word	0x2003e430
   d4c98:	2003e388 	.word	0x2003e388
   d4c9c:	000d4b95 	.word	0x000d4b95

000d4ca0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	4611      	mov	r1, r2
   d4ca4:	6840      	ldr	r0, [r0, #4]
   d4ca6:	f7ff bbd1 	b.w	d444c <network_listening>

000d4caa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4caa:	2200      	movs	r2, #0
   d4cac:	4611      	mov	r1, r2
   d4cae:	6840      	ldr	r0, [r0, #4]
   d4cb0:	f7ff bbdc 	b.w	d446c <network_get_listen_timeout>

000d4cb4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4cb4:	2200      	movs	r2, #0
   d4cb6:	6840      	ldr	r0, [r0, #4]
   d4cb8:	f7ff bbd0 	b.w	d445c <network_set_listen_timeout>

000d4cbc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cbc:	2200      	movs	r2, #0
   d4cbe:	f081 0101 	eor.w	r1, r1, #1
   d4cc2:	6840      	ldr	r0, [r0, #4]
   d4cc4:	f7ff bbba 	b.w	d443c <network_listen>

000d4cc8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4cc8:	2300      	movs	r3, #0
   d4cca:	461a      	mov	r2, r3
   d4ccc:	2101      	movs	r1, #1
   d4cce:	6840      	ldr	r0, [r0, #4]
   d4cd0:	f7ff bbac 	b.w	d442c <network_off>

000d4cd4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4cd4:	2300      	movs	r3, #0
   d4cd6:	461a      	mov	r2, r3
   d4cd8:	4619      	mov	r1, r3
   d4cda:	6840      	ldr	r0, [r0, #4]
   d4cdc:	f7ff bb9e 	b.w	d441c <network_on>

000d4ce0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ce0:	2200      	movs	r2, #0
   d4ce2:	4611      	mov	r1, r2
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	f7ff bb91 	b.w	d440c <network_ready>

000d4cea <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cea:	2200      	movs	r2, #0
   d4cec:	4611      	mov	r1, r2
   d4cee:	6840      	ldr	r0, [r0, #4]
   d4cf0:	f7ff bb7c 	b.w	d43ec <network_connecting>

000d4cf4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cf4:	2200      	movs	r2, #0
   d4cf6:	2102      	movs	r1, #2
   d4cf8:	6840      	ldr	r0, [r0, #4]
   d4cfa:	f7ff bb7f 	b.w	d43fc <network_disconnect>

000d4cfe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cfe:	2300      	movs	r3, #0
   d4d00:	461a      	mov	r2, r3
   d4d02:	6840      	ldr	r0, [r0, #4]
   d4d04:	f7ff bb6a 	b.w	d43dc <network_connect>

000d4d08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4d08:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d0a:	4605      	mov	r5, r0
   d4d0c:	b188      	cbz	r0, d4d32 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d0e:	6804      	ldr	r4, [r0, #0]
   d4d10:	b14c      	cbz	r4, d4d26 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4d12:	68a3      	ldr	r3, [r4, #8]
   d4d14:	b11b      	cbz	r3, d4d1e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d16:	2203      	movs	r2, #3
   d4d18:	4621      	mov	r1, r4
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d1e:	2110      	movs	r1, #16
   d4d20:	4620      	mov	r0, r4
   d4d22:	f000 f93a 	bl	d4f9a <_ZdlPvj>
   d4d26:	4628      	mov	r0, r5
   d4d28:	2114      	movs	r1, #20
      }
   d4d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d2e:	f000 b934 	b.w	d4f9a <_ZdlPvj>
   d4d32:	bd38      	pop	{r3, r4, r5, pc}

000d4d34 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4d34:	b110      	cbz	r0, d4d3c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4d36:	6803      	ldr	r3, [r0, #0]
   d4d38:	685b      	ldr	r3, [r3, #4]
   d4d3a:	4718      	bx	r3
   d4d3c:	4770      	bx	lr

000d4d3e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4d3e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4d40:	6803      	ldr	r3, [r0, #0]
   d4d42:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4d44:	b1bb      	cbz	r3, d4d76 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4d46:	6858      	ldr	r0, [r3, #4]
   d4d48:	f7ff fa7c 	bl	d4244 <os_thread_is_current>
   d4d4c:	b978      	cbnz	r0, d4d6e <_ZN6ThreadD1Ev+0x30>
   d4d4e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4d50:	7c5a      	ldrb	r2, [r3, #17]
   d4d52:	b912      	cbnz	r2, d4d5a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4d54:	6858      	ldr	r0, [r3, #4]
   d4d56:	f7ff fa7d 	bl	d4254 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4d5a:	6823      	ldr	r3, [r4, #0]
   d4d5c:	6858      	ldr	r0, [r3, #4]
   d4d5e:	f7ff fa81 	bl	d4264 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d62:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4d64:	2300      	movs	r3, #0
   d4d66:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4d68:	b128      	cbz	r0, d4d76 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4d6a:	f7ff ffcd 	bl	d4d08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d6e:	6820      	ldr	r0, [r4, #0]
   d4d70:	b108      	cbz	r0, d4d76 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4d72:	f7ff ffc9 	bl	d4d08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4d76:	4620      	mov	r0, r4
   d4d78:	bd10      	pop	{r4, pc}
	...

000d4d7c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4d7c:	b538      	push	{r3, r4, r5, lr}
   d4d7e:	4b0c      	ldr	r3, [pc, #48]	; (d4db0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4d80:	6003      	str	r3, [r0, #0]
   d4d82:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d84:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4d88:	b108      	cbz	r0, d4d8e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4d8a:	f7ff f986 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4d8e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4d92:	b135      	cbz	r5, d4da2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d94:	4628      	mov	r0, r5
   d4d96:	f7ff ffd2 	bl	d4d3e <_ZN6ThreadD1Ev>
   d4d9a:	2104      	movs	r1, #4
   d4d9c:	4628      	mov	r0, r5
   d4d9e:	f000 f8fc 	bl	d4f9a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4da2:	68a0      	ldr	r0, [r4, #8]
   d4da4:	b108      	cbz	r0, d4daa <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4da6:	f7ff ffc5 	bl	d4d34 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4daa:	4620      	mov	r0, r4
   d4dac:	bd38      	pop	{r3, r4, r5, pc}
   d4dae:	bf00      	nop
   d4db0:	000d5504 	.word	0x000d5504

000d4db4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4db4:	b538      	push	{r3, r4, r5, lr}
   d4db6:	4c0e      	ldr	r4, [pc, #56]	; (d4df0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4db8:	4b0e      	ldr	r3, [pc, #56]	; (d4df4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4dba:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4dbc:	2500      	movs	r5, #0
   d4dbe:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4dc0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4dc4:	6063      	str	r3, [r4, #4]
   d4dc6:	60a5      	str	r5, [r4, #8]
   d4dc8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4dcc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4dd0:	f7ff fa58 	bl	d4284 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4dd4:	4b08      	ldr	r3, [pc, #32]	; (d4df8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4dd6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4dda:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4dde:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4de0:	4620      	mov	r0, r4
   d4de2:	4a06      	ldr	r2, [pc, #24]	; (d4dfc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4de4:	4906      	ldr	r1, [pc, #24]	; (d4e00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4dea:	f000 b8d1 	b.w	d4f90 <__aeabi_atexit>
   d4dee:	bf00      	nop
   d4df0:	2003e550 	.word	0x2003e550
   d4df4:	000d5538 	.word	0x000d5538
   d4df8:	000d5504 	.word	0x000d5504
   d4dfc:	2003e388 	.word	0x2003e388
   d4e00:	000d4d7d 	.word	0x000d4d7d

000d4e04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4e04:	2300      	movs	r3, #0
   d4e06:	461a      	mov	r2, r3
   d4e08:	6840      	ldr	r0, [r0, #4]
   d4e0a:	f7ff bae7 	b.w	d43dc <network_connect>

000d4e0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4e0e:	2200      	movs	r2, #0
   d4e10:	2102      	movs	r1, #2
   d4e12:	6840      	ldr	r0, [r0, #4]
   d4e14:	f7ff baf2 	b.w	d43fc <network_disconnect>

000d4e18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4e18:	2200      	movs	r2, #0
   d4e1a:	4611      	mov	r1, r2
   d4e1c:	6840      	ldr	r0, [r0, #4]
   d4e1e:	f7ff bae5 	b.w	d43ec <network_connecting>

000d4e22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4e22:	2200      	movs	r2, #0
   d4e24:	4611      	mov	r1, r2
   d4e26:	6840      	ldr	r0, [r0, #4]
   d4e28:	f7ff baf0 	b.w	d440c <network_ready>

000d4e2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4e2c:	2300      	movs	r3, #0
   d4e2e:	461a      	mov	r2, r3
   d4e30:	4619      	mov	r1, r3
   d4e32:	6840      	ldr	r0, [r0, #4]
   d4e34:	f7ff baf2 	b.w	d441c <network_on>

000d4e38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4e38:	2300      	movs	r3, #0
   d4e3a:	461a      	mov	r2, r3
   d4e3c:	4619      	mov	r1, r3
   d4e3e:	6840      	ldr	r0, [r0, #4]
   d4e40:	f7ff baf4 	b.w	d442c <network_off>

000d4e44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4e44:	2200      	movs	r2, #0
   d4e46:	f081 0101 	eor.w	r1, r1, #1
   d4e4a:	6840      	ldr	r0, [r0, #4]
   d4e4c:	f7ff baf6 	b.w	d443c <network_listen>

000d4e50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4e50:	2200      	movs	r2, #0
   d4e52:	6840      	ldr	r0, [r0, #4]
   d4e54:	f7ff bb02 	b.w	d445c <network_set_listen_timeout>

000d4e58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4e58:	2200      	movs	r2, #0
   d4e5a:	4611      	mov	r1, r2
   d4e5c:	6840      	ldr	r0, [r0, #4]
   d4e5e:	f7ff bb05 	b.w	d446c <network_get_listen_timeout>

000d4e62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e62:	2200      	movs	r2, #0
   d4e64:	4611      	mov	r1, r2
   d4e66:	6840      	ldr	r0, [r0, #4]
   d4e68:	f7ff baf0 	b.w	d444c <network_listening>

000d4e6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e70:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e72:	b095      	sub	sp, #84	; 0x54
   d4e74:	4616      	mov	r6, r2
   d4e76:	460d      	mov	r5, r1
   d4e78:	4607      	mov	r7, r0
    IPAddress addr;
   d4e7a:	f7ff fd7f 	bl	d497c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4e7e:	4621      	mov	r1, r4
   d4e80:	2220      	movs	r2, #32
   d4e82:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e84:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e86:	f000 f9ec 	bl	d5262 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e8a:	2340      	movs	r3, #64	; 0x40
   d4e8c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e8e:	4621      	mov	r1, r4
   d4e90:	466b      	mov	r3, sp
   d4e92:	aa0c      	add	r2, sp, #48	; 0x30
   d4e94:	4630      	mov	r0, r6
   d4e96:	f7ff f9ad 	bl	d41f4 <netdb_getaddrinfo>
    if (!r) {
   d4e9a:	4604      	mov	r4, r0
   d4e9c:	2800      	cmp	r0, #0
   d4e9e:	d144      	bne.n	d4f2a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ea0:	4602      	mov	r2, r0
   d4ea2:	2101      	movs	r1, #1
   d4ea4:	6868      	ldr	r0, [r5, #4]
   d4ea6:	f7ff fab1 	bl	d440c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eaa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4eac:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eae:	4622      	mov	r2, r4
   d4eb0:	6868      	ldr	r0, [r5, #4]
   d4eb2:	f7ff faab 	bl	d440c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eb6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eb8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4eba:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4ebc:	2e00      	cmp	r6, #0
   d4ebe:	d034      	beq.n	d4f2a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4ec0:	2900      	cmp	r1, #0
   d4ec2:	d132      	bne.n	d4f2a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4ec4:	6873      	ldr	r3, [r6, #4]
   d4ec6:	2b02      	cmp	r3, #2
   d4ec8:	d002      	beq.n	d4ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4eca:	2b0a      	cmp	r3, #10
   d4ecc:	d009      	beq.n	d4ee2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4ece:	e02a      	b.n	d4f26 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4ed0:	f1b8 0f00 	cmp.w	r8, #0
   d4ed4:	d027      	beq.n	d4f26 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4ed6:	6971      	ldr	r1, [r6, #20]
   d4ed8:	4638      	mov	r0, r7
   d4eda:	3104      	adds	r1, #4
   d4edc:	f7ff fd7b 	bl	d49d6 <_ZN9IPAddressaSEPKh>
   d4ee0:	e020      	b.n	d4f24 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ee2:	f1b9 0f00 	cmp.w	r9, #0
   d4ee6:	d01e      	beq.n	d4f26 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4ee8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4eea:	2211      	movs	r2, #17
   d4eec:	a801      	add	r0, sp, #4
   d4eee:	f000 f9b8 	bl	d5262 <memset>
                    a.v = 6;
   d4ef2:	2306      	movs	r3, #6
   d4ef4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4ef8:	ad01      	add	r5, sp, #4
   d4efa:	f104 0308 	add.w	r3, r4, #8
   d4efe:	3418      	adds	r4, #24
   d4f00:	6818      	ldr	r0, [r3, #0]
   d4f02:	6859      	ldr	r1, [r3, #4]
   d4f04:	462a      	mov	r2, r5
   d4f06:	c203      	stmia	r2!, {r0, r1}
   d4f08:	3308      	adds	r3, #8
   d4f0a:	42a3      	cmp	r3, r4
   d4f0c:	4615      	mov	r5, r2
   d4f0e:	d1f7      	bne.n	d4f00 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4f10:	a901      	add	r1, sp, #4
   d4f12:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4f14:	ad07      	add	r5, sp, #28
   d4f16:	f7ff fd3f 	bl	d4998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f1c:	1d3c      	adds	r4, r7, #4
   d4f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f20:	682b      	ldr	r3, [r5, #0]
   d4f22:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4f24:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f26:	69f6      	ldr	r6, [r6, #28]
   d4f28:	e7c8      	b.n	d4ebc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4f2a:	9800      	ldr	r0, [sp, #0]
   d4f2c:	f7ff f95a 	bl	d41e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4f30:	4638      	mov	r0, r7
   d4f32:	b015      	add	sp, #84	; 0x54
   d4f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f38 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4f38:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4f3a:	4a03      	ldr	r2, [pc, #12]	; (d4f48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4f3c:	601a      	str	r2, [r3, #0]
   d4f3e:	2200      	movs	r2, #0
   d4f40:	605a      	str	r2, [r3, #4]
   d4f42:	4770      	bx	lr
   d4f44:	2003e724 	.word	0x2003e724
   d4f48:	000d5538 	.word	0x000d5538

000d4f4c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4f4c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4f4e:	4c0c      	ldr	r4, [pc, #48]	; (d4f80 <_GLOBAL__sub_I_SPI+0x34>)
   d4f50:	4e0c      	ldr	r6, [pc, #48]	; (d4f84 <_GLOBAL__sub_I_SPI+0x38>)
   d4f52:	4d0d      	ldr	r5, [pc, #52]	; (d4f88 <_GLOBAL__sub_I_SPI+0x3c>)
   d4f54:	2100      	movs	r1, #0
   d4f56:	4620      	mov	r0, r4
   d4f58:	f7ff fb06 	bl	d4568 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4f5c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4f5e:	4c0b      	ldr	r4, [pc, #44]	; (d4f8c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4f60:	4632      	mov	r2, r6
   d4f62:	4629      	mov	r1, r5
   d4f64:	f000 f814 	bl	d4f90 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4f68:	2101      	movs	r1, #1
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f7ff fafc 	bl	d4568 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4f70:	4632      	mov	r2, r6
   d4f72:	4629      	mov	r1, r5
   d4f74:	4620      	mov	r0, r4
   d4f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4f7a:	f000 b809 	b.w	d4f90 <__aeabi_atexit>
   d4f7e:	bf00      	nop
   d4f80:	2003e72c 	.word	0x2003e72c
   d4f84:	2003e388 	.word	0x2003e388
   d4f88:	000d4559 	.word	0x000d4559
   d4f8c:	2003e73c 	.word	0x2003e73c

000d4f90 <__aeabi_atexit>:
   d4f90:	460b      	mov	r3, r1
   d4f92:	4601      	mov	r1, r0
   d4f94:	4618      	mov	r0, r3
   d4f96:	f000 b94b 	b.w	d5230 <__cxa_atexit>

000d4f9a <_ZdlPvj>:
   d4f9a:	f7ff b87c 	b.w	d4096 <_ZdlPv>
	...

000d4fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4fa0:	4b18      	ldr	r3, [pc, #96]	; (d5004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4fa2:	681a      	ldr	r2, [r3, #0]
   d4fa4:	07d1      	lsls	r1, r2, #31
   d4fa6:	bf5c      	itt	pl
   d4fa8:	2201      	movpl	r2, #1
   d4faa:	601a      	strpl	r2, [r3, #0]
   d4fac:	4b16      	ldr	r3, [pc, #88]	; (d5008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4fae:	681a      	ldr	r2, [r3, #0]
   d4fb0:	07d2      	lsls	r2, r2, #31
   d4fb2:	bf5c      	itt	pl
   d4fb4:	2201      	movpl	r2, #1
   d4fb6:	601a      	strpl	r2, [r3, #0]
   d4fb8:	4b14      	ldr	r3, [pc, #80]	; (d500c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4fba:	681a      	ldr	r2, [r3, #0]
   d4fbc:	07d0      	lsls	r0, r2, #31
   d4fbe:	bf5c      	itt	pl
   d4fc0:	2201      	movpl	r2, #1
   d4fc2:	601a      	strpl	r2, [r3, #0]
   d4fc4:	4b12      	ldr	r3, [pc, #72]	; (d5010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4fc6:	681a      	ldr	r2, [r3, #0]
   d4fc8:	07d1      	lsls	r1, r2, #31
   d4fca:	bf5c      	itt	pl
   d4fcc:	2201      	movpl	r2, #1
   d4fce:	601a      	strpl	r2, [r3, #0]
   d4fd0:	4b10      	ldr	r3, [pc, #64]	; (d5014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4fd2:	681a      	ldr	r2, [r3, #0]
   d4fd4:	07d2      	lsls	r2, r2, #31
   d4fd6:	bf5c      	itt	pl
   d4fd8:	2201      	movpl	r2, #1
   d4fda:	601a      	strpl	r2, [r3, #0]
   d4fdc:	4b0e      	ldr	r3, [pc, #56]	; (d5018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4fde:	681a      	ldr	r2, [r3, #0]
   d4fe0:	07d0      	lsls	r0, r2, #31
   d4fe2:	bf5c      	itt	pl
   d4fe4:	2201      	movpl	r2, #1
   d4fe6:	601a      	strpl	r2, [r3, #0]
   d4fe8:	4b0c      	ldr	r3, [pc, #48]	; (d501c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4fea:	681a      	ldr	r2, [r3, #0]
   d4fec:	07d1      	lsls	r1, r2, #31
   d4fee:	bf5c      	itt	pl
   d4ff0:	2201      	movpl	r2, #1
   d4ff2:	601a      	strpl	r2, [r3, #0]
   d4ff4:	4b0a      	ldr	r3, [pc, #40]	; (d5020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4ff6:	681a      	ldr	r2, [r3, #0]
   d4ff8:	07d2      	lsls	r2, r2, #31
   d4ffa:	bf5c      	itt	pl
   d4ffc:	2201      	movpl	r2, #1
   d4ffe:	601a      	strpl	r2, [r3, #0]
   d5000:	4770      	bx	lr
   d5002:	bf00      	nop
   d5004:	2003e76c 	.word	0x2003e76c
   d5008:	2003e768 	.word	0x2003e768
   d500c:	2003e764 	.word	0x2003e764
   d5010:	2003e760 	.word	0x2003e760
   d5014:	2003e75c 	.word	0x2003e75c
   d5018:	2003e758 	.word	0x2003e758
   d501c:	2003e754 	.word	0x2003e754
   d5020:	2003e750 	.word	0x2003e750

000d5024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5024:	4b24      	ldr	r3, [pc, #144]	; (d50b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5026:	681a      	ldr	r2, [r3, #0]
   d5028:	07d0      	lsls	r0, r2, #31
   d502a:	bf5c      	itt	pl
   d502c:	2201      	movpl	r2, #1
   d502e:	601a      	strpl	r2, [r3, #0]
   d5030:	4b22      	ldr	r3, [pc, #136]	; (d50bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5032:	681a      	ldr	r2, [r3, #0]
   d5034:	07d1      	lsls	r1, r2, #31
   d5036:	bf5c      	itt	pl
   d5038:	2201      	movpl	r2, #1
   d503a:	601a      	strpl	r2, [r3, #0]
   d503c:	4b20      	ldr	r3, [pc, #128]	; (d50c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d503e:	681a      	ldr	r2, [r3, #0]
   d5040:	07d2      	lsls	r2, r2, #31
   d5042:	bf5c      	itt	pl
   d5044:	2201      	movpl	r2, #1
   d5046:	601a      	strpl	r2, [r3, #0]
   d5048:	4b1e      	ldr	r3, [pc, #120]	; (d50c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d504a:	681a      	ldr	r2, [r3, #0]
   d504c:	07d0      	lsls	r0, r2, #31
   d504e:	bf5c      	itt	pl
   d5050:	2201      	movpl	r2, #1
   d5052:	601a      	strpl	r2, [r3, #0]
   d5054:	4b1c      	ldr	r3, [pc, #112]	; (d50c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5056:	681a      	ldr	r2, [r3, #0]
   d5058:	07d1      	lsls	r1, r2, #31
   d505a:	bf5c      	itt	pl
   d505c:	2201      	movpl	r2, #1
   d505e:	601a      	strpl	r2, [r3, #0]
   d5060:	4b1a      	ldr	r3, [pc, #104]	; (d50cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5062:	681a      	ldr	r2, [r3, #0]
   d5064:	07d2      	lsls	r2, r2, #31
   d5066:	bf5c      	itt	pl
   d5068:	2201      	movpl	r2, #1
   d506a:	601a      	strpl	r2, [r3, #0]
   d506c:	4b18      	ldr	r3, [pc, #96]	; (d50d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d506e:	681a      	ldr	r2, [r3, #0]
   d5070:	07d0      	lsls	r0, r2, #31
   d5072:	bf5c      	itt	pl
   d5074:	2201      	movpl	r2, #1
   d5076:	601a      	strpl	r2, [r3, #0]
   d5078:	4b16      	ldr	r3, [pc, #88]	; (d50d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d507a:	681a      	ldr	r2, [r3, #0]
   d507c:	07d1      	lsls	r1, r2, #31
   d507e:	bf5c      	itt	pl
   d5080:	2201      	movpl	r2, #1
   d5082:	601a      	strpl	r2, [r3, #0]
   d5084:	4b14      	ldr	r3, [pc, #80]	; (d50d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5086:	681a      	ldr	r2, [r3, #0]
   d5088:	07d2      	lsls	r2, r2, #31
   d508a:	bf5c      	itt	pl
   d508c:	2201      	movpl	r2, #1
   d508e:	601a      	strpl	r2, [r3, #0]
   d5090:	4b12      	ldr	r3, [pc, #72]	; (d50dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5092:	681a      	ldr	r2, [r3, #0]
   d5094:	07d0      	lsls	r0, r2, #31
   d5096:	bf5c      	itt	pl
   d5098:	2201      	movpl	r2, #1
   d509a:	601a      	strpl	r2, [r3, #0]
   d509c:	4b10      	ldr	r3, [pc, #64]	; (d50e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d509e:	681a      	ldr	r2, [r3, #0]
   d50a0:	07d1      	lsls	r1, r2, #31
   d50a2:	bf5c      	itt	pl
   d50a4:	2201      	movpl	r2, #1
   d50a6:	601a      	strpl	r2, [r3, #0]
   d50a8:	4b0e      	ldr	r3, [pc, #56]	; (d50e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d50aa:	681a      	ldr	r2, [r3, #0]
   d50ac:	07d2      	lsls	r2, r2, #31
   d50ae:	bf5c      	itt	pl
   d50b0:	2201      	movpl	r2, #1
   d50b2:	601a      	strpl	r2, [r3, #0]
   d50b4:	4770      	bx	lr
   d50b6:	bf00      	nop
   d50b8:	2003e79c 	.word	0x2003e79c
   d50bc:	2003e798 	.word	0x2003e798
   d50c0:	2003e794 	.word	0x2003e794
   d50c4:	2003e790 	.word	0x2003e790
   d50c8:	2003e78c 	.word	0x2003e78c
   d50cc:	2003e788 	.word	0x2003e788
   d50d0:	2003e784 	.word	0x2003e784
   d50d4:	2003e780 	.word	0x2003e780
   d50d8:	2003e77c 	.word	0x2003e77c
   d50dc:	2003e778 	.word	0x2003e778
   d50e0:	2003e774 	.word	0x2003e774
   d50e4:	2003e770 	.word	0x2003e770

000d50e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d50e8:	4b24      	ldr	r3, [pc, #144]	; (d517c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d50ea:	681a      	ldr	r2, [r3, #0]
   d50ec:	07d0      	lsls	r0, r2, #31
   d50ee:	bf5c      	itt	pl
   d50f0:	2201      	movpl	r2, #1
   d50f2:	601a      	strpl	r2, [r3, #0]
   d50f4:	4b22      	ldr	r3, [pc, #136]	; (d5180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d50f6:	681a      	ldr	r2, [r3, #0]
   d50f8:	07d1      	lsls	r1, r2, #31
   d50fa:	bf5c      	itt	pl
   d50fc:	2201      	movpl	r2, #1
   d50fe:	601a      	strpl	r2, [r3, #0]
   d5100:	4b20      	ldr	r3, [pc, #128]	; (d5184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5102:	681a      	ldr	r2, [r3, #0]
   d5104:	07d2      	lsls	r2, r2, #31
   d5106:	bf5c      	itt	pl
   d5108:	2201      	movpl	r2, #1
   d510a:	601a      	strpl	r2, [r3, #0]
   d510c:	4b1e      	ldr	r3, [pc, #120]	; (d5188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d510e:	681a      	ldr	r2, [r3, #0]
   d5110:	07d0      	lsls	r0, r2, #31
   d5112:	bf5c      	itt	pl
   d5114:	2201      	movpl	r2, #1
   d5116:	601a      	strpl	r2, [r3, #0]
   d5118:	4b1c      	ldr	r3, [pc, #112]	; (d518c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d511a:	681a      	ldr	r2, [r3, #0]
   d511c:	07d1      	lsls	r1, r2, #31
   d511e:	bf5c      	itt	pl
   d5120:	2201      	movpl	r2, #1
   d5122:	601a      	strpl	r2, [r3, #0]
   d5124:	4b1a      	ldr	r3, [pc, #104]	; (d5190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5126:	681a      	ldr	r2, [r3, #0]
   d5128:	07d2      	lsls	r2, r2, #31
   d512a:	bf5c      	itt	pl
   d512c:	2201      	movpl	r2, #1
   d512e:	601a      	strpl	r2, [r3, #0]
   d5130:	4b18      	ldr	r3, [pc, #96]	; (d5194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5132:	681a      	ldr	r2, [r3, #0]
   d5134:	07d0      	lsls	r0, r2, #31
   d5136:	bf5c      	itt	pl
   d5138:	2201      	movpl	r2, #1
   d513a:	601a      	strpl	r2, [r3, #0]
   d513c:	4b16      	ldr	r3, [pc, #88]	; (d5198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d513e:	681a      	ldr	r2, [r3, #0]
   d5140:	07d1      	lsls	r1, r2, #31
   d5142:	bf5c      	itt	pl
   d5144:	2201      	movpl	r2, #1
   d5146:	601a      	strpl	r2, [r3, #0]
   d5148:	4b14      	ldr	r3, [pc, #80]	; (d519c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d514a:	681a      	ldr	r2, [r3, #0]
   d514c:	07d2      	lsls	r2, r2, #31
   d514e:	bf5c      	itt	pl
   d5150:	2201      	movpl	r2, #1
   d5152:	601a      	strpl	r2, [r3, #0]
   d5154:	4b12      	ldr	r3, [pc, #72]	; (d51a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5156:	681a      	ldr	r2, [r3, #0]
   d5158:	07d0      	lsls	r0, r2, #31
   d515a:	bf5c      	itt	pl
   d515c:	2201      	movpl	r2, #1
   d515e:	601a      	strpl	r2, [r3, #0]
   d5160:	4b10      	ldr	r3, [pc, #64]	; (d51a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5162:	681a      	ldr	r2, [r3, #0]
   d5164:	07d1      	lsls	r1, r2, #31
   d5166:	bf5c      	itt	pl
   d5168:	2201      	movpl	r2, #1
   d516a:	601a      	strpl	r2, [r3, #0]
   d516c:	4b0e      	ldr	r3, [pc, #56]	; (d51a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d516e:	681a      	ldr	r2, [r3, #0]
   d5170:	07d2      	lsls	r2, r2, #31
   d5172:	bf5c      	itt	pl
   d5174:	2201      	movpl	r2, #1
   d5176:	601a      	strpl	r2, [r3, #0]
   d5178:	4770      	bx	lr
   d517a:	bf00      	nop
   d517c:	2003e7cc 	.word	0x2003e7cc
   d5180:	2003e7c8 	.word	0x2003e7c8
   d5184:	2003e7c4 	.word	0x2003e7c4
   d5188:	2003e7c0 	.word	0x2003e7c0
   d518c:	2003e7bc 	.word	0x2003e7bc
   d5190:	2003e7b8 	.word	0x2003e7b8
   d5194:	2003e7b4 	.word	0x2003e7b4
   d5198:	2003e7b0 	.word	0x2003e7b0
   d519c:	2003e7ac 	.word	0x2003e7ac
   d51a0:	2003e7a8 	.word	0x2003e7a8
   d51a4:	2003e7a4 	.word	0x2003e7a4
   d51a8:	2003e7a0 	.word	0x2003e7a0

000d51ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51ac:	4b18      	ldr	r3, [pc, #96]	; (d5210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51ae:	681a      	ldr	r2, [r3, #0]
   d51b0:	07d1      	lsls	r1, r2, #31
   d51b2:	bf5c      	itt	pl
   d51b4:	2201      	movpl	r2, #1
   d51b6:	601a      	strpl	r2, [r3, #0]
   d51b8:	4b16      	ldr	r3, [pc, #88]	; (d5214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51ba:	681a      	ldr	r2, [r3, #0]
   d51bc:	07d2      	lsls	r2, r2, #31
   d51be:	bf5c      	itt	pl
   d51c0:	2201      	movpl	r2, #1
   d51c2:	601a      	strpl	r2, [r3, #0]
   d51c4:	4b14      	ldr	r3, [pc, #80]	; (d5218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51c6:	681a      	ldr	r2, [r3, #0]
   d51c8:	07d0      	lsls	r0, r2, #31
   d51ca:	bf5c      	itt	pl
   d51cc:	2201      	movpl	r2, #1
   d51ce:	601a      	strpl	r2, [r3, #0]
   d51d0:	4b12      	ldr	r3, [pc, #72]	; (d521c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d51d2:	681a      	ldr	r2, [r3, #0]
   d51d4:	07d1      	lsls	r1, r2, #31
   d51d6:	bf5c      	itt	pl
   d51d8:	2201      	movpl	r2, #1
   d51da:	601a      	strpl	r2, [r3, #0]
   d51dc:	4b10      	ldr	r3, [pc, #64]	; (d5220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d51de:	681a      	ldr	r2, [r3, #0]
   d51e0:	07d2      	lsls	r2, r2, #31
   d51e2:	bf5c      	itt	pl
   d51e4:	2201      	movpl	r2, #1
   d51e6:	601a      	strpl	r2, [r3, #0]
   d51e8:	4b0e      	ldr	r3, [pc, #56]	; (d5224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d51ea:	681a      	ldr	r2, [r3, #0]
   d51ec:	07d0      	lsls	r0, r2, #31
   d51ee:	bf5c      	itt	pl
   d51f0:	2201      	movpl	r2, #1
   d51f2:	601a      	strpl	r2, [r3, #0]
   d51f4:	4b0c      	ldr	r3, [pc, #48]	; (d5228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d51f6:	681a      	ldr	r2, [r3, #0]
   d51f8:	07d1      	lsls	r1, r2, #31
   d51fa:	bf5c      	itt	pl
   d51fc:	2201      	movpl	r2, #1
   d51fe:	601a      	strpl	r2, [r3, #0]
   d5200:	4b0a      	ldr	r3, [pc, #40]	; (d522c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5202:	681a      	ldr	r2, [r3, #0]
   d5204:	07d2      	lsls	r2, r2, #31
   d5206:	bf5c      	itt	pl
   d5208:	2201      	movpl	r2, #1
   d520a:	601a      	strpl	r2, [r3, #0]
   d520c:	4770      	bx	lr
   d520e:	bf00      	nop
   d5210:	2003e7ec 	.word	0x2003e7ec
   d5214:	2003e7e8 	.word	0x2003e7e8
   d5218:	2003e7e4 	.word	0x2003e7e4
   d521c:	2003e7e0 	.word	0x2003e7e0
   d5220:	2003e7dc 	.word	0x2003e7dc
   d5224:	2003e7d8 	.word	0x2003e7d8
   d5228:	2003e7d4 	.word	0x2003e7d4
   d522c:	2003e7d0 	.word	0x2003e7d0

000d5230 <__cxa_atexit>:
   d5230:	b510      	push	{r4, lr}
   d5232:	4c05      	ldr	r4, [pc, #20]	; (d5248 <__cxa_atexit+0x18>)
   d5234:	4613      	mov	r3, r2
   d5236:	b12c      	cbz	r4, d5244 <__cxa_atexit+0x14>
   d5238:	460a      	mov	r2, r1
   d523a:	4601      	mov	r1, r0
   d523c:	2002      	movs	r0, #2
   d523e:	f3af 8000 	nop.w
   d5242:	bd10      	pop	{r4, pc}
   d5244:	4620      	mov	r0, r4
   d5246:	bd10      	pop	{r4, pc}
   d5248:	00000000 	.word	0x00000000

000d524c <memcpy>:
   d524c:	b510      	push	{r4, lr}
   d524e:	1e43      	subs	r3, r0, #1
   d5250:	440a      	add	r2, r1
   d5252:	4291      	cmp	r1, r2
   d5254:	d004      	beq.n	d5260 <memcpy+0x14>
   d5256:	f811 4b01 	ldrb.w	r4, [r1], #1
   d525a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d525e:	e7f8      	b.n	d5252 <memcpy+0x6>
   d5260:	bd10      	pop	{r4, pc}

000d5262 <memset>:
   d5262:	4402      	add	r2, r0
   d5264:	4603      	mov	r3, r0
   d5266:	4293      	cmp	r3, r2
   d5268:	d002      	beq.n	d5270 <memset+0xe>
   d526a:	f803 1b01 	strb.w	r1, [r3], #1
   d526e:	e7fa      	b.n	d5266 <memset+0x4>
   d5270:	4770      	bx	lr
	...

000d5274 <srand>:
   d5274:	b538      	push	{r3, r4, r5, lr}
   d5276:	4b12      	ldr	r3, [pc, #72]	; (d52c0 <srand+0x4c>)
   d5278:	681c      	ldr	r4, [r3, #0]
   d527a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d527c:	4605      	mov	r5, r0
   d527e:	b9d3      	cbnz	r3, d52b6 <srand+0x42>
   d5280:	2018      	movs	r0, #24
   d5282:	f7ff f913 	bl	d44ac <malloc>
   d5286:	f243 330e 	movw	r3, #13070	; 0x330e
   d528a:	63a0      	str	r0, [r4, #56]	; 0x38
   d528c:	8003      	strh	r3, [r0, #0]
   d528e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5292:	8043      	strh	r3, [r0, #2]
   d5294:	f241 2334 	movw	r3, #4660	; 0x1234
   d5298:	8083      	strh	r3, [r0, #4]
   d529a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d529e:	80c3      	strh	r3, [r0, #6]
   d52a0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d52a4:	8103      	strh	r3, [r0, #8]
   d52a6:	2305      	movs	r3, #5
   d52a8:	8143      	strh	r3, [r0, #10]
   d52aa:	230b      	movs	r3, #11
   d52ac:	8183      	strh	r3, [r0, #12]
   d52ae:	2201      	movs	r2, #1
   d52b0:	2300      	movs	r3, #0
   d52b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d52b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d52b8:	2200      	movs	r2, #0
   d52ba:	611d      	str	r5, [r3, #16]
   d52bc:	615a      	str	r2, [r3, #20]
   d52be:	bd38      	pop	{r3, r4, r5, pc}
   d52c0:	2003e384 	.word	0x2003e384

000d52c4 <strcpy>:
   d52c4:	4603      	mov	r3, r0
   d52c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d52ca:	f803 2b01 	strb.w	r2, [r3], #1
   d52ce:	2a00      	cmp	r2, #0
   d52d0:	d1f9      	bne.n	d52c6 <strcpy+0x2>
   d52d2:	4770      	bx	lr

000d52d4 <strlen>:
   d52d4:	4603      	mov	r3, r0
   d52d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d52da:	2a00      	cmp	r2, #0
   d52dc:	d1fb      	bne.n	d52d6 <strlen+0x2>
   d52de:	1a18      	subs	r0, r3, r0
   d52e0:	3801      	subs	r0, #1
   d52e2:	4770      	bx	lr

000d52e4 <dynalib_user>:
   d52e4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d52f4:	0000 0000 6572 7574 6e72 6156 756c 0065     ....returnValue.

000d5304 <_ZTVN5spark13EthernetClassE>:
	...
   d530c:	453b 000d 4531 000d 4527 000d 451d 000d     ;E..1E..'E...E..
   d531c:	4511 000d 4505 000d 44f9 000d 44f1 000d     .E...E...D...D..
   d532c:	44e7 000d 44dd 000d 4e6d 000d               .D...D..mN..

000d5338 <_ZTV8SPIClass>:
	...
   d5340:	4559 000d 455b 000d 6162 6475 5300 7265     YE..[E..baud.Ser
   d5350:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d5360:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d5370:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d5380:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d5390:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d53a0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d53b0:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d53c0:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d53d0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d53e0:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d53f0:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d5400:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d5410:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d5420:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d5430:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d5440:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d5450:	0065 0000                                   e...

000d5454 <_ZTV9IPAddress>:
	...
   d545c:	4919 000d 4909 000d 490b 000d               .I...I...I..

000d5468 <_ZTV9USBSerial>:
	...
   d5470:	49f1 000d 4a41 000d 4a4f 000d 46f5 000d     .I..AJ..OJ...F..
   d5480:	4a2d 000d 49f3 000d 4a09 000d 4a3b 000d     -J...I...J..;J..
   d5490:	4a1f 000d 49ed 000d                         .J...I..

000d5498 <_ZTVN5spark13CellularClassE>:
	...
   d54a0:	4b5b 000d 4b51 000d 4b47 000d 4afd 000d     [K..QK..GK...J..
   d54b0:	4b3b 000d 4b2f 000d 4b23 000d 4b1b 000d     ;K../K..#K...K..
   d54c0:	4b11 000d 4b07 000d 4e6d 000d               .K...K..mN..

000d54cc <_ZTV11USARTSerial>:
	...
   d54d4:	4b95 000d 4be5 000d 4bf3 000d 46f5 000d     .K...K...K...F..
   d54e4:	4ba9 000d 4bcb 000d 4bb7 000d 4bdf 000d     .K...K...K...K..
   d54f4:	4b97 000d 4b9b 000d                         .K...K..

000d54fc <_ZTVN5spark9MeshClassE>:
	...
   d5504:	4cff 000d 4cf5 000d 4ceb 000d 4ce1 000d     .L...L...L...L..
   d5514:	4cd5 000d 4cc9 000d 4cbd 000d 4cb5 000d     .L...L...L...L..
   d5524:	4cab 000d 4ca1 000d 4e6d 000d               .L...L..mN..

000d5530 <_ZTVN5spark12NetworkClassE>:
	...
   d5538:	4e05 000d 4e0f 000d 4e19 000d 4e23 000d     .N...N...N..#N..
   d5548:	4e2d 000d 4e39 000d 4e45 000d 4e51 000d     -N..9N..EN..QN..
   d5558:	4e59 000d 4e63 000d 4e6d 000d               YN..cN..mN..

000d5564 <__sf_fake_stdin>:
	...

000d5584 <__sf_fake_stdout>:
	...

000d55a4 <__sf_fake_stderr>:
	...
   d55c4:	0043                                        C.

000d55c6 <link_const_variable_data_end>:
	...

000d55c8 <link_constructors_location>:
   d55c8:	000d4199 	.word	0x000d4199
   d55cc:	000d4545 	.word	0x000d4545
   d55d0:	000d4591 	.word	0x000d4591
   d55d4:	000d46e5 	.word	0x000d46e5
   d55d8:	000d47d1 	.word	0x000d47d1
   d55dc:	000d47e1 	.word	0x000d47e1
   d55e0:	000d4819 	.word	0x000d4819
   d55e4:	000d4b65 	.word	0x000d4b65
   d55e8:	000d4db5 	.word	0x000d4db5
   d55ec:	000d4f39 	.word	0x000d4f39
   d55f0:	000d4f4d 	.word	0x000d4f4d
   d55f4:	000d4fa1 	.word	0x000d4fa1
   d55f8:	000d5025 	.word	0x000d5025
   d55fc:	000d50e9 	.word	0x000d50e9
   d5600:	000d51ad 	.word	0x000d51ad

000d5604 <link_constructors_end>:
	...
