
c:/Users/kendr/OneDrive/Documents/GitHub/Particle/FirstProject/target/1.4.4/boron/FirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001974  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00015a2c  2**0
                  CONTENTS
  4 .data         00000070  2003e300  000d5990  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000480  2003e370  2003e370  0001e370  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5a00  000d5a00  00015a00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5a28  000d5a28  00015a28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d1eef  00000000  00000000  00015a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000106e4  00000000  00000000  000e791b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e4bf  00000000  00000000  000f7fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024c8  00000000  00000000  001164be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004648  00000000  00000000  00118986  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033ec6  00000000  00000000  0011cfce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000272f4  00000000  00000000  00150e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101308  00000000  00000000  00178188  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cbc8  00000000  00000000  00279490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fab1 	bl	d5594 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fab6 	bl	d55aa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e300 	.word	0x2003e300
   d4048:	000d5990 	.word	0x000d5990
   d404c:	2003e370 	.word	0x2003e370
   d4050:	2003e370 	.word	0x2003e370
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fcff 	bl	d4a5c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5990 	.word	0x000d5990
   d4080:	000d5954 	.word	0x000d5954

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83a 	b.w	d40fc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f87b 	bl	d4184 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bcb1 	b.w	d49f8 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bab3 	b.w	d4600 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bab1 	b.w	d4600 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40ae:	6810      	ldr	r0, [r2, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z9ledToggle6String>:


// We're going to have a super cool function now that gets called when a matching API request is sent
// This is the ledToggle function we registered to the "led" Particle.function earlier.

int ledToggle(String command) {
   d40b4:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	490e      	ldr	r1, [pc, #56]	; (d40f0 <_Z9ledToggle6String+0x3c>)
   d40b8:	4605      	mov	r5, r0
   d40ba:	f000 fbc4 	bl	d4846 <_ZNK6String6equalsEPKc>
    Then, the function returns a value to us to let us know what happened.
    In this case, it will return 1 for the LEDs turning on, 0 for the LEDs turning off,
    and -1 if we received a totally bogus command that didn't do anything to the LEDs.
    */

    if (command=="on") {
   d40be:	4604      	mov	r4, r0
   d40c0:	b130      	cbz	r0, d40d0 <_Z9ledToggle6String+0x1c>
        digitalWrite(led1,HIGH);
   d40c2:	4b0c      	ldr	r3, [pc, #48]	; (d40f4 <_Z9ledToggle6String+0x40>)
   d40c4:	2101      	movs	r1, #1
   d40c6:	8818      	ldrh	r0, [r3, #0]
   d40c8:	f001 f8ab 	bl	d5222 <digitalWrite>
   d40cc:	2001      	movs	r0, #1
   d40ce:	bd38      	pop	{r3, r4, r5, pc}
   d40d0:	4909      	ldr	r1, [pc, #36]	; (d40f8 <_Z9ledToggle6String+0x44>)
   d40d2:	4628      	mov	r0, r5
   d40d4:	f000 fbb7 	bl	d4846 <_ZNK6String6equalsEPKc>
        //digitalWrite(led2,HIGH);
        return 1;
    }
    else if (command=="off") {
   d40d8:	b130      	cbz	r0, d40e8 <_Z9ledToggle6String+0x34>
        digitalWrite(led1,LOW);
   d40da:	4b06      	ldr	r3, [pc, #24]	; (d40f4 <_Z9ledToggle6String+0x40>)
   d40dc:	4621      	mov	r1, r4
   d40de:	8818      	ldrh	r0, [r3, #0]
   d40e0:	f001 f89f 	bl	d5222 <digitalWrite>
        //digitalWrite(led2,LOW);
        return 0;
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd38      	pop	{r3, r4, r5, pc}
    }
    else {
        return -1;
   d40e8:	f04f 30ff 	mov.w	r0, #4294967295
    }
   d40ec:	bd38      	pop	{r3, r4, r5, pc}
   d40ee:	bf00      	nop
   d40f0:	000d5654 	.word	0x000d5654
   d40f4:	2003e304 	.word	0x2003e304
   d40f8:	000d5657 	.word	0x000d5657

000d40fc <setup>:
char letter;

int ledToggle(String command); // Forward declaration

// setup() runs once, when the device is first turned on.
void setup() {
   d40fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d40fe:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4100:	466a      	mov	r2, sp
   d4102:	4618      	mov	r0, r3
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4104:	2401      	movs	r4, #1

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4106:	2508      	movs	r5, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4108:	4916      	ldr	r1, [pc, #88]	; (d4164 <setup+0x68>)
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d410a:	9300      	str	r3, [sp, #0]
    Serial.begin();
    Serial1.begin(9600);


	// Put initialization like pinMode and begin functions here.
	pinMode(led1, OUTPUT);
   d410c:	4e16      	ldr	r6, [pc, #88]	; (d4168 <setup+0x6c>)
        conn_prop.size = sizeof(conn_prop);
   d410e:	f8ad 5000 	strh.w	r5, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4112:	9401      	str	r4, [sp, #4]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4114:	f000 fa5c 	bl	d45d0 <spark_set_connection_property>
void setup() {
    // Set the keep-alive value for 3rd party SIM card here
    Particle.keepAlive(120);

	// This is here to allow for debugging using the USB serial port
    Serial.begin();
   d4118:	f000 fdbc 	bl	d4c94 <_Z16_fetch_usbserialv>
   d411c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4120:	f000 fdac 	bl	d4c7c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
   d4124:	f000 fe8a 	bl	d4e3c <_Z22__fetch_global_Serial1v>
   d4128:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d412c:	f000 fe80 	bl	d4e30 <_ZN11USARTSerial5beginEm>


	// Put initialization like pinMode and begin functions here.
	pinMode(led1, OUTPUT);
   d4130:	4621      	mov	r1, r4
   d4132:	8830      	ldrh	r0, [r6, #0]
   d4134:	f001 f864 	bl	d5200 <pinMode>
	//pinMode(led2, OUTPUT);

	digitalWrite(led1, HIGH);
   d4138:	4621      	mov	r1, r4
   d413a:	8830      	ldrh	r0, [r6, #0]
   d413c:	f001 f871 	bl	d5222 <digitalWrite>
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
   d4140:	4b0a      	ldr	r3, [pc, #40]	; (d416c <setup+0x70>)
   d4142:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d4144:	2204      	movs	r2, #4
   d4146:	466b      	mov	r3, sp
   d4148:	4909      	ldr	r1, [pc, #36]	; (d4170 <setup+0x74>)
   d414a:	480a      	ldr	r0, [pc, #40]	; (d4174 <setup+0x78>)

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d414c:	f8ad 5000 	strh.w	r5, [sp]
        extra.update = update_string_variable;
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d4150:	f000 fa2e 	bl	d45b0 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4154:	4a08      	ldr	r2, [pc, #32]	; (d4178 <setup+0x7c>)
   d4156:	4909      	ldr	r1, [pc, #36]	; (d417c <setup+0x80>)
   d4158:	4809      	ldr	r0, [pc, #36]	; (d4180 <setup+0x84>)
   d415a:	f000 fcaf 	bl	d4abc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    //Particle.function("retrieve",getValue);

	// For good measure, let's also make sure both LEDs are off when we start:
	// digitalWrite(led1, LOW);
	// digitalWrite(led2, LOW);
	}
   d415e:	b002      	add	sp, #8
   d4160:	bd70      	pop	{r4, r5, r6, pc}
   d4162:	bf00      	nop
   d4164:	0001d4c0 	.word	0x0001d4c0
   d4168:	2003e304 	.word	0x2003e304
   d416c:	000d40af 	.word	0x000d40af
   d4170:	2003e384 	.word	0x2003e384
   d4174:	000d565b 	.word	0x000d565b
   d4178:	000d5667 	.word	0x000d5667
   d417c:	000d40b5 	.word	0x000d40b5
   d4180:	000d4a91 	.word	0x000d4a91

000d4184 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4184:	b538      	push	{r3, r4, r5, lr}

	// And repeat!
	*/

    // check to see what the value of the photoresistor or phototransistor is and store it in the int variable analogvalue
    if (Serial1.available() > 0) {
   d4186:	f000 fe59 	bl	d4e3c <_Z22__fetch_global_Serial1v>
   d418a:	6803      	ldr	r3, [r0, #0]
   d418c:	691b      	ldr	r3, [r3, #16]
   d418e:	4798      	blx	r3
   d4190:	2800      	cmp	r0, #0
   d4192:	dd27      	ble.n	d41e4 <loop+0x60>
        incomingByte = Serial1.read();
   d4194:	f000 fe52 	bl	d4e3c <_Z22__fetch_global_Serial1v>
   d4198:	6803      	ldr	r3, [r0, #0]
   d419a:	4c15      	ldr	r4, [pc, #84]	; (d41f0 <loop+0x6c>)
   d419c:	695b      	ldr	r3, [r3, #20]
   d419e:	4798      	blx	r3
   d41a0:	4b14      	ldr	r3, [pc, #80]	; (d41f4 <loop+0x70>)
        letter = incomingByte;
   d41a2:	b2c1      	uxtb	r1, r0
	// And repeat!
	*/

    // check to see what the value of the photoresistor or phototransistor is and store it in the int variable analogvalue
    if (Serial1.available() > 0) {
        incomingByte = Serial1.read();
   d41a4:	6018      	str	r0, [r3, #0]
        letter = incomingByte;
   d41a6:	4b14      	ldr	r3, [pc, #80]	; (d41f8 <loop+0x74>)
        if (letter == '\n' || count >= maxlimit) {
   d41a8:	290a      	cmp	r1, #10
	*/

    // check to see what the value of the photoresistor or phototransistor is and store it in the int variable analogvalue
    if (Serial1.available() > 0) {
        incomingByte = Serial1.read();
        letter = incomingByte;
   d41aa:	7019      	strb	r1, [r3, #0]
        if (letter == '\n' || count >= maxlimit) {
   d41ac:	d004      	beq.n	d41b8 <loop+0x34>
   d41ae:	4a13      	ldr	r2, [pc, #76]	; (d41fc <loop+0x78>)
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	6812      	ldr	r2, [r2, #0]
   d41b4:	4293      	cmp	r3, r2
   d41b6:	db10      	blt.n	d41da <loop+0x56>
            value = word;
   d41b8:	4d11      	ldr	r5, [pc, #68]	; (d4200 <loop+0x7c>)
   d41ba:	4912      	ldr	r1, [pc, #72]	; (d4204 <loop+0x80>)
   d41bc:	4628      	mov	r0, r5
   d41be:	f000 faf3 	bl	d47a8 <_ZN6StringaSERKS_>
            Serial.println(value);
   d41c2:	f000 fd67 	bl	d4c94 <_Z16_fetch_usbserialv>
   d41c6:	6829      	ldr	r1, [r5, #0]
   d41c8:	f000 fb8d 	bl	d48e6 <_ZN5Print7printlnEPKc>
            word = "";
   d41cc:	490e      	ldr	r1, [pc, #56]	; (d4208 <loop+0x84>)
   d41ce:	480d      	ldr	r0, [pc, #52]	; (d4204 <loop+0x80>)
   d41d0:	f000 fb04 	bl	d47dc <_ZN6StringaSEPKc>
            count = 0;
   d41d4:	2300      	movs	r3, #0
   d41d6:	6023      	str	r3, [r4, #0]
   d41d8:	e004      	b.n	d41e4 <loop+0x60>
        }
        else {
            count++;
   d41da:	3301      	adds	r3, #1

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d41dc:	4809      	ldr	r0, [pc, #36]	; (d4204 <loop+0x80>)
   d41de:	6023      	str	r3, [r4, #0]
   d41e0:	f000 fb24 	bl	d482c <_ZN6String6concatEc>
            word += letter;
        }

    }
	delay(10);
   d41e4:	200a      	movs	r0, #10
}
   d41e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            count++;
            word += letter;
        }

    }
	delay(10);
   d41ea:	f000 bbc7 	b.w	d497c <delay>
   d41ee:	bf00      	nop
   d41f0:	2003e398 	.word	0x2003e398
   d41f4:	2003e39c 	.word	0x2003e39c
   d41f8:	2003e394 	.word	0x2003e394
   d41fc:	2003e300 	.word	0x2003e300
   d4200:	2003e384 	.word	0x2003e384
   d4204:	2003e374 	.word	0x2003e374
   d4208:	000d5757 	.word	0x000d5757

000d420c <_GLOBAL__sub_I_led1>:
        return 0;
    }
    else {
        return -1;
    }
   d420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

int led1 = D6;
//int led2 = D7;

//int photosensor = A0; // This is where your photoresistor or phototransistor is plugged in. The other side goes to the "power" pin (below).
String word = "";
   d420e:	4f0d      	ldr	r7, [pc, #52]	; (d4244 <_GLOBAL__sub_I_led1+0x38>)
   d4210:	4c0d      	ldr	r4, [pc, #52]	; (d4248 <_GLOBAL__sub_I_led1+0x3c>)
   d4212:	4e0e      	ldr	r6, [pc, #56]	; (d424c <_GLOBAL__sub_I_led1+0x40>)
   d4214:	4d0e      	ldr	r5, [pc, #56]	; (d4250 <_GLOBAL__sub_I_led1+0x44>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4216:	f000 f82f 	bl	d4278 <HAL_Pin_Map>
   d421a:	4639      	mov	r1, r7
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fab0 	bl	d4782 <_ZN6StringC1EPK19__FlashStringHelper>
   d4222:	4620      	mov	r0, r4
String value = "";
   d4224:	4c0b      	ldr	r4, [pc, #44]	; (d4254 <_GLOBAL__sub_I_led1+0x48>)

int led1 = D6;
//int led2 = D7;

//int photosensor = A0; // This is where your photoresistor or phototransistor is plugged in. The other side goes to the "power" pin (below).
String word = "";
   d4226:	4632      	mov	r2, r6
   d4228:	4629      	mov	r1, r5
   d422a:	f001 f855 	bl	d52d8 <__aeabi_atexit>
String value = "";
   d422e:	4639      	mov	r1, r7
   d4230:	4620      	mov	r0, r4
   d4232:	f000 faa6 	bl	d4782 <_ZN6StringC1EPK19__FlashStringHelper>
   d4236:	4632      	mov	r2, r6
   d4238:	4629      	mov	r1, r5
   d423a:	4620      	mov	r0, r4
        return 0;
    }
    else {
        return -1;
    }
   d423c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int led1 = D6;
//int led2 = D7;

//int photosensor = A0; // This is where your photoresistor or phototransistor is plugged in. The other side goes to the "power" pin (below).
String word = "";
String value = "";
   d4240:	f001 b84a 	b.w	d52d8 <__aeabi_atexit>
   d4244:	000d5757 	.word	0x000d5757
   d4248:	2003e374 	.word	0x2003e374
   d424c:	2003e370 	.word	0x2003e370
   d4250:	000d46f5 	.word	0x000d46f5
   d4254:	2003e384 	.word	0x2003e384

000d4258 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <netdb_freeaddrinfo+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	689b      	ldr	r3, [r3, #8]
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	00030268 	.word	0x00030268

000d4268 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <netdb_getaddrinfo+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	68db      	ldr	r3, [r3, #12]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	00030268 	.word	0x00030268

000d4278 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <HAL_Pin_Map+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	681b      	ldr	r3, [r3, #0]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	0003022c 	.word	0x0003022c

000d4288 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <HAL_Pin_Mode+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	689b      	ldr	r3, [r3, #8]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	0003022c 	.word	0x0003022c

000d4298 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <HAL_Get_Pin_Mode+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	68db      	ldr	r3, [r3, #12]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	0003022c 	.word	0x0003022c

000d42a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <HAL_GPIO_Write+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	691b      	ldr	r3, [r3, #16]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	0003022c 	.word	0x0003022c

000d42b8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <HAL_SPI_Init+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	69db      	ldr	r3, [r3, #28]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030230 	.word	0x00030230

000d42c8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <HAL_SPI_Is_Enabled+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	6a1b      	ldr	r3, [r3, #32]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030230 	.word	0x00030230

000d42d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <HAL_RNG_GetRandomNumber+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	685b      	ldr	r3, [r3, #4]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030218 	.word	0x00030218

000d42e8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	695b      	ldr	r3, [r3, #20]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030218 	.word	0x00030218

000d42f8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <os_thread_is_current+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	689b      	ldr	r3, [r3, #8]
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030248 	.word	0x00030248

000d4308 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <os_thread_join+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	691b      	ldr	r3, [r3, #16]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030248 	.word	0x00030248

000d4318 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <os_thread_cleanup+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	695b      	ldr	r3, [r3, #20]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030248 	.word	0x00030248

000d4328 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <os_mutex_create+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030248 	.word	0x00030248

000d4338 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <os_mutex_recursive_create+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030248 	.word	0x00030248

000d4348 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <inet_inet_ntop+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	695b      	ldr	r3, [r3, #20]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030264 	.word	0x00030264

000d4358 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_USART_Init+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	681b      	ldr	r3, [r3, #0]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	0003023c 	.word	0x0003023c

000d4368 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_USART_Write_Data+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	68db      	ldr	r3, [r3, #12]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	0003023c 	.word	0x0003023c

000d4378 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_USART_Available_Data+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	691b      	ldr	r3, [r3, #16]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003023c 	.word	0x0003023c

000d4388 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_USART_Read_Data+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	695b      	ldr	r3, [r3, #20]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003023c 	.word	0x0003023c

000d4398 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_USART_Peek_Data+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	699b      	ldr	r3, [r3, #24]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003023c 	.word	0x0003023c

000d43a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_USART_Flush_Data+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	69db      	ldr	r3, [r3, #28]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003023c 	.word	0x0003023c

000d43b8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_USART_Is_Enabled+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6a1b      	ldr	r3, [r3, #32]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003023c 	.word	0x0003023c

000d43c8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_USART_Available_Data_For_Write+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003023c 	.word	0x0003023c

000d43d8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_USART_BeginConfig+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003023c 	.word	0x0003023c

000d43e8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_I2C_Write_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	6a1b      	ldr	r3, [r3, #32]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030228 	.word	0x00030228

000d43f8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_I2C_Available_Data+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030228 	.word	0x00030228

000d4408 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_I2C_Read_Data+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030228 	.word	0x00030228

000d4418 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_I2C_Peek_Data+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030228 	.word	0x00030228

000d4428 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_I2C_Flush_Data+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030228 	.word	0x00030228

000d4438 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_I2C_Is_Enabled+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030228 	.word	0x00030228

000d4448 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_I2C_Init+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030228 	.word	0x00030228

000d4458 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USB_USART_Init+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	681b      	ldr	r3, [r3, #0]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003024c 	.word	0x0003024c

000d4468 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USB_USART_Begin+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	685b      	ldr	r3, [r3, #4]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003024c 	.word	0x0003024c

000d4478 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_USB_USART_Available_Data+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	691b      	ldr	r3, [r3, #16]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003024c 	.word	0x0003024c

000d4488 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	0003024c 	.word	0x0003024c

000d4498 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <HAL_USB_USART_Receive_Data+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	699b      	ldr	r3, [r3, #24]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	0003024c 	.word	0x0003024c

000d44a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <HAL_USB_USART_Send_Data+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	69db      	ldr	r3, [r3, #28]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003024c 	.word	0x0003024c

000d44b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_USB_USART_Flush_Data+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6a1b      	ldr	r3, [r3, #32]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003024c 	.word	0x0003024c

000d44c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <set_system_mode+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	685b      	ldr	r3, [r3, #4]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030220 	.word	0x00030220

000d44d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <system_delay_ms+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	695b      	ldr	r3, [r3, #20]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030220 	.word	0x00030220

000d44e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b03      	ldr	r3, [pc, #12]	; (d44f8 <system_ctrl_set_app_request_handler+0x10>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44f2:	9301      	str	r3, [sp, #4]
   d44f4:	bd08      	pop	{r3, pc}
   d44f6:	0000      	.short	0x0000
   d44f8:	00030220 	.word	0x00030220

000d44fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b03      	ldr	r3, [pc, #12]	; (d450c <system_ctrl_set_result+0x10>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4506:	9301      	str	r3, [sp, #4]
   d4508:	bd08      	pop	{r3, pc}
   d450a:	0000      	.short	0x0000
   d450c:	00030220 	.word	0x00030220

000d4510 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <network_connect+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	685b      	ldr	r3, [r3, #4]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030240 	.word	0x00030240

000d4520 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_connecting+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	689b      	ldr	r3, [r3, #8]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <network_disconnect+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	68db      	ldr	r3, [r3, #12]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030240 	.word	0x00030240

000d4540 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <network_ready+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	691b      	ldr	r3, [r3, #16]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030240 	.word	0x00030240

000d4550 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <network_on+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	695b      	ldr	r3, [r3, #20]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030240 	.word	0x00030240

000d4560 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <network_off+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	699b      	ldr	r3, [r3, #24]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030240 	.word	0x00030240

000d4570 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <network_listen+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	69db      	ldr	r3, [r3, #28]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030240 	.word	0x00030240

000d4580 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <network_listening+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6a1b      	ldr	r3, [r3, #32]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030240 	.word	0x00030240

000d4590 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_set_listen_timeout+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_get_listen_timeout+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <spark_variable+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	681b      	ldr	r3, [r3, #0]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030244 	.word	0x00030244

000d45c0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <spark_function+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	685b      	ldr	r3, [r3, #4]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030244 	.word	0x00030244

000d45d0 <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <spark_set_connection_property+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030244 	.word	0x00030244

000d45e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <spark_set_random_seed_from_cloud_handler+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030244 	.word	0x00030244

000d45f0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <malloc+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	681b      	ldr	r3, [r3, #0]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003021c 	.word	0x0003021c

000d4600 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <free+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	685b      	ldr	r3, [r3, #4]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003021c 	.word	0x0003021c

000d4610 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <realloc+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	689b      	ldr	r3, [r3, #8]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003021c 	.word	0x0003021c

000d4620 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4620:	2200      	movs	r2, #0
   d4622:	4611      	mov	r1, r2
   d4624:	6840      	ldr	r0, [r0, #4]
   d4626:	f7ff bfab 	b.w	d4580 <network_listening>

000d462a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d462a:	2200      	movs	r2, #0
   d462c:	4611      	mov	r1, r2
   d462e:	6840      	ldr	r0, [r0, #4]
   d4630:	f7ff bfb6 	b.w	d45a0 <network_get_listen_timeout>

000d4634 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4634:	2200      	movs	r2, #0
   d4636:	6840      	ldr	r0, [r0, #4]
   d4638:	f7ff bfaa 	b.w	d4590 <network_set_listen_timeout>

000d463c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d463c:	2200      	movs	r2, #0
   d463e:	f081 0101 	eor.w	r1, r1, #1
   d4642:	6840      	ldr	r0, [r0, #4]
   d4644:	f7ff bf94 	b.w	d4570 <network_listen>

000d4648 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4648:	2300      	movs	r3, #0
   d464a:	461a      	mov	r2, r3
   d464c:	4619      	mov	r1, r3
   d464e:	6840      	ldr	r0, [r0, #4]
   d4650:	f7ff bf86 	b.w	d4560 <network_off>

000d4654 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4654:	2300      	movs	r3, #0
   d4656:	461a      	mov	r2, r3
   d4658:	4619      	mov	r1, r3
   d465a:	6840      	ldr	r0, [r0, #4]
   d465c:	f7ff bf78 	b.w	d4550 <network_on>

000d4660 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4660:	2200      	movs	r2, #0
   d4662:	4611      	mov	r1, r2
   d4664:	6840      	ldr	r0, [r0, #4]
   d4666:	f7ff bf6b 	b.w	d4540 <network_ready>

000d466a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d466a:	2200      	movs	r2, #0
   d466c:	4611      	mov	r1, r2
   d466e:	6840      	ldr	r0, [r0, #4]
   d4670:	f7ff bf56 	b.w	d4520 <network_connecting>

000d4674 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4674:	2200      	movs	r2, #0
   d4676:	2102      	movs	r1, #2
   d4678:	6840      	ldr	r0, [r0, #4]
   d467a:	f7ff bf59 	b.w	d4530 <network_disconnect>

000d467e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d467e:	2300      	movs	r3, #0
   d4680:	461a      	mov	r2, r3
   d4682:	6840      	ldr	r0, [r0, #4]
   d4684:	f7ff bf44 	b.w	d4510 <network_connect>

000d4688 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4688:	4b02      	ldr	r3, [pc, #8]	; (d4694 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d468a:	2203      	movs	r2, #3
   d468c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d468e:	4a02      	ldr	r2, [pc, #8]	; (d4698 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4690:	601a      	str	r2, [r3, #0]
   d4692:	4770      	bx	lr
   d4694:	2003e3a0 	.word	0x2003e3a0
   d4698:	000d5674 	.word	0x000d5674

000d469c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d469c:	4770      	bx	lr

000d469e <_ZN8SPIClassD0Ev>:
   d469e:	b510      	push	{r4, lr}
   d46a0:	2110      	movs	r1, #16
   d46a2:	4604      	mov	r4, r0
   d46a4:	f000 fe1d 	bl	d52e2 <_ZdlPvj>
   d46a8:	4620      	mov	r0, r4
   d46aa:	bd10      	pop	{r4, pc}

000d46ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d46ac:	b570      	push	{r4, r5, r6, lr}
   d46ae:	4b08      	ldr	r3, [pc, #32]	; (d46d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d46b0:	6003      	str	r3, [r0, #0]
   d46b2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d46b4:	2500      	movs	r5, #0
   d46b6:	460e      	mov	r6, r1
   d46b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d46bc:	f7ff fe34 	bl	d4328 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d46c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d46c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d46c4:	f7ff fdf8 	bl	d42b8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d46c8:	60a5      	str	r5, [r4, #8]
}
   d46ca:	4620      	mov	r0, r4
   d46cc:	bd70      	pop	{r4, r5, r6, pc}
   d46ce:	bf00      	nop
   d46d0:	000d56a8 	.word	0x000d56a8

000d46d4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d46d4:	7900      	ldrb	r0, [r0, #4]
   d46d6:	f7ff bdf7 	b.w	d42c8 <HAL_SPI_Is_Enabled>
	...

000d46dc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d46dc:	4b04      	ldr	r3, [pc, #16]	; (d46f0 <_GLOBAL__sub_I_System+0x14>)
   d46de:	2000      	movs	r0, #0
   d46e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d46e4:	7018      	strb	r0, [r3, #0]
   d46e6:	8058      	strh	r0, [r3, #2]
   d46e8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46ea:	f7ff beed 	b.w	d44c8 <set_system_mode>
   d46ee:	bf00      	nop
   d46f0:	2003e3a8 	.word	0x2003e3a8

000d46f4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d46f4:	b510      	push	{r4, lr}
   d46f6:	4604      	mov	r4, r0
{
	free(buffer);
   d46f8:	6800      	ldr	r0, [r0, #0]
   d46fa:	f7ff ff81 	bl	d4600 <free>
}
   d46fe:	4620      	mov	r0, r4
   d4700:	bd10      	pop	{r4, pc}

000d4702 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4702:	b510      	push	{r4, lr}
   d4704:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4706:	6800      	ldr	r0, [r0, #0]
   d4708:	b108      	cbz	r0, d470e <_ZN6String10invalidateEv+0xc>
   d470a:	f7ff ff79 	bl	d4600 <free>
	buffer = NULL;
   d470e:	2300      	movs	r3, #0
   d4710:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4712:	60a3      	str	r3, [r4, #8]
   d4714:	6063      	str	r3, [r4, #4]
   d4716:	bd10      	pop	{r4, pc}

000d4718 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4718:	b538      	push	{r3, r4, r5, lr}
   d471a:	4604      	mov	r4, r0
   d471c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d471e:	6800      	ldr	r0, [r0, #0]
   d4720:	3101      	adds	r1, #1
   d4722:	f7ff ff75 	bl	d4610 <realloc>
	if (newbuffer) {
   d4726:	b110      	cbz	r0, d472e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4728:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d472c:	2001      	movs	r0, #1
	}
	return 0;
}
   d472e:	bd38      	pop	{r3, r4, r5, pc}

000d4730 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4730:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4732:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4734:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4736:	b113      	cbz	r3, d473e <_ZN6String7reserveEj+0xe>
   d4738:	6843      	ldr	r3, [r0, #4]
   d473a:	428b      	cmp	r3, r1
   d473c:	d207      	bcs.n	d474e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d473e:	4620      	mov	r0, r4
   d4740:	f7ff ffea 	bl	d4718 <_ZN6String12changeBufferEj>
   d4744:	b120      	cbz	r0, d4750 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4746:	68a3      	ldr	r3, [r4, #8]
   d4748:	b90b      	cbnz	r3, d474e <_ZN6String7reserveEj+0x1e>
   d474a:	6822      	ldr	r2, [r4, #0]
   d474c:	7013      	strb	r3, [r2, #0]
   d474e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4750:	bd10      	pop	{r4, pc}

000d4752 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4752:	b570      	push	{r4, r5, r6, lr}
   d4754:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4756:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4758:	4604      	mov	r4, r0
   d475a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d475c:	f7ff ffe8 	bl	d4730 <_ZN6String7reserveEj>
   d4760:	b918      	cbnz	r0, d476a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4762:	4620      	mov	r0, r4
   d4764:	f7ff ffcd 	bl	d4702 <_ZN6String10invalidateEv>
		return *this;
   d4768:	e009      	b.n	d477e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d476a:	462a      	mov	r2, r5
   d476c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d476e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4770:	6820      	ldr	r0, [r4, #0]
   d4772:	f000 ff0f 	bl	d5594 <memcpy>
	buffer[len] = 0;
   d4776:	6822      	ldr	r2, [r4, #0]
   d4778:	68a3      	ldr	r3, [r4, #8]
   d477a:	2100      	movs	r1, #0
   d477c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d477e:	4620      	mov	r0, r4
   d4780:	bd70      	pop	{r4, r5, r6, pc}

000d4782 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4782:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4784:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4786:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4788:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d478a:	6043      	str	r3, [r0, #4]
	len = 0;
   d478c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d478e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4790:	460d      	mov	r5, r1
   d4792:	b139      	cbz	r1, d47a4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4794:	4608      	mov	r0, r1
   d4796:	f000 ff4b 	bl	d5630 <strlen>
   d479a:	4629      	mov	r1, r5
   d479c:	4602      	mov	r2, r0
   d479e:	4620      	mov	r0, r4
   d47a0:	f7ff ffd7 	bl	d4752 <_ZN6String4copyEPKcj>
}
   d47a4:	4620      	mov	r0, r4
   d47a6:	bd38      	pop	{r3, r4, r5, pc}

000d47a8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d47a8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d47aa:	b510      	push	{r4, lr}
   d47ac:	460b      	mov	r3, r1
   d47ae:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d47b0:	d007      	beq.n	d47c2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d47b2:	6809      	ldr	r1, [r1, #0]
   d47b4:	b119      	cbz	r1, d47be <_ZN6StringaSERKS_+0x16>
   d47b6:	689a      	ldr	r2, [r3, #8]
   d47b8:	f7ff ffcb 	bl	d4752 <_ZN6String4copyEPKcj>
   d47bc:	e001      	b.n	d47c2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d47be:	f7ff ffa0 	bl	d4702 <_ZN6String10invalidateEv>

	return *this;
}
   d47c2:	4620      	mov	r0, r4
   d47c4:	bd10      	pop	{r4, pc}

000d47c6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d47c6:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d47c8:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d47ca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d47cc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d47ce:	6043      	str	r3, [r0, #4]
	len = 0;
   d47d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d47d2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d47d4:	f7ff ffe8 	bl	d47a8 <_ZN6StringaSERKS_>
}
   d47d8:	4620      	mov	r0, r4
   d47da:	bd10      	pop	{r4, pc}

000d47dc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d47dc:	b538      	push	{r3, r4, r5, lr}
   d47de:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d47e0:	460c      	mov	r4, r1
   d47e2:	b141      	cbz	r1, d47f6 <_ZN6StringaSEPKc+0x1a>
   d47e4:	4608      	mov	r0, r1
   d47e6:	f000 ff23 	bl	d5630 <strlen>
   d47ea:	4621      	mov	r1, r4
   d47ec:	4602      	mov	r2, r0
   d47ee:	4628      	mov	r0, r5
   d47f0:	f7ff ffaf 	bl	d4752 <_ZN6String4copyEPKcj>
   d47f4:	e001      	b.n	d47fa <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d47f6:	f7ff ff84 	bl	d4702 <_ZN6String10invalidateEv>

	return *this;
}
   d47fa:	4628      	mov	r0, r5
   d47fc:	bd38      	pop	{r3, r4, r5, pc}

000d47fe <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d47fe:	b570      	push	{r4, r5, r6, lr}
   d4800:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4802:	460e      	mov	r6, r1
   d4804:	b909      	cbnz	r1, d480a <_ZN6String6concatEPKcj+0xc>
   d4806:	2000      	movs	r0, #0
   d4808:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d480a:	b16a      	cbz	r2, d4828 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d480c:	6883      	ldr	r3, [r0, #8]
   d480e:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4810:	4629      	mov	r1, r5
   d4812:	f7ff ff8d 	bl	d4730 <_ZN6String7reserveEj>
   d4816:	2800      	cmp	r0, #0
   d4818:	d0f5      	beq.n	d4806 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d481a:	6820      	ldr	r0, [r4, #0]
   d481c:	68a3      	ldr	r3, [r4, #8]
   d481e:	4631      	mov	r1, r6
   d4820:	4418      	add	r0, r3
   d4822:	f000 fefd 	bl	d5620 <strcpy>
	len = newlen;
   d4826:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d4828:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d482a:	bd70      	pop	{r4, r5, r6, pc}

000d482c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d482c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d482e:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d4830:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d4834:	2201      	movs	r2, #1
   d4836:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4838:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d483c:	f7ff ffdf 	bl	d47fe <_ZN6String6concatEPKcj>
}
   d4840:	b003      	add	sp, #12
   d4842:	f85d fb04 	ldr.w	pc, [sp], #4

000d4846 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4846:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4848:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d484a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d484c:	b912      	cbnz	r2, d4854 <_ZNK6String6equalsEPKc+0xe>
   d484e:	b919      	cbnz	r1, d4858 <_ZNK6String6equalsEPKc+0x12>
   d4850:	2001      	movs	r0, #1
   d4852:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4854:	b911      	cbnz	r1, d485c <_ZNK6String6equalsEPKc+0x16>
   d4856:	6803      	ldr	r3, [r0, #0]
   d4858:	7818      	ldrb	r0, [r3, #0]
   d485a:	e002      	b.n	d4862 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d485c:	6800      	ldr	r0, [r0, #0]
   d485e:	f000 fed5 	bl	d560c <strcmp>
   d4862:	fab0 f080 	clz	r0, r0
   d4866:	0940      	lsrs	r0, r0, #5
}
   d4868:	bd08      	pop	{r3, pc}
	...

000d486c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d486c:	4802      	ldr	r0, [pc, #8]	; (d4878 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d486e:	2300      	movs	r3, #0
   d4870:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4872:	f7ff bd61 	b.w	d4338 <os_mutex_recursive_create>
   d4876:	bf00      	nop
   d4878:	2003e3b0 	.word	0x2003e3b0

000d487c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d487e:	4606      	mov	r6, r0
   d4880:	460d      	mov	r5, r1
   d4882:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4884:	2400      	movs	r4, #0
  while (size--) {
   d4886:	42bd      	cmp	r5, r7
   d4888:	d00c      	beq.n	d48a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d488a:	6833      	ldr	r3, [r6, #0]
   d488c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4890:	689b      	ldr	r3, [r3, #8]
   d4892:	4630      	mov	r0, r6
   d4894:	4798      	blx	r3
     if (chunk>=0)
   d4896:	2800      	cmp	r0, #0
   d4898:	db01      	blt.n	d489e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d489a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d489c:	e7f3      	b.n	d4886 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d489e:	2c00      	cmp	r4, #0
   d48a0:	bf08      	it	eq
   d48a2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d48a4:	4620      	mov	r0, r4
   d48a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d48a8:	b570      	push	{r4, r5, r6, lr}
   d48aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d48ac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d48ae:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d48b0:	b149      	cbz	r1, d48c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d48b2:	f000 febd 	bl	d5630 <strlen>
   d48b6:	682b      	ldr	r3, [r5, #0]
   d48b8:	4602      	mov	r2, r0
   d48ba:	4621      	mov	r1, r4
   d48bc:	4628      	mov	r0, r5
   d48be:	68db      	ldr	r3, [r3, #12]
    }
   d48c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d48c4:	4718      	bx	r3
    }
   d48c6:	bd70      	pop	{r4, r5, r6, pc}

000d48c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d48c8:	6803      	ldr	r3, [r0, #0]
   d48ca:	689b      	ldr	r3, [r3, #8]
   d48cc:	4718      	bx	r3

000d48ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d48d0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d48d4:	f7ff fff8 	bl	d48c8 <_ZN5Print5printEc>
  n += print('\n');
   d48d8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d48da:	4604      	mov	r4, r0
  n += print('\n');
   d48dc:	4628      	mov	r0, r5
   d48de:	f7ff fff3 	bl	d48c8 <_ZN5Print5printEc>
  return n;
}
   d48e2:	4420      	add	r0, r4
   d48e4:	bd38      	pop	{r3, r4, r5, pc}

000d48e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d48e6:	b538      	push	{r3, r4, r5, lr}
   d48e8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48ea:	f7ff ffdd 	bl	d48a8 <_ZN5Print5writeEPKc>
   d48ee:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d48f0:	4628      	mov	r0, r5
   d48f2:	f7ff ffec 	bl	d48ce <_ZN5Print7printlnEv>
  return n;
}
   d48f6:	4420      	add	r0, r4
   d48f8:	bd38      	pop	{r3, r4, r5, pc}

000d48fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d48fa:	b530      	push	{r4, r5, lr}
   d48fc:	b08b      	sub	sp, #44	; 0x2c
   d48fe:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4900:	2100      	movs	r1, #0
   d4902:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4906:	2a01      	cmp	r2, #1
   d4908:	bf98      	it	ls
   d490a:	220a      	movls	r2, #10
   d490c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4910:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4914:	fb05 3312 	mls	r3, r5, r2, r3
   d4918:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d491c:	2b09      	cmp	r3, #9
   d491e:	bf94      	ite	ls
   d4920:	3330      	addls	r3, #48	; 0x30
   d4922:	3337      	addhi	r3, #55	; 0x37
   d4924:	b2db      	uxtb	r3, r3
   d4926:	4621      	mov	r1, r4
   d4928:	f804 3901 	strb.w	r3, [r4], #-1
   d492c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d492e:	2d00      	cmp	r5, #0
   d4930:	d1ee      	bne.n	d4910 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4932:	f7ff ffb9 	bl	d48a8 <_ZN5Print5writeEPKc>
}
   d4936:	b00b      	add	sp, #44	; 0x2c
   d4938:	bd30      	pop	{r4, r5, pc}

000d493a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d493a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d493c:	b92a      	cbnz	r2, d494a <_ZN5Print5printEmi+0x10>
   d493e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4940:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4944:	689b      	ldr	r3, [r3, #8]
   d4946:	b2c9      	uxtb	r1, r1
   d4948:	4718      	bx	r3
  else return printNumber(n, base);
   d494a:	b2d2      	uxtb	r2, r2
}
   d494c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4950:	f7ff bfd3 	b.w	d48fa <_ZN5Print11printNumberEmh>

000d4954 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4954:	f7ff bff1 	b.w	d493a <_ZN5Print5printEmi>

000d4958 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4958:	4b01      	ldr	r3, [pc, #4]	; (d4960 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d495a:	4a02      	ldr	r2, [pc, #8]	; (d4964 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d495c:	601a      	str	r2, [r3, #0]
   d495e:	4770      	bx	lr
   d4960:	2003e3b4 	.word	0x2003e3b4
   d4964:	000d5723 	.word	0x000d5723

000d4968 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4968:	4b02      	ldr	r3, [pc, #8]	; (d4974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d496a:	681a      	ldr	r2, [r3, #0]
   d496c:	4b02      	ldr	r3, [pc, #8]	; (d4978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d496e:	601a      	str	r2, [r3, #0]
   d4970:	4770      	bx	lr
   d4972:	bf00      	nop
   d4974:	2003e308 	.word	0x2003e308
   d4978:	2003e3b8 	.word	0x2003e3b8

000d497c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d497c:	2100      	movs	r1, #0
   d497e:	f7ff bdab 	b.w	d44d8 <system_delay_ms>

000d4982 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4982:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4984:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4986:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4988:	b113      	cbz	r3, d4990 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d498a:	2203      	movs	r2, #3
   d498c:	4601      	mov	r1, r0
   d498e:	4798      	blx	r3
    }
   d4990:	4620      	mov	r0, r4
   d4992:	bd10      	pop	{r4, pc}

000d4994 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4994:	b510      	push	{r4, lr}
   d4996:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4998:	f7ff fff3 	bl	d4982 <_ZNSt14_Function_baseD1Ev>
   d499c:	4620      	mov	r0, r4
   d499e:	bd10      	pop	{r4, pc}

000d49a0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49a0:	4803      	ldr	r0, [pc, #12]	; (d49b0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d49a2:	4a04      	ldr	r2, [pc, #16]	; (d49b4 <_GLOBAL__sub_I_RGB+0x14>)
   d49a4:	4904      	ldr	r1, [pc, #16]	; (d49b8 <_GLOBAL__sub_I_RGB+0x18>)
   d49a6:	2300      	movs	r3, #0
   d49a8:	6083      	str	r3, [r0, #8]
   d49aa:	f000 bc95 	b.w	d52d8 <__aeabi_atexit>
   d49ae:	bf00      	nop
   d49b0:	2003e3bc 	.word	0x2003e3bc
   d49b4:	2003e370 	.word	0x2003e370
   d49b8:	000d4995 	.word	0x000d4995

000d49bc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d49bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d49be:	4b0c      	ldr	r3, [pc, #48]	; (d49f0 <serialEventRun+0x34>)
   d49c0:	b133      	cbz	r3, d49d0 <serialEventRun+0x14>
   d49c2:	f000 f967 	bl	d4c94 <_Z16_fetch_usbserialv>
   d49c6:	6803      	ldr	r3, [r0, #0]
   d49c8:	691b      	ldr	r3, [r3, #16]
   d49ca:	4798      	blx	r3
   d49cc:	2800      	cmp	r0, #0
   d49ce:	dc09      	bgt.n	d49e4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d49d0:	4b08      	ldr	r3, [pc, #32]	; (d49f4 <serialEventRun+0x38>)
   d49d2:	b163      	cbz	r3, d49ee <serialEventRun+0x32>
   d49d4:	f000 fa32 	bl	d4e3c <_Z22__fetch_global_Serial1v>
   d49d8:	6803      	ldr	r3, [r0, #0]
   d49da:	691b      	ldr	r3, [r3, #16]
   d49dc:	4798      	blx	r3
   d49de:	2800      	cmp	r0, #0
   d49e0:	dc03      	bgt.n	d49ea <serialEventRun+0x2e>
   d49e2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d49e4:	f3af 8000 	nop.w
   d49e8:	e7f2      	b.n	d49d0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d49ea:	f3af 8000 	nop.w
   d49ee:	bd08      	pop	{r3, pc}
	...

000d49f8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d49f8:	b508      	push	{r3, lr}
	serialEventRun();
   d49fa:	f7ff ffdf 	bl	d49bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d49fe:	f7ff fc73 	bl	d42e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a02:	4b01      	ldr	r3, [pc, #4]	; (d4a08 <_post_loop+0x10>)
   d4a04:	6018      	str	r0, [r3, #0]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	2003e734 	.word	0x2003e734

000d4a0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4a0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a0e:	2300      	movs	r3, #0
   d4a10:	9300      	str	r3, [sp, #0]
   d4a12:	461a      	mov	r2, r3
   d4a14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a18:	f7ff fd70 	bl	d44fc <system_ctrl_set_result>
}
   d4a1c:	b003      	add	sp, #12
   d4a1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4a24 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4a24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4a26:	8843      	ldrh	r3, [r0, #2]
   d4a28:	2b0a      	cmp	r3, #10
   d4a2a:	d008      	beq.n	d4a3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4a2c:	2b50      	cmp	r3, #80	; 0x50
   d4a2e:	d109      	bne.n	d4a44 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4a30:	4b09      	ldr	r3, [pc, #36]	; (d4a58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4a32:	681b      	ldr	r3, [r3, #0]
   d4a34:	b13b      	cbz	r3, d4a46 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4a36:	b003      	add	sp, #12
   d4a38:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4a3c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4a3e:	f7ff ffe5 	bl	d4a0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4a42:	e006      	b.n	d4a52 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a44:	2300      	movs	r3, #0
   d4a46:	9300      	str	r3, [sp, #0]
   d4a48:	461a      	mov	r2, r3
   d4a4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a4e:	f7ff fd55 	bl	d44fc <system_ctrl_set_result>
        break;
    }
}
   d4a52:	b003      	add	sp, #12
   d4a54:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a58:	2003e3cc 	.word	0x2003e3cc

000d4a5c <module_user_init_hook>:

void module_user_init_hook()
{
   d4a5c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4a5e:	f7ff fc3b 	bl	d42d8 <HAL_RNG_GetRandomNumber>
   d4a62:	4604      	mov	r4, r0
    srand(seed);
   d4a64:	f000 fdaa 	bl	d55bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4a68:	4b07      	ldr	r3, [pc, #28]	; (d4a88 <module_user_init_hook+0x2c>)
   d4a6a:	b113      	cbz	r3, d4a72 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4a72:	2100      	movs	r1, #0
   d4a74:	4804      	ldr	r0, [pc, #16]	; (d4a88 <module_user_init_hook+0x2c>)
   d4a76:	f7ff fdb3 	bl	d45e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a7a:	2100      	movs	r1, #0
   d4a7c:	4803      	ldr	r0, [pc, #12]	; (d4a8c <module_user_init_hook+0x30>)
}
   d4a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a82:	f7ff bd31 	b.w	d44e8 <system_ctrl_set_app_request_handler>
   d4a86:	bf00      	nop
   d4a88:	00000000 	.word	0x00000000
   d4a8c:	000d4a25 	.word	0x000d4a25

000d4a90 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4a90:	b510      	push	{r4, lr}
   d4a92:	b088      	sub	sp, #32
   d4a94:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4a96:	4668      	mov	r0, sp
   d4a98:	f7ff fe73 	bl	d4782 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4a9c:	4669      	mov	r1, sp
   d4a9e:	a804      	add	r0, sp, #16
   d4aa0:	f7ff fe91 	bl	d47c6 <_ZN6StringC1ERKS_>
   d4aa4:	a804      	add	r0, sp, #16
   d4aa6:	47a0      	blx	r4
   d4aa8:	4604      	mov	r4, r0
   d4aaa:	a804      	add	r0, sp, #16
   d4aac:	f7ff fe22 	bl	d46f4 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4ab0:	4668      	mov	r0, sp
   d4ab2:	f7ff fe1f 	bl	d46f4 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	b008      	add	sp, #32
   d4aba:	bd10      	pop	{r4, pc}

000d4abc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4abe:	2410      	movs	r4, #16
   d4ac0:	b085      	sub	sp, #20
   d4ac2:	4607      	mov	r7, r0
   d4ac4:	460e      	mov	r6, r1
   d4ac6:	4615      	mov	r5, r2
   d4ac8:	2100      	movs	r1, #0
   d4aca:	4622      	mov	r2, r4
   d4acc:	4668      	mov	r0, sp
   d4ace:	f000 fd6c 	bl	d55aa <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4ad2:	2200      	movs	r2, #0
   d4ad4:	4669      	mov	r1, sp
   d4ad6:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4ad8:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4adc:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4ade:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4ae0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4ae2:	f7ff fd6d 	bl	d45c0 <spark_function>
}
   d4ae6:	b005      	add	sp, #20
   d4ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4aea <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4aea:	4770      	bx	lr

000d4aec <_ZN9IPAddressD0Ev>:
   d4aec:	b510      	push	{r4, lr}
   d4aee:	2118      	movs	r1, #24
   d4af0:	4604      	mov	r4, r0
   d4af2:	f000 fbf6 	bl	d52e2 <_ZdlPvj>
   d4af6:	4620      	mov	r0, r4
   d4af8:	bd10      	pop	{r4, pc}

000d4afa <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4afa:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4afc:	7d03      	ldrb	r3, [r0, #20]
   d4afe:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b00:	b08d      	sub	sp, #52	; 0x34
   d4b02:	460e      	mov	r6, r1
   d4b04:	f100 0704 	add.w	r7, r0, #4
   d4b08:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b0c:	d002      	beq.n	d4b14 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4b0e:	f100 0508 	add.w	r5, r0, #8
   d4b12:	e018      	b.n	d4b46 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b14:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b16:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b18:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b1c:	232f      	movs	r3, #47	; 0x2f
   d4b1e:	462a      	mov	r2, r5
   d4b20:	200a      	movs	r0, #10
   d4b22:	f7ff fc11 	bl	d4348 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b26:	4628      	mov	r0, r5
   d4b28:	f000 fd82 	bl	d5630 <strlen>
   d4b2c:	6833      	ldr	r3, [r6, #0]
   d4b2e:	4602      	mov	r2, r0
   d4b30:	68db      	ldr	r3, [r3, #12]
   d4b32:	4629      	mov	r1, r5
   d4b34:	4630      	mov	r0, r6
   d4b36:	4798      	blx	r3
   d4b38:	e00f      	b.n	d4b5a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4b3a:	b124      	cbz	r4, d4b46 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4b3c:	212e      	movs	r1, #46	; 0x2e
   d4b3e:	4630      	mov	r0, r6
   d4b40:	f7ff fec2 	bl	d48c8 <_ZN5Print5printEc>
   d4b44:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4b46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b4a:	220a      	movs	r2, #10
   d4b4c:	4630      	mov	r0, r6
   d4b4e:	f7ff ff01 	bl	d4954 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b52:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b54:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b56:	d1f0      	bne.n	d4b3a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b58:	4620      	mov	r0, r4
    }
    return n;
}
   d4b5a:	b00d      	add	sp, #52	; 0x34
   d4b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4b60 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4b60:	b510      	push	{r4, lr}
   d4b62:	4b05      	ldr	r3, [pc, #20]	; (d4b78 <_ZN9IPAddressC1Ev+0x18>)
   d4b64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4b66:	2211      	movs	r2, #17
   d4b68:	f840 3b04 	str.w	r3, [r0], #4
   d4b6c:	2100      	movs	r1, #0
   d4b6e:	f000 fd1c 	bl	d55aa <memset>
{
    clear();
}
   d4b72:	4620      	mov	r0, r4
   d4b74:	bd10      	pop	{r4, pc}
   d4b76:	bf00      	nop
   d4b78:	000d57c0 	.word	0x000d57c0

000d4b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4b7c:	4603      	mov	r3, r0
   d4b7e:	4a07      	ldr	r2, [pc, #28]	; (d4b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4b80:	b510      	push	{r4, lr}
   d4b82:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4b86:	f101 0210 	add.w	r2, r1, #16
   d4b8a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4b8e:	f843 4b04 	str.w	r4, [r3], #4
   d4b92:	4291      	cmp	r1, r2
   d4b94:	d1f9      	bne.n	d4b8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4b96:	780a      	ldrb	r2, [r1, #0]
   d4b98:	701a      	strb	r2, [r3, #0]
}
   d4b9a:	bd10      	pop	{r4, pc}
   d4b9c:	000d57c0 	.word	0x000d57c0

000d4ba0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4ba0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ba2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ba6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4baa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4bae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4bb2:	2304      	movs	r3, #4
   d4bb4:	6041      	str	r1, [r0, #4]
   d4bb6:	7503      	strb	r3, [r0, #20]
   d4bb8:	bd10      	pop	{r4, pc}

000d4bba <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4bbc:	780d      	ldrb	r5, [r1, #0]
   d4bbe:	788b      	ldrb	r3, [r1, #2]
   d4bc0:	784a      	ldrb	r2, [r1, #1]
   d4bc2:	78c9      	ldrb	r1, [r1, #3]
   d4bc4:	9100      	str	r1, [sp, #0]
   d4bc6:	4629      	mov	r1, r5
   d4bc8:	f7ff ffea 	bl	d4ba0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4bcc:	b003      	add	sp, #12
   d4bce:	bd30      	pop	{r4, r5, pc}

000d4bd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4bd0:	7441      	strb	r1, [r0, #17]
   d4bd2:	4770      	bx	lr

000d4bd4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4bd4:	4770      	bx	lr

000d4bd6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4bd6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4bd8:	2100      	movs	r1, #0
   d4bda:	7c00      	ldrb	r0, [r0, #16]
   d4bdc:	f7ff fc5c 	bl	d4498 <HAL_USB_USART_Receive_Data>
}
   d4be0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4be4:	bf28      	it	cs
   d4be6:	f04f 30ff 	movcs.w	r0, #4294967295
   d4bea:	bd08      	pop	{r3, pc}

000d4bec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4bec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4bee:	2101      	movs	r1, #1
   d4bf0:	7c00      	ldrb	r0, [r0, #16]
   d4bf2:	f7ff fc51 	bl	d4498 <HAL_USB_USART_Receive_Data>
}
   d4bf6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4bfa:	bf28      	it	cs
   d4bfc:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c00:	bd08      	pop	{r3, pc}

000d4c02 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4c02:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4c04:	7c00      	ldrb	r0, [r0, #16]
   d4c06:	f7ff fc3f 	bl	d4488 <HAL_USB_USART_Available_Data_For_Write>
}
   d4c0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c0e:	bd08      	pop	{r3, pc}

000d4c10 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4c10:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4c12:	7c00      	ldrb	r0, [r0, #16]
   d4c14:	f7ff fc30 	bl	d4478 <HAL_USB_USART_Available_Data>
}
   d4c18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c1c:	bd08      	pop	{r3, pc}

000d4c1e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4c1e:	7c00      	ldrb	r0, [r0, #16]
   d4c20:	f7ff bc4a 	b.w	d44b8 <HAL_USB_USART_Flush_Data>

000d4c24 <_ZN9USBSerialD0Ev>:
   d4c24:	b510      	push	{r4, lr}
   d4c26:	2114      	movs	r1, #20
   d4c28:	4604      	mov	r4, r0
   d4c2a:	f000 fb5a 	bl	d52e2 <_ZdlPvj>
   d4c2e:	4620      	mov	r0, r4
   d4c30:	bd10      	pop	{r4, pc}

000d4c32 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c32:	b538      	push	{r3, r4, r5, lr}
   d4c34:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c36:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c38:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c3a:	f7ff fc25 	bl	d4488 <HAL_USB_USART_Available_Data_For_Write>
   d4c3e:	2800      	cmp	r0, #0
   d4c40:	dc01      	bgt.n	d4c46 <_ZN9USBSerial5writeEh+0x14>
   d4c42:	7c60      	ldrb	r0, [r4, #17]
   d4c44:	b128      	cbz	r0, d4c52 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4c46:	4629      	mov	r1, r5
   d4c48:	7c20      	ldrb	r0, [r4, #16]
   d4c4a:	f7ff fc2d 	bl	d44a8 <HAL_USB_USART_Send_Data>
   d4c4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4c52:	bd38      	pop	{r3, r4, r5, pc}

000d4c54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c54:	b510      	push	{r4, lr}
   d4c56:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c58:	2300      	movs	r3, #0
   d4c5a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c60:	60a3      	str	r3, [r4, #8]
   d4c62:	4b05      	ldr	r3, [pc, #20]	; (d4c78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4c64:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4c66:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c68:	4608      	mov	r0, r1
{
  _serial = serial;
   d4c6a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4c6c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4c6e:	4611      	mov	r1, r2
   d4c70:	f7ff fbf2 	bl	d4458 <HAL_USB_USART_Init>
}
   d4c74:	4620      	mov	r0, r4
   d4c76:	bd10      	pop	{r4, pc}
   d4c78:	000d57d4 	.word	0x000d57d4

000d4c7c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	7c00      	ldrb	r0, [r0, #16]
   d4c80:	f7ff bbf2 	b.w	d4468 <HAL_USB_USART_Begin>

000d4c84 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4c86:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c88:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4c8a:	2100      	movs	r1, #0
   d4c8c:	f000 fc8d 	bl	d55aa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4c90:	4620      	mov	r0, r4
   d4c92:	bd10      	pop	{r4, pc}

000d4c94 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4c94:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c96:	4d0e      	ldr	r5, [pc, #56]	; (d4cd0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4c98:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4c9a:	a801      	add	r0, sp, #4
   d4c9c:	f7ff fff2 	bl	d4c84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4ca0:	6829      	ldr	r1, [r5, #0]
   d4ca2:	f011 0401 	ands.w	r4, r1, #1
   d4ca6:	d110      	bne.n	d4cca <_Z16_fetch_usbserialv+0x36>
   d4ca8:	4628      	mov	r0, r5
   d4caa:	f7ff f9f8 	bl	d409e <__cxa_guard_acquire>
   d4cae:	b160      	cbz	r0, d4cca <_Z16_fetch_usbserialv+0x36>
   d4cb0:	aa01      	add	r2, sp, #4
   d4cb2:	4621      	mov	r1, r4
   d4cb4:	4807      	ldr	r0, [pc, #28]	; (d4cd4 <_Z16_fetch_usbserialv+0x40>)
   d4cb6:	f7ff ffcd 	bl	d4c54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4cba:	4628      	mov	r0, r5
   d4cbc:	f7ff f9f4 	bl	d40a8 <__cxa_guard_release>
   d4cc0:	4a05      	ldr	r2, [pc, #20]	; (d4cd8 <_Z16_fetch_usbserialv+0x44>)
   d4cc2:	4906      	ldr	r1, [pc, #24]	; (d4cdc <_Z16_fetch_usbserialv+0x48>)
   d4cc4:	4803      	ldr	r0, [pc, #12]	; (d4cd4 <_Z16_fetch_usbserialv+0x40>)
   d4cc6:	f000 fb07 	bl	d52d8 <__aeabi_atexit>
	return _usbserial;
}
   d4cca:	4802      	ldr	r0, [pc, #8]	; (d4cd4 <_Z16_fetch_usbserialv+0x40>)
   d4ccc:	b007      	add	sp, #28
   d4cce:	bd30      	pop	{r4, r5, pc}
   d4cd0:	2003e3d0 	.word	0x2003e3d0
   d4cd4:	2003e3d4 	.word	0x2003e3d4
   d4cd8:	2003e370 	.word	0x2003e370
   d4cdc:	000d4bd5 	.word	0x000d4bd5

000d4ce0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4ce0:	2200      	movs	r2, #0
   d4ce2:	4611      	mov	r1, r2
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	f7ff bc2b 	b.w	d4540 <network_ready>

000d4cea <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cea:	2200      	movs	r2, #0
   d4cec:	4611      	mov	r1, r2
   d4cee:	6840      	ldr	r0, [r0, #4]
   d4cf0:	f7ff bc46 	b.w	d4580 <network_listening>

000d4cf4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4cf4:	2200      	movs	r2, #0
   d4cf6:	4611      	mov	r1, r2
   d4cf8:	6840      	ldr	r0, [r0, #4]
   d4cfa:	f7ff bc51 	b.w	d45a0 <network_get_listen_timeout>

000d4cfe <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4cfe:	2200      	movs	r2, #0
   d4d00:	6840      	ldr	r0, [r0, #4]
   d4d02:	f7ff bc45 	b.w	d4590 <network_set_listen_timeout>

000d4d06 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d06:	2200      	movs	r2, #0
   d4d08:	f081 0101 	eor.w	r1, r1, #1
   d4d0c:	6840      	ldr	r0, [r0, #4]
   d4d0e:	f7ff bc2f 	b.w	d4570 <network_listen>

000d4d12 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4d12:	2300      	movs	r3, #0
   d4d14:	461a      	mov	r2, r3
   d4d16:	4619      	mov	r1, r3
   d4d18:	6840      	ldr	r0, [r0, #4]
   d4d1a:	f7ff bc21 	b.w	d4560 <network_off>

000d4d1e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4d1e:	2300      	movs	r3, #0
   d4d20:	461a      	mov	r2, r3
   d4d22:	4619      	mov	r1, r3
   d4d24:	6840      	ldr	r0, [r0, #4]
   d4d26:	f7ff bc13 	b.w	d4550 <network_on>

000d4d2a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d2a:	2200      	movs	r2, #0
   d4d2c:	4611      	mov	r1, r2
   d4d2e:	6840      	ldr	r0, [r0, #4]
   d4d30:	f7ff bbf6 	b.w	d4520 <network_connecting>

000d4d34 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d34:	2200      	movs	r2, #0
   d4d36:	2102      	movs	r1, #2
   d4d38:	6840      	ldr	r0, [r0, #4]
   d4d3a:	f7ff bbf9 	b.w	d4530 <network_disconnect>

000d4d3e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d3e:	2300      	movs	r3, #0
   d4d40:	461a      	mov	r2, r3
   d4d42:	6840      	ldr	r0, [r0, #4]
   d4d44:	f7ff bbe4 	b.w	d4510 <network_connect>

000d4d48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4d48:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4d4a:	4c08      	ldr	r4, [pc, #32]	; (d4d6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4d4c:	2528      	movs	r5, #40	; 0x28
   d4d4e:	462a      	mov	r2, r5
   d4d50:	2100      	movs	r1, #0
   d4d52:	4620      	mov	r0, r4
   d4d54:	f000 fc29 	bl	d55aa <memset>
        cid = -1;
   d4d58:	f04f 33ff 	mov.w	r3, #4294967295
   d4d5c:	6063      	str	r3, [r4, #4]
   d4d5e:	4b04      	ldr	r3, [pc, #16]	; (d4d70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4d60:	8025      	strh	r5, [r4, #0]
   d4d62:	2204      	movs	r2, #4
   d4d64:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4d66:	4a03      	ldr	r2, [pc, #12]	; (d4d74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4d68:	601a      	str	r2, [r3, #0]
   d4d6a:	bd38      	pop	{r3, r4, r5, pc}
   d4d6c:	2003e3f0 	.word	0x2003e3f0
   d4d70:	2003e3e8 	.word	0x2003e3e8
   d4d74:	000d5804 	.word	0x000d5804

000d4d78 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4d78:	4770      	bx	lr

000d4d7a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d7a:	7441      	strb	r1, [r0, #17]
   d4d7c:	4770      	bx	lr

000d4d7e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4d7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4d80:	7c00      	ldrb	r0, [r0, #16]
   d4d82:	f7ff fb21 	bl	d43c8 <HAL_USART_Available_Data_For_Write>
}
   d4d86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d8a:	bd08      	pop	{r3, pc}

000d4d8c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d8c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4d8e:	7c00      	ldrb	r0, [r0, #16]
   d4d90:	f7ff faf2 	bl	d4378 <HAL_USART_Available_Data>
}
   d4d94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d98:	bd08      	pop	{r3, pc}

000d4d9a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4d9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4d9c:	7c00      	ldrb	r0, [r0, #16]
   d4d9e:	f7ff fafb 	bl	d4398 <HAL_USART_Peek_Data>
}
   d4da2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4da6:	bf28      	it	cs
   d4da8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4dac:	bd08      	pop	{r3, pc}

000d4dae <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4dae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4db0:	7c00      	ldrb	r0, [r0, #16]
   d4db2:	f7ff fae9 	bl	d4388 <HAL_USART_Read_Data>
}
   d4db6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dba:	bf28      	it	cs
   d4dbc:	f04f 30ff 	movcs.w	r0, #4294967295
   d4dc0:	bd08      	pop	{r3, pc}

000d4dc2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4dc2:	7c00      	ldrb	r0, [r0, #16]
   d4dc4:	f7ff baf0 	b.w	d43a8 <HAL_USART_Flush_Data>

000d4dc8 <_ZN11USARTSerialD0Ev>:
   d4dc8:	b510      	push	{r4, lr}
   d4dca:	2114      	movs	r1, #20
   d4dcc:	4604      	mov	r4, r0
   d4dce:	f000 fa88 	bl	d52e2 <_ZdlPvj>
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	bd10      	pop	{r4, pc}

000d4dd6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4dd6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4dd8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4dda:	4604      	mov	r4, r0
   d4ddc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4dde:	b925      	cbnz	r5, d4dea <_ZN11USARTSerial5writeEh+0x14>
   d4de0:	7c00      	ldrb	r0, [r0, #16]
   d4de2:	f7ff faf1 	bl	d43c8 <HAL_USART_Available_Data_For_Write>
   d4de6:	2800      	cmp	r0, #0
   d4de8:	dd05      	ble.n	d4df6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4dea:	4631      	mov	r1, r6
   d4dec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4df2:	f7ff bab9 	b.w	d4368 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4df6:	4628      	mov	r0, r5
   d4df8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4dfc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4dfc:	b510      	push	{r4, lr}
   d4dfe:	4604      	mov	r4, r0
   d4e00:	4608      	mov	r0, r1
   d4e02:	4611      	mov	r1, r2
   d4e04:	2200      	movs	r2, #0
   d4e06:	6062      	str	r2, [r4, #4]
   d4e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e0c:	60a2      	str	r2, [r4, #8]
   d4e0e:	4a05      	ldr	r2, [pc, #20]	; (d4e24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e10:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e12:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e14:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e16:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e18:	461a      	mov	r2, r3
   d4e1a:	f7ff fa9d 	bl	d4358 <HAL_USART_Init>
}
   d4e1e:	4620      	mov	r0, r4
   d4e20:	bd10      	pop	{r4, pc}
   d4e22:	bf00      	nop
   d4e24:	000d5838 	.word	0x000d5838

000d4e28 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d4e28:	2300      	movs	r3, #0
   d4e2a:	7c00      	ldrb	r0, [r0, #16]
   d4e2c:	f7ff bad4 	b.w	d43d8 <HAL_USART_BeginConfig>

000d4e30 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d4e30:	2200      	movs	r2, #0
   d4e32:	f7ff bff9 	b.w	d4e28 <_ZN11USARTSerial5beginEmm>

000d4e36 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4e36:	7c00      	ldrb	r0, [r0, #16]
   d4e38:	f7ff babe 	b.w	d43b8 <HAL_USART_Is_Enabled>

000d4e3c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e3c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4e3e:	4d0c      	ldr	r5, [pc, #48]	; (d4e70 <_Z22__fetch_global_Serial1v+0x34>)
   d4e40:	6829      	ldr	r1, [r5, #0]
   d4e42:	f011 0401 	ands.w	r4, r1, #1
   d4e46:	d111      	bne.n	d4e6c <_Z22__fetch_global_Serial1v+0x30>
   d4e48:	4628      	mov	r0, r5
   d4e4a:	f7ff f928 	bl	d409e <__cxa_guard_acquire>
   d4e4e:	b168      	cbz	r0, d4e6c <_Z22__fetch_global_Serial1v+0x30>
   d4e50:	4a08      	ldr	r2, [pc, #32]	; (d4e74 <_Z22__fetch_global_Serial1v+0x38>)
   d4e52:	4b09      	ldr	r3, [pc, #36]	; (d4e78 <_Z22__fetch_global_Serial1v+0x3c>)
   d4e54:	4809      	ldr	r0, [pc, #36]	; (d4e7c <_Z22__fetch_global_Serial1v+0x40>)
   d4e56:	4621      	mov	r1, r4
   d4e58:	f7ff ffd0 	bl	d4dfc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e5c:	4628      	mov	r0, r5
   d4e5e:	f7ff f923 	bl	d40a8 <__cxa_guard_release>
   d4e62:	4a07      	ldr	r2, [pc, #28]	; (d4e80 <_Z22__fetch_global_Serial1v+0x44>)
   d4e64:	4907      	ldr	r1, [pc, #28]	; (d4e84 <_Z22__fetch_global_Serial1v+0x48>)
   d4e66:	4805      	ldr	r0, [pc, #20]	; (d4e7c <_Z22__fetch_global_Serial1v+0x40>)
   d4e68:	f000 fa36 	bl	d52d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4e6c:	4803      	ldr	r0, [pc, #12]	; (d4e7c <_Z22__fetch_global_Serial1v+0x40>)
   d4e6e:	bd38      	pop	{r3, r4, r5, pc}
   d4e70:	2003e4b0 	.word	0x2003e4b0
   d4e74:	2003e4b4 	.word	0x2003e4b4
   d4e78:	2003e42c 	.word	0x2003e42c
   d4e7c:	2003e418 	.word	0x2003e418
   d4e80:	2003e370 	.word	0x2003e370
   d4e84:	000d4d79 	.word	0x000d4d79

000d4e88 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4e88:	4770      	bx	lr

000d4e8a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e8c:	4606      	mov	r6, r0
   d4e8e:	4615      	mov	r5, r2
   d4e90:	460c      	mov	r4, r1
   d4e92:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e94:	42bc      	cmp	r4, r7
   d4e96:	d006      	beq.n	d4ea6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e98:	6833      	ldr	r3, [r6, #0]
   d4e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e9e:	689b      	ldr	r3, [r3, #8]
   d4ea0:	4630      	mov	r0, r6
   d4ea2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ea4:	e7f6      	b.n	d4e94 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4ea6:	4628      	mov	r0, r5
   d4ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4eaa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4eaa:	2200      	movs	r2, #0
   d4eac:	7c00      	ldrb	r0, [r0, #16]
   d4eae:	f7ff ba9b 	b.w	d43e8 <HAL_I2C_Write_Data>

000d4eb2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4eb2:	2100      	movs	r1, #0
   d4eb4:	7c00      	ldrb	r0, [r0, #16]
   d4eb6:	f7ff ba9f 	b.w	d43f8 <HAL_I2C_Available_Data>

000d4eba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4eba:	2100      	movs	r1, #0
   d4ebc:	7c00      	ldrb	r0, [r0, #16]
   d4ebe:	f7ff baa3 	b.w	d4408 <HAL_I2C_Read_Data>

000d4ec2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4ec2:	2100      	movs	r1, #0
   d4ec4:	7c00      	ldrb	r0, [r0, #16]
   d4ec6:	f7ff baa7 	b.w	d4418 <HAL_I2C_Peek_Data>

000d4eca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4eca:	2100      	movs	r1, #0
   d4ecc:	7c00      	ldrb	r0, [r0, #16]
   d4ece:	f7ff baab 	b.w	d4428 <HAL_I2C_Flush_Data>

000d4ed2 <_ZN7TwoWireD0Ev>:
   d4ed2:	b510      	push	{r4, lr}
   d4ed4:	2114      	movs	r1, #20
   d4ed6:	4604      	mov	r4, r0
   d4ed8:	f000 fa03 	bl	d52e2 <_ZdlPvj>
   d4edc:	4620      	mov	r0, r4
   d4ede:	bd10      	pop	{r4, pc}

000d4ee0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ee0:	b510      	push	{r4, lr}
   d4ee2:	4604      	mov	r4, r0
   d4ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ee8:	4608      	mov	r0, r1
   d4eea:	60a3      	str	r3, [r4, #8]
   d4eec:	2100      	movs	r1, #0
   d4eee:	4b04      	ldr	r3, [pc, #16]	; (d4f00 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4ef0:	7420      	strb	r0, [r4, #16]
   d4ef2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ef4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4ef6:	f7ff faa7 	bl	d4448 <HAL_I2C_Init>

}
   d4efa:	4620      	mov	r0, r4
   d4efc:	bd10      	pop	{r4, pc}
   d4efe:	bf00      	nop
   d4f00:	000d5868 	.word	0x000d5868

000d4f04 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4f04:	2100      	movs	r1, #0
   d4f06:	7c00      	ldrb	r0, [r0, #16]
   d4f08:	f7ff ba96 	b.w	d4438 <HAL_I2C_Is_Enabled>

000d4f0c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f0c:	2200      	movs	r2, #0
   d4f0e:	4611      	mov	r1, r2
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff bb35 	b.w	d4580 <network_listening>

000d4f16 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f16:	2200      	movs	r2, #0
   d4f18:	4611      	mov	r1, r2
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	f7ff bb40 	b.w	d45a0 <network_get_listen_timeout>

000d4f20 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f20:	2200      	movs	r2, #0
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	f7ff bb34 	b.w	d4590 <network_set_listen_timeout>

000d4f28 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f28:	2200      	movs	r2, #0
   d4f2a:	f081 0101 	eor.w	r1, r1, #1
   d4f2e:	6840      	ldr	r0, [r0, #4]
   d4f30:	f7ff bb1e 	b.w	d4570 <network_listen>

000d4f34 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4f34:	2300      	movs	r3, #0
   d4f36:	461a      	mov	r2, r3
   d4f38:	2101      	movs	r1, #1
   d4f3a:	6840      	ldr	r0, [r0, #4]
   d4f3c:	f7ff bb10 	b.w	d4560 <network_off>

000d4f40 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f40:	2300      	movs	r3, #0
   d4f42:	461a      	mov	r2, r3
   d4f44:	4619      	mov	r1, r3
   d4f46:	6840      	ldr	r0, [r0, #4]
   d4f48:	f7ff bb02 	b.w	d4550 <network_on>

000d4f4c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f4c:	2200      	movs	r2, #0
   d4f4e:	4611      	mov	r1, r2
   d4f50:	6840      	ldr	r0, [r0, #4]
   d4f52:	f7ff baf5 	b.w	d4540 <network_ready>

000d4f56 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f56:	2200      	movs	r2, #0
   d4f58:	4611      	mov	r1, r2
   d4f5a:	6840      	ldr	r0, [r0, #4]
   d4f5c:	f7ff bae0 	b.w	d4520 <network_connecting>

000d4f60 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f60:	2200      	movs	r2, #0
   d4f62:	2102      	movs	r1, #2
   d4f64:	6840      	ldr	r0, [r0, #4]
   d4f66:	f7ff bae3 	b.w	d4530 <network_disconnect>

000d4f6a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f6a:	2300      	movs	r3, #0
   d4f6c:	461a      	mov	r2, r3
   d4f6e:	6840      	ldr	r0, [r0, #4]
   d4f70:	f7ff bace 	b.w	d4510 <network_connect>

000d4f74 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4f74:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f76:	4605      	mov	r5, r0
   d4f78:	b188      	cbz	r0, d4f9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f7a:	6804      	ldr	r4, [r0, #0]
   d4f7c:	b14c      	cbz	r4, d4f92 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4f7e:	68a3      	ldr	r3, [r4, #8]
   d4f80:	b11b      	cbz	r3, d4f8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f82:	2203      	movs	r2, #3
   d4f84:	4621      	mov	r1, r4
   d4f86:	4620      	mov	r0, r4
   d4f88:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f8a:	2110      	movs	r1, #16
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	f000 f9a8 	bl	d52e2 <_ZdlPvj>
   d4f92:	4628      	mov	r0, r5
   d4f94:	2114      	movs	r1, #20
      }
   d4f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f9a:	f000 b9a2 	b.w	d52e2 <_ZdlPvj>
   d4f9e:	bd38      	pop	{r3, r4, r5, pc}

000d4fa0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4fa0:	b110      	cbz	r0, d4fa8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4fa2:	6803      	ldr	r3, [r0, #0]
   d4fa4:	685b      	ldr	r3, [r3, #4]
   d4fa6:	4718      	bx	r3
   d4fa8:	4770      	bx	lr

000d4faa <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4faa:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4fac:	6803      	ldr	r3, [r0, #0]
   d4fae:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4fb0:	b1bb      	cbz	r3, d4fe2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4fb2:	6858      	ldr	r0, [r3, #4]
   d4fb4:	f7ff f9a0 	bl	d42f8 <os_thread_is_current>
   d4fb8:	b978      	cbnz	r0, d4fda <_ZN6ThreadD1Ev+0x30>
   d4fba:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4fbc:	7c5a      	ldrb	r2, [r3, #17]
   d4fbe:	b912      	cbnz	r2, d4fc6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4fc0:	6858      	ldr	r0, [r3, #4]
   d4fc2:	f7ff f9a1 	bl	d4308 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4fc6:	6823      	ldr	r3, [r4, #0]
   d4fc8:	6858      	ldr	r0, [r3, #4]
   d4fca:	f7ff f9a5 	bl	d4318 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fce:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4fd0:	2300      	movs	r3, #0
   d4fd2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4fd4:	b128      	cbz	r0, d4fe2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4fd6:	f7ff ffcd 	bl	d4f74 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fda:	6820      	ldr	r0, [r4, #0]
   d4fdc:	b108      	cbz	r0, d4fe2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4fde:	f7ff ffc9 	bl	d4f74 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	bd10      	pop	{r4, pc}
	...

000d4fe8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4fe8:	b538      	push	{r3, r4, r5, lr}
   d4fea:	4b0c      	ldr	r3, [pc, #48]	; (d501c <_ZN5spark9MeshClassD1Ev+0x34>)
   d4fec:	6003      	str	r3, [r0, #0]
   d4fee:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ff0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4ff4:	b108      	cbz	r0, d4ffa <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4ff6:	f7ff f850 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ffa:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4ffe:	b135      	cbz	r5, d500e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5000:	4628      	mov	r0, r5
   d5002:	f7ff ffd2 	bl	d4faa <_ZN6ThreadD1Ev>
   d5006:	2104      	movs	r1, #4
   d5008:	4628      	mov	r0, r5
   d500a:	f000 f96a 	bl	d52e2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d500e:	68a0      	ldr	r0, [r4, #8]
   d5010:	b108      	cbz	r0, d5016 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5012:	f7ff ffc5 	bl	d4fa0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5016:	4620      	mov	r0, r4
   d5018:	bd38      	pop	{r3, r4, r5, pc}
   d501a:	bf00      	nop
   d501c:	000d5890 	.word	0x000d5890

000d5020 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5020:	b538      	push	{r3, r4, r5, lr}
   d5022:	4c0e      	ldr	r4, [pc, #56]	; (d505c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5024:	4b0e      	ldr	r3, [pc, #56]	; (d5060 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5026:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5028:	2500      	movs	r5, #0
   d502a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d502c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5030:	6063      	str	r3, [r4, #4]
   d5032:	60a5      	str	r5, [r4, #8]
   d5034:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5038:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d503c:	f7ff f97c 	bl	d4338 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5040:	4b08      	ldr	r3, [pc, #32]	; (d5064 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5042:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5046:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d504a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d504c:	4620      	mov	r0, r4
   d504e:	4a06      	ldr	r2, [pc, #24]	; (d5068 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5050:	4906      	ldr	r1, [pc, #24]	; (d506c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5056:	f000 b93f 	b.w	d52d8 <__aeabi_atexit>
   d505a:	bf00      	nop
   d505c:	2003e538 	.word	0x2003e538
   d5060:	000d58c4 	.word	0x000d58c4
   d5064:	000d5890 	.word	0x000d5890
   d5068:	2003e370 	.word	0x2003e370
   d506c:	000d4fe9 	.word	0x000d4fe9

000d5070 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5070:	2300      	movs	r3, #0
   d5072:	461a      	mov	r2, r3
   d5074:	6840      	ldr	r0, [r0, #4]
   d5076:	f7ff ba4b 	b.w	d4510 <network_connect>

000d507a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d507a:	2200      	movs	r2, #0
   d507c:	2102      	movs	r1, #2
   d507e:	6840      	ldr	r0, [r0, #4]
   d5080:	f7ff ba56 	b.w	d4530 <network_disconnect>

000d5084 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5084:	2200      	movs	r2, #0
   d5086:	4611      	mov	r1, r2
   d5088:	6840      	ldr	r0, [r0, #4]
   d508a:	f7ff ba49 	b.w	d4520 <network_connecting>

000d508e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d508e:	2200      	movs	r2, #0
   d5090:	4611      	mov	r1, r2
   d5092:	6840      	ldr	r0, [r0, #4]
   d5094:	f7ff ba54 	b.w	d4540 <network_ready>

000d5098 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5098:	2300      	movs	r3, #0
   d509a:	461a      	mov	r2, r3
   d509c:	4619      	mov	r1, r3
   d509e:	6840      	ldr	r0, [r0, #4]
   d50a0:	f7ff ba56 	b.w	d4550 <network_on>

000d50a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d50a4:	2300      	movs	r3, #0
   d50a6:	461a      	mov	r2, r3
   d50a8:	4619      	mov	r1, r3
   d50aa:	6840      	ldr	r0, [r0, #4]
   d50ac:	f7ff ba58 	b.w	d4560 <network_off>

000d50b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d50b0:	2200      	movs	r2, #0
   d50b2:	f081 0101 	eor.w	r1, r1, #1
   d50b6:	6840      	ldr	r0, [r0, #4]
   d50b8:	f7ff ba5a 	b.w	d4570 <network_listen>

000d50bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d50bc:	2200      	movs	r2, #0
   d50be:	6840      	ldr	r0, [r0, #4]
   d50c0:	f7ff ba66 	b.w	d4590 <network_set_listen_timeout>

000d50c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d50c4:	2200      	movs	r2, #0
   d50c6:	4611      	mov	r1, r2
   d50c8:	6840      	ldr	r0, [r0, #4]
   d50ca:	f7ff ba69 	b.w	d45a0 <network_get_listen_timeout>

000d50ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d50ce:	2200      	movs	r2, #0
   d50d0:	4611      	mov	r1, r2
   d50d2:	6840      	ldr	r0, [r0, #4]
   d50d4:	f7ff ba54 	b.w	d4580 <network_listening>

000d50d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d50d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d50dc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d50de:	b095      	sub	sp, #84	; 0x54
   d50e0:	4616      	mov	r6, r2
   d50e2:	460d      	mov	r5, r1
   d50e4:	4607      	mov	r7, r0
    IPAddress addr;
   d50e6:	f7ff fd3b 	bl	d4b60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d50ea:	4621      	mov	r1, r4
   d50ec:	2220      	movs	r2, #32
   d50ee:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d50f0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d50f2:	f000 fa5a 	bl	d55aa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d50f6:	2340      	movs	r3, #64	; 0x40
   d50f8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d50fa:	4621      	mov	r1, r4
   d50fc:	466b      	mov	r3, sp
   d50fe:	aa0c      	add	r2, sp, #48	; 0x30
   d5100:	4630      	mov	r0, r6
   d5102:	f7ff f8b1 	bl	d4268 <netdb_getaddrinfo>
    if (!r) {
   d5106:	4604      	mov	r4, r0
   d5108:	2800      	cmp	r0, #0
   d510a:	d144      	bne.n	d5196 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d510c:	4602      	mov	r2, r0
   d510e:	2101      	movs	r1, #1
   d5110:	6868      	ldr	r0, [r5, #4]
   d5112:	f7ff fa15 	bl	d4540 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5116:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5118:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d511a:	4622      	mov	r2, r4
   d511c:	6868      	ldr	r0, [r5, #4]
   d511e:	f7ff fa0f 	bl	d4540 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5122:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5124:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5126:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5128:	2e00      	cmp	r6, #0
   d512a:	d034      	beq.n	d5196 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d512c:	2900      	cmp	r1, #0
   d512e:	d132      	bne.n	d5196 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5130:	6873      	ldr	r3, [r6, #4]
   d5132:	2b02      	cmp	r3, #2
   d5134:	d002      	beq.n	d513c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5136:	2b0a      	cmp	r3, #10
   d5138:	d009      	beq.n	d514e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d513a:	e02a      	b.n	d5192 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d513c:	f1b8 0f00 	cmp.w	r8, #0
   d5140:	d027      	beq.n	d5192 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5142:	6971      	ldr	r1, [r6, #20]
   d5144:	4638      	mov	r0, r7
   d5146:	3104      	adds	r1, #4
   d5148:	f7ff fd37 	bl	d4bba <_ZN9IPAddressaSEPKh>
   d514c:	e020      	b.n	d5190 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d514e:	f1b9 0f00 	cmp.w	r9, #0
   d5152:	d01e      	beq.n	d5192 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5154:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5156:	2211      	movs	r2, #17
   d5158:	a801      	add	r0, sp, #4
   d515a:	f000 fa26 	bl	d55aa <memset>
                    a.v = 6;
   d515e:	2306      	movs	r3, #6
   d5160:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5164:	ad01      	add	r5, sp, #4
   d5166:	f104 0308 	add.w	r3, r4, #8
   d516a:	3418      	adds	r4, #24
   d516c:	6818      	ldr	r0, [r3, #0]
   d516e:	6859      	ldr	r1, [r3, #4]
   d5170:	462a      	mov	r2, r5
   d5172:	c203      	stmia	r2!, {r0, r1}
   d5174:	3308      	adds	r3, #8
   d5176:	42a3      	cmp	r3, r4
   d5178:	4615      	mov	r5, r2
   d517a:	d1f7      	bne.n	d516c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d517c:	a901      	add	r1, sp, #4
   d517e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5180:	ad07      	add	r5, sp, #28
   d5182:	f7ff fcfb 	bl	d4b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5188:	1d3c      	adds	r4, r7, #4
   d518a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d518c:	682b      	ldr	r3, [r5, #0]
   d518e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5190:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5192:	69f6      	ldr	r6, [r6, #28]
   d5194:	e7c8      	b.n	d5128 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5196:	9800      	ldr	r0, [sp, #0]
   d5198:	f7ff f85e 	bl	d4258 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d519c:	4638      	mov	r0, r7
   d519e:	b015      	add	sp, #84	; 0x54
   d51a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d51a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d51a4:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d51a6:	4a03      	ldr	r2, [pc, #12]	; (d51b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d51a8:	601a      	str	r2, [r3, #0]
   d51aa:	2200      	movs	r2, #0
   d51ac:	605a      	str	r2, [r3, #4]
   d51ae:	4770      	bx	lr
   d51b0:	2003e70c 	.word	0x2003e70c
   d51b4:	000d58c4 	.word	0x000d58c4

000d51b8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d51b8:	b510      	push	{r4, lr}
   d51ba:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d51bc:	480f      	ldr	r0, [pc, #60]	; (d51fc <pinAvailable+0x44>)
   d51be:	f7ff fa89 	bl	d46d4 <_ZN8SPIClass9isEnabledEv>
   d51c2:	b128      	cbz	r0, d51d0 <pinAvailable+0x18>
   d51c4:	f1a4 030b 	sub.w	r3, r4, #11
   d51c8:	2b02      	cmp	r3, #2
   d51ca:	d801      	bhi.n	d51d0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d51cc:	2000      	movs	r0, #0
   d51ce:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d51d0:	f000 f862 	bl	d5298 <_Z19__fetch_global_Wirev>
   d51d4:	f7ff fe96 	bl	d4f04 <_ZN7TwoWire9isEnabledEv>
   d51d8:	b108      	cbz	r0, d51de <pinAvailable+0x26>
   d51da:	2c01      	cmp	r4, #1
   d51dc:	d9f6      	bls.n	d51cc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d51de:	f7ff fe2d 	bl	d4e3c <_Z22__fetch_global_Serial1v>
   d51e2:	f7ff fe28 	bl	d4e36 <_ZN11USARTSerial9isEnabledEv>
   d51e6:	b118      	cbz	r0, d51f0 <pinAvailable+0x38>
   d51e8:	f1a4 0309 	sub.w	r3, r4, #9
   d51ec:	2b01      	cmp	r3, #1
   d51ee:	d9ed      	bls.n	d51cc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d51f0:	2c23      	cmp	r4, #35	; 0x23
   d51f2:	bf8c      	ite	hi
   d51f4:	2000      	movhi	r0, #0
   d51f6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d51f8:	bd10      	pop	{r4, pc}
   d51fa:	bf00      	nop
   d51fc:	2003e714 	.word	0x2003e714

000d5200 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5200:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5202:	b538      	push	{r3, r4, r5, lr}
   d5204:	4604      	mov	r4, r0
   d5206:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5208:	d80a      	bhi.n	d5220 <pinMode+0x20>
   d520a:	29ff      	cmp	r1, #255	; 0xff
   d520c:	d008      	beq.n	d5220 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d520e:	f7ff ffd3 	bl	d51b8 <pinAvailable>
   d5212:	b128      	cbz	r0, d5220 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5214:	4629      	mov	r1, r5
   d5216:	4620      	mov	r0, r4
}
   d5218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d521c:	f7ff b834 	b.w	d4288 <HAL_Pin_Mode>
   d5220:	bd38      	pop	{r3, r4, r5, pc}

000d5222 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5222:	b538      	push	{r3, r4, r5, lr}
   d5224:	4604      	mov	r4, r0
   d5226:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5228:	f7ff f836 	bl	d4298 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d522c:	28ff      	cmp	r0, #255	; 0xff
   d522e:	d010      	beq.n	d5252 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5230:	2806      	cmp	r0, #6
   d5232:	d804      	bhi.n	d523e <digitalWrite+0x1c>
   d5234:	234d      	movs	r3, #77	; 0x4d
   d5236:	fa23 f000 	lsr.w	r0, r3, r0
   d523a:	07c3      	lsls	r3, r0, #31
   d523c:	d409      	bmi.n	d5252 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d523e:	4620      	mov	r0, r4
   d5240:	f7ff ffba 	bl	d51b8 <pinAvailable>
   d5244:	b128      	cbz	r0, d5252 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5246:	4629      	mov	r1, r5
   d5248:	4620      	mov	r0, r4
}
   d524a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d524e:	f7ff b82b 	b.w	d42a8 <HAL_GPIO_Write>
   d5252:	bd38      	pop	{r3, r4, r5, pc}

000d5254 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5254:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5256:	4c0c      	ldr	r4, [pc, #48]	; (d5288 <_GLOBAL__sub_I_SPI+0x34>)
   d5258:	4e0c      	ldr	r6, [pc, #48]	; (d528c <_GLOBAL__sub_I_SPI+0x38>)
   d525a:	4d0d      	ldr	r5, [pc, #52]	; (d5290 <_GLOBAL__sub_I_SPI+0x3c>)
   d525c:	2100      	movs	r1, #0
   d525e:	4620      	mov	r0, r4
   d5260:	f7ff fa24 	bl	d46ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5264:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5266:	4c0b      	ldr	r4, [pc, #44]	; (d5294 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5268:	4632      	mov	r2, r6
   d526a:	4629      	mov	r1, r5
   d526c:	f000 f834 	bl	d52d8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5270:	2101      	movs	r1, #1
   d5272:	4620      	mov	r0, r4
   d5274:	f7ff fa1a 	bl	d46ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5278:	4632      	mov	r2, r6
   d527a:	4629      	mov	r1, r5
   d527c:	4620      	mov	r0, r4
   d527e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5282:	f000 b829 	b.w	d52d8 <__aeabi_atexit>
   d5286:	bf00      	nop
   d5288:	2003e714 	.word	0x2003e714
   d528c:	2003e370 	.word	0x2003e370
   d5290:	000d469d 	.word	0x000d469d
   d5294:	2003e724 	.word	0x2003e724

000d5298 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5298:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d529a:	4d0b      	ldr	r5, [pc, #44]	; (d52c8 <_Z19__fetch_global_Wirev+0x30>)
   d529c:	6829      	ldr	r1, [r5, #0]
   d529e:	f011 0401 	ands.w	r4, r1, #1
   d52a2:	d10f      	bne.n	d52c4 <_Z19__fetch_global_Wirev+0x2c>
   d52a4:	4628      	mov	r0, r5
   d52a6:	f7fe fefa 	bl	d409e <__cxa_guard_acquire>
   d52aa:	b158      	cbz	r0, d52c4 <_Z19__fetch_global_Wirev+0x2c>
   d52ac:	4621      	mov	r1, r4
   d52ae:	4807      	ldr	r0, [pc, #28]	; (d52cc <_Z19__fetch_global_Wirev+0x34>)
   d52b0:	f7ff fe16 	bl	d4ee0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d52b4:	4628      	mov	r0, r5
   d52b6:	f7fe fef7 	bl	d40a8 <__cxa_guard_release>
   d52ba:	4a05      	ldr	r2, [pc, #20]	; (d52d0 <_Z19__fetch_global_Wirev+0x38>)
   d52bc:	4905      	ldr	r1, [pc, #20]	; (d52d4 <_Z19__fetch_global_Wirev+0x3c>)
   d52be:	4803      	ldr	r0, [pc, #12]	; (d52cc <_Z19__fetch_global_Wirev+0x34>)
   d52c0:	f000 f80a 	bl	d52d8 <__aeabi_atexit>
	return wire;
}
   d52c4:	4801      	ldr	r0, [pc, #4]	; (d52cc <_Z19__fetch_global_Wirev+0x34>)
   d52c6:	bd38      	pop	{r3, r4, r5, pc}
   d52c8:	2003e738 	.word	0x2003e738
   d52cc:	2003e73c 	.word	0x2003e73c
   d52d0:	2003e370 	.word	0x2003e370
   d52d4:	000d4e89 	.word	0x000d4e89

000d52d8 <__aeabi_atexit>:
   d52d8:	460b      	mov	r3, r1
   d52da:	4601      	mov	r1, r0
   d52dc:	4618      	mov	r0, r3
   d52de:	f000 b94b 	b.w	d5578 <__cxa_atexit>

000d52e2 <_ZdlPvj>:
   d52e2:	f7fe bed8 	b.w	d4096 <_ZdlPv>
	...

000d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d52e8:	4b18      	ldr	r3, [pc, #96]	; (d534c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d52ea:	681a      	ldr	r2, [r3, #0]
   d52ec:	07d1      	lsls	r1, r2, #31
   d52ee:	bf5c      	itt	pl
   d52f0:	2201      	movpl	r2, #1
   d52f2:	601a      	strpl	r2, [r3, #0]
   d52f4:	4b16      	ldr	r3, [pc, #88]	; (d5350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d52f6:	681a      	ldr	r2, [r3, #0]
   d52f8:	07d2      	lsls	r2, r2, #31
   d52fa:	bf5c      	itt	pl
   d52fc:	2201      	movpl	r2, #1
   d52fe:	601a      	strpl	r2, [r3, #0]
   d5300:	4b14      	ldr	r3, [pc, #80]	; (d5354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5302:	681a      	ldr	r2, [r3, #0]
   d5304:	07d0      	lsls	r0, r2, #31
   d5306:	bf5c      	itt	pl
   d5308:	2201      	movpl	r2, #1
   d530a:	601a      	strpl	r2, [r3, #0]
   d530c:	4b12      	ldr	r3, [pc, #72]	; (d5358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d530e:	681a      	ldr	r2, [r3, #0]
   d5310:	07d1      	lsls	r1, r2, #31
   d5312:	bf5c      	itt	pl
   d5314:	2201      	movpl	r2, #1
   d5316:	601a      	strpl	r2, [r3, #0]
   d5318:	4b10      	ldr	r3, [pc, #64]	; (d535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d531a:	681a      	ldr	r2, [r3, #0]
   d531c:	07d2      	lsls	r2, r2, #31
   d531e:	bf5c      	itt	pl
   d5320:	2201      	movpl	r2, #1
   d5322:	601a      	strpl	r2, [r3, #0]
   d5324:	4b0e      	ldr	r3, [pc, #56]	; (d5360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5326:	681a      	ldr	r2, [r3, #0]
   d5328:	07d0      	lsls	r0, r2, #31
   d532a:	bf5c      	itt	pl
   d532c:	2201      	movpl	r2, #1
   d532e:	601a      	strpl	r2, [r3, #0]
   d5330:	4b0c      	ldr	r3, [pc, #48]	; (d5364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5332:	681a      	ldr	r2, [r3, #0]
   d5334:	07d1      	lsls	r1, r2, #31
   d5336:	bf5c      	itt	pl
   d5338:	2201      	movpl	r2, #1
   d533a:	601a      	strpl	r2, [r3, #0]
   d533c:	4b0a      	ldr	r3, [pc, #40]	; (d5368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d533e:	681a      	ldr	r2, [r3, #0]
   d5340:	07d2      	lsls	r2, r2, #31
   d5342:	bf5c      	itt	pl
   d5344:	2201      	movpl	r2, #1
   d5346:	601a      	strpl	r2, [r3, #0]
   d5348:	4770      	bx	lr
   d534a:	bf00      	nop
   d534c:	2003e76c 	.word	0x2003e76c
   d5350:	2003e768 	.word	0x2003e768
   d5354:	2003e764 	.word	0x2003e764
   d5358:	2003e760 	.word	0x2003e760
   d535c:	2003e75c 	.word	0x2003e75c
   d5360:	2003e758 	.word	0x2003e758
   d5364:	2003e754 	.word	0x2003e754
   d5368:	2003e750 	.word	0x2003e750

000d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d536c:	4b24      	ldr	r3, [pc, #144]	; (d5400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	07d0      	lsls	r0, r2, #31
   d5372:	bf5c      	itt	pl
   d5374:	2201      	movpl	r2, #1
   d5376:	601a      	strpl	r2, [r3, #0]
   d5378:	4b22      	ldr	r3, [pc, #136]	; (d5404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d537a:	681a      	ldr	r2, [r3, #0]
   d537c:	07d1      	lsls	r1, r2, #31
   d537e:	bf5c      	itt	pl
   d5380:	2201      	movpl	r2, #1
   d5382:	601a      	strpl	r2, [r3, #0]
   d5384:	4b20      	ldr	r3, [pc, #128]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5386:	681a      	ldr	r2, [r3, #0]
   d5388:	07d2      	lsls	r2, r2, #31
   d538a:	bf5c      	itt	pl
   d538c:	2201      	movpl	r2, #1
   d538e:	601a      	strpl	r2, [r3, #0]
   d5390:	4b1e      	ldr	r3, [pc, #120]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	07d0      	lsls	r0, r2, #31
   d5396:	bf5c      	itt	pl
   d5398:	2201      	movpl	r2, #1
   d539a:	601a      	strpl	r2, [r3, #0]
   d539c:	4b1c      	ldr	r3, [pc, #112]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d539e:	681a      	ldr	r2, [r3, #0]
   d53a0:	07d1      	lsls	r1, r2, #31
   d53a2:	bf5c      	itt	pl
   d53a4:	2201      	movpl	r2, #1
   d53a6:	601a      	strpl	r2, [r3, #0]
   d53a8:	4b1a      	ldr	r3, [pc, #104]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d53aa:	681a      	ldr	r2, [r3, #0]
   d53ac:	07d2      	lsls	r2, r2, #31
   d53ae:	bf5c      	itt	pl
   d53b0:	2201      	movpl	r2, #1
   d53b2:	601a      	strpl	r2, [r3, #0]
   d53b4:	4b18      	ldr	r3, [pc, #96]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	07d0      	lsls	r0, r2, #31
   d53ba:	bf5c      	itt	pl
   d53bc:	2201      	movpl	r2, #1
   d53be:	601a      	strpl	r2, [r3, #0]
   d53c0:	4b16      	ldr	r3, [pc, #88]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d53c2:	681a      	ldr	r2, [r3, #0]
   d53c4:	07d1      	lsls	r1, r2, #31
   d53c6:	bf5c      	itt	pl
   d53c8:	2201      	movpl	r2, #1
   d53ca:	601a      	strpl	r2, [r3, #0]
   d53cc:	4b14      	ldr	r3, [pc, #80]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d53ce:	681a      	ldr	r2, [r3, #0]
   d53d0:	07d2      	lsls	r2, r2, #31
   d53d2:	bf5c      	itt	pl
   d53d4:	2201      	movpl	r2, #1
   d53d6:	601a      	strpl	r2, [r3, #0]
   d53d8:	4b12      	ldr	r3, [pc, #72]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d53da:	681a      	ldr	r2, [r3, #0]
   d53dc:	07d0      	lsls	r0, r2, #31
   d53de:	bf5c      	itt	pl
   d53e0:	2201      	movpl	r2, #1
   d53e2:	601a      	strpl	r2, [r3, #0]
   d53e4:	4b10      	ldr	r3, [pc, #64]	; (d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d53e6:	681a      	ldr	r2, [r3, #0]
   d53e8:	07d1      	lsls	r1, r2, #31
   d53ea:	bf5c      	itt	pl
   d53ec:	2201      	movpl	r2, #1
   d53ee:	601a      	strpl	r2, [r3, #0]
   d53f0:	4b0e      	ldr	r3, [pc, #56]	; (d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d2      	lsls	r2, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4770      	bx	lr
   d53fe:	bf00      	nop
   d5400:	2003e79c 	.word	0x2003e79c
   d5404:	2003e798 	.word	0x2003e798
   d5408:	2003e794 	.word	0x2003e794
   d540c:	2003e790 	.word	0x2003e790
   d5410:	2003e78c 	.word	0x2003e78c
   d5414:	2003e788 	.word	0x2003e788
   d5418:	2003e784 	.word	0x2003e784
   d541c:	2003e780 	.word	0x2003e780
   d5420:	2003e77c 	.word	0x2003e77c
   d5424:	2003e778 	.word	0x2003e778
   d5428:	2003e774 	.word	0x2003e774
   d542c:	2003e770 	.word	0x2003e770

000d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5430:	4b24      	ldr	r3, [pc, #144]	; (d54c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5432:	681a      	ldr	r2, [r3, #0]
   d5434:	07d0      	lsls	r0, r2, #31
   d5436:	bf5c      	itt	pl
   d5438:	2201      	movpl	r2, #1
   d543a:	601a      	strpl	r2, [r3, #0]
   d543c:	4b22      	ldr	r3, [pc, #136]	; (d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d543e:	681a      	ldr	r2, [r3, #0]
   d5440:	07d1      	lsls	r1, r2, #31
   d5442:	bf5c      	itt	pl
   d5444:	2201      	movpl	r2, #1
   d5446:	601a      	strpl	r2, [r3, #0]
   d5448:	4b20      	ldr	r3, [pc, #128]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d544a:	681a      	ldr	r2, [r3, #0]
   d544c:	07d2      	lsls	r2, r2, #31
   d544e:	bf5c      	itt	pl
   d5450:	2201      	movpl	r2, #1
   d5452:	601a      	strpl	r2, [r3, #0]
   d5454:	4b1e      	ldr	r3, [pc, #120]	; (d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5456:	681a      	ldr	r2, [r3, #0]
   d5458:	07d0      	lsls	r0, r2, #31
   d545a:	bf5c      	itt	pl
   d545c:	2201      	movpl	r2, #1
   d545e:	601a      	strpl	r2, [r3, #0]
   d5460:	4b1c      	ldr	r3, [pc, #112]	; (d54d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5462:	681a      	ldr	r2, [r3, #0]
   d5464:	07d1      	lsls	r1, r2, #31
   d5466:	bf5c      	itt	pl
   d5468:	2201      	movpl	r2, #1
   d546a:	601a      	strpl	r2, [r3, #0]
   d546c:	4b1a      	ldr	r3, [pc, #104]	; (d54d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d546e:	681a      	ldr	r2, [r3, #0]
   d5470:	07d2      	lsls	r2, r2, #31
   d5472:	bf5c      	itt	pl
   d5474:	2201      	movpl	r2, #1
   d5476:	601a      	strpl	r2, [r3, #0]
   d5478:	4b18      	ldr	r3, [pc, #96]	; (d54dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d547a:	681a      	ldr	r2, [r3, #0]
   d547c:	07d0      	lsls	r0, r2, #31
   d547e:	bf5c      	itt	pl
   d5480:	2201      	movpl	r2, #1
   d5482:	601a      	strpl	r2, [r3, #0]
   d5484:	4b16      	ldr	r3, [pc, #88]	; (d54e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5486:	681a      	ldr	r2, [r3, #0]
   d5488:	07d1      	lsls	r1, r2, #31
   d548a:	bf5c      	itt	pl
   d548c:	2201      	movpl	r2, #1
   d548e:	601a      	strpl	r2, [r3, #0]
   d5490:	4b14      	ldr	r3, [pc, #80]	; (d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5492:	681a      	ldr	r2, [r3, #0]
   d5494:	07d2      	lsls	r2, r2, #31
   d5496:	bf5c      	itt	pl
   d5498:	2201      	movpl	r2, #1
   d549a:	601a      	strpl	r2, [r3, #0]
   d549c:	4b12      	ldr	r3, [pc, #72]	; (d54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d549e:	681a      	ldr	r2, [r3, #0]
   d54a0:	07d0      	lsls	r0, r2, #31
   d54a2:	bf5c      	itt	pl
   d54a4:	2201      	movpl	r2, #1
   d54a6:	601a      	strpl	r2, [r3, #0]
   d54a8:	4b10      	ldr	r3, [pc, #64]	; (d54ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d54aa:	681a      	ldr	r2, [r3, #0]
   d54ac:	07d1      	lsls	r1, r2, #31
   d54ae:	bf5c      	itt	pl
   d54b0:	2201      	movpl	r2, #1
   d54b2:	601a      	strpl	r2, [r3, #0]
   d54b4:	4b0e      	ldr	r3, [pc, #56]	; (d54f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d54b6:	681a      	ldr	r2, [r3, #0]
   d54b8:	07d2      	lsls	r2, r2, #31
   d54ba:	bf5c      	itt	pl
   d54bc:	2201      	movpl	r2, #1
   d54be:	601a      	strpl	r2, [r3, #0]
   d54c0:	4770      	bx	lr
   d54c2:	bf00      	nop
   d54c4:	2003e7cc 	.word	0x2003e7cc
   d54c8:	2003e7c8 	.word	0x2003e7c8
   d54cc:	2003e7c4 	.word	0x2003e7c4
   d54d0:	2003e7c0 	.word	0x2003e7c0
   d54d4:	2003e7bc 	.word	0x2003e7bc
   d54d8:	2003e7b8 	.word	0x2003e7b8
   d54dc:	2003e7b4 	.word	0x2003e7b4
   d54e0:	2003e7b0 	.word	0x2003e7b0
   d54e4:	2003e7ac 	.word	0x2003e7ac
   d54e8:	2003e7a8 	.word	0x2003e7a8
   d54ec:	2003e7a4 	.word	0x2003e7a4
   d54f0:	2003e7a0 	.word	0x2003e7a0

000d54f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d54f4:	4b18      	ldr	r3, [pc, #96]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d54f6:	681a      	ldr	r2, [r3, #0]
   d54f8:	07d1      	lsls	r1, r2, #31
   d54fa:	bf5c      	itt	pl
   d54fc:	2201      	movpl	r2, #1
   d54fe:	601a      	strpl	r2, [r3, #0]
   d5500:	4b16      	ldr	r3, [pc, #88]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5502:	681a      	ldr	r2, [r3, #0]
   d5504:	07d2      	lsls	r2, r2, #31
   d5506:	bf5c      	itt	pl
   d5508:	2201      	movpl	r2, #1
   d550a:	601a      	strpl	r2, [r3, #0]
   d550c:	4b14      	ldr	r3, [pc, #80]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d550e:	681a      	ldr	r2, [r3, #0]
   d5510:	07d0      	lsls	r0, r2, #31
   d5512:	bf5c      	itt	pl
   d5514:	2201      	movpl	r2, #1
   d5516:	601a      	strpl	r2, [r3, #0]
   d5518:	4b12      	ldr	r3, [pc, #72]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d551a:	681a      	ldr	r2, [r3, #0]
   d551c:	07d1      	lsls	r1, r2, #31
   d551e:	bf5c      	itt	pl
   d5520:	2201      	movpl	r2, #1
   d5522:	601a      	strpl	r2, [r3, #0]
   d5524:	4b10      	ldr	r3, [pc, #64]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5526:	681a      	ldr	r2, [r3, #0]
   d5528:	07d2      	lsls	r2, r2, #31
   d552a:	bf5c      	itt	pl
   d552c:	2201      	movpl	r2, #1
   d552e:	601a      	strpl	r2, [r3, #0]
   d5530:	4b0e      	ldr	r3, [pc, #56]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5532:	681a      	ldr	r2, [r3, #0]
   d5534:	07d0      	lsls	r0, r2, #31
   d5536:	bf5c      	itt	pl
   d5538:	2201      	movpl	r2, #1
   d553a:	601a      	strpl	r2, [r3, #0]
   d553c:	4b0c      	ldr	r3, [pc, #48]	; (d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d553e:	681a      	ldr	r2, [r3, #0]
   d5540:	07d1      	lsls	r1, r2, #31
   d5542:	bf5c      	itt	pl
   d5544:	2201      	movpl	r2, #1
   d5546:	601a      	strpl	r2, [r3, #0]
   d5548:	4b0a      	ldr	r3, [pc, #40]	; (d5574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d554a:	681a      	ldr	r2, [r3, #0]
   d554c:	07d2      	lsls	r2, r2, #31
   d554e:	bf5c      	itt	pl
   d5550:	2201      	movpl	r2, #1
   d5552:	601a      	strpl	r2, [r3, #0]
   d5554:	4770      	bx	lr
   d5556:	bf00      	nop
   d5558:	2003e7ec 	.word	0x2003e7ec
   d555c:	2003e7e8 	.word	0x2003e7e8
   d5560:	2003e7e4 	.word	0x2003e7e4
   d5564:	2003e7e0 	.word	0x2003e7e0
   d5568:	2003e7dc 	.word	0x2003e7dc
   d556c:	2003e7d8 	.word	0x2003e7d8
   d5570:	2003e7d4 	.word	0x2003e7d4
   d5574:	2003e7d0 	.word	0x2003e7d0

000d5578 <__cxa_atexit>:
   d5578:	b510      	push	{r4, lr}
   d557a:	4c05      	ldr	r4, [pc, #20]	; (d5590 <__cxa_atexit+0x18>)
   d557c:	4613      	mov	r3, r2
   d557e:	b12c      	cbz	r4, d558c <__cxa_atexit+0x14>
   d5580:	460a      	mov	r2, r1
   d5582:	4601      	mov	r1, r0
   d5584:	2002      	movs	r0, #2
   d5586:	f3af 8000 	nop.w
   d558a:	bd10      	pop	{r4, pc}
   d558c:	4620      	mov	r0, r4
   d558e:	bd10      	pop	{r4, pc}
   d5590:	00000000 	.word	0x00000000

000d5594 <memcpy>:
   d5594:	b510      	push	{r4, lr}
   d5596:	1e43      	subs	r3, r0, #1
   d5598:	440a      	add	r2, r1
   d559a:	4291      	cmp	r1, r2
   d559c:	d004      	beq.n	d55a8 <memcpy+0x14>
   d559e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d55a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d55a6:	e7f8      	b.n	d559a <memcpy+0x6>
   d55a8:	bd10      	pop	{r4, pc}

000d55aa <memset>:
   d55aa:	4402      	add	r2, r0
   d55ac:	4603      	mov	r3, r0
   d55ae:	4293      	cmp	r3, r2
   d55b0:	d002      	beq.n	d55b8 <memset+0xe>
   d55b2:	f803 1b01 	strb.w	r1, [r3], #1
   d55b6:	e7fa      	b.n	d55ae <memset+0x4>
   d55b8:	4770      	bx	lr
	...

000d55bc <srand>:
   d55bc:	b538      	push	{r3, r4, r5, lr}
   d55be:	4b12      	ldr	r3, [pc, #72]	; (d5608 <srand+0x4c>)
   d55c0:	681c      	ldr	r4, [r3, #0]
   d55c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d55c4:	4605      	mov	r5, r0
   d55c6:	b9d3      	cbnz	r3, d55fe <srand+0x42>
   d55c8:	2018      	movs	r0, #24
   d55ca:	f7ff f811 	bl	d45f0 <malloc>
   d55ce:	f243 330e 	movw	r3, #13070	; 0x330e
   d55d2:	63a0      	str	r0, [r4, #56]	; 0x38
   d55d4:	8003      	strh	r3, [r0, #0]
   d55d6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d55da:	8043      	strh	r3, [r0, #2]
   d55dc:	f241 2334 	movw	r3, #4660	; 0x1234
   d55e0:	8083      	strh	r3, [r0, #4]
   d55e2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d55e6:	80c3      	strh	r3, [r0, #6]
   d55e8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d55ec:	8103      	strh	r3, [r0, #8]
   d55ee:	2305      	movs	r3, #5
   d55f0:	8143      	strh	r3, [r0, #10]
   d55f2:	230b      	movs	r3, #11
   d55f4:	8183      	strh	r3, [r0, #12]
   d55f6:	2201      	movs	r2, #1
   d55f8:	2300      	movs	r3, #0
   d55fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d55fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5600:	2200      	movs	r2, #0
   d5602:	611d      	str	r5, [r3, #16]
   d5604:	615a      	str	r2, [r3, #20]
   d5606:	bd38      	pop	{r3, r4, r5, pc}
   d5608:	2003e36c 	.word	0x2003e36c

000d560c <strcmp>:
   d560c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5610:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5614:	2a01      	cmp	r2, #1
   d5616:	bf28      	it	cs
   d5618:	429a      	cmpcs	r2, r3
   d561a:	d0f7      	beq.n	d560c <strcmp>
   d561c:	1ad0      	subs	r0, r2, r3
   d561e:	4770      	bx	lr

000d5620 <strcpy>:
   d5620:	4603      	mov	r3, r0
   d5622:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5626:	f803 2b01 	strb.w	r2, [r3], #1
   d562a:	2a00      	cmp	r2, #0
   d562c:	d1f9      	bne.n	d5622 <strcpy+0x2>
   d562e:	4770      	bx	lr

000d5630 <strlen>:
   d5630:	4603      	mov	r3, r0
   d5632:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5636:	2a00      	cmp	r2, #0
   d5638:	d1fb      	bne.n	d5632 <strlen+0x2>
   d563a:	1a18      	subs	r0, r3, r0
   d563c:	3801      	subs	r0, #1
   d563e:	4770      	bx	lr

000d5640 <dynalib_user>:
   d5640:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5650:	0000 0000 6e6f 6f00 6666 7200 7465 7275     ....on.off.retur
   d5660:	566e 6c61 6575 6c00 6465 0000               nValue.led..

000d566c <_ZTVN5spark13EthernetClassE>:
	...
   d5674:	467f 000d 4675 000d 466b 000d 4661 000d     .F..uF..kF..aF..
   d5684:	4655 000d 4649 000d 463d 000d 4635 000d     UF..IF..=F..5F..
   d5694:	462b 000d 4621 000d 50d9 000d               +F..!F...P..

000d56a0 <_ZTV8SPIClass>:
	...
   d56a8:	469d 000d 469f 000d 6162 6475 5300 7265     .F...F..baud.Ser
   d56b8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d56c8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d56d8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d56e8:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d56f8:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d5708:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d5718:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d5728:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d5738:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d5748:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d5758:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d5768:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d5778:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d5788:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d5798:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d57a8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d57b8 <_ZTV9IPAddress>:
	...
   d57c0:	4afb 000d 4aeb 000d 4aed 000d               .J...J...J..

000d57cc <_ZTV9USBSerial>:
	...
   d57d4:	4bd5 000d 4c25 000d 4c33 000d 487d 000d     .K..%L..3L..}H..
   d57e4:	4c11 000d 4bd7 000d 4bed 000d 4c1f 000d     .L...K...K...L..
   d57f4:	4c03 000d 4bd1 000d                         .L...K..

000d57fc <_ZTVN5spark13CellularClassE>:
	...
   d5804:	4d3f 000d 4d35 000d 4d2b 000d 4ce1 000d     ?M..5M..+M...L..
   d5814:	4d1f 000d 4d13 000d 4d07 000d 4cff 000d     .M...M...M...L..
   d5824:	4cf5 000d 4ceb 000d 50d9 000d               .L...L...P..

000d5830 <_ZTV11USARTSerial>:
	...
   d5838:	4d79 000d 4dc9 000d 4dd7 000d 487d 000d     yM...M...M..}H..
   d5848:	4d8d 000d 4daf 000d 4d9b 000d 4dc3 000d     .M...M...M...M..
   d5858:	4d7b 000d 4d7f 000d                         {M...M..

000d5860 <_ZTV7TwoWire>:
	...
   d5868:	4e89 000d 4ed3 000d 4eab 000d 4e8b 000d     .N...N...N...N..
   d5878:	4eb3 000d 4ebb 000d 4ec3 000d 4ecb 000d     .N...N...N...N..

000d5888 <_ZTVN5spark9MeshClassE>:
	...
   d5890:	4f6b 000d 4f61 000d 4f57 000d 4f4d 000d     kO..aO..WO..MO..
   d58a0:	4f41 000d 4f35 000d 4f29 000d 4f21 000d     AO..5O..)O..!O..
   d58b0:	4f17 000d 4f0d 000d 50d9 000d               .O...O...P..

000d58bc <_ZTVN5spark12NetworkClassE>:
	...
   d58c4:	5071 000d 507b 000d 5085 000d 508f 000d     qP..{P...P...P..
   d58d4:	5099 000d 50a5 000d 50b1 000d 50bd 000d     .P...P...P...P..
   d58e4:	50c5 000d 50cf 000d 50d9 000d               .P...P...P..

000d58f0 <__sf_fake_stdin>:
	...

000d5910 <__sf_fake_stdout>:
	...

000d5930 <__sf_fake_stderr>:
	...
   d5950:	0043                                        C.

000d5952 <link_const_variable_data_end>:
	...

000d5954 <link_constructors_location>:
   d5954:	000d420d 	.word	0x000d420d
   d5958:	000d4689 	.word	0x000d4689
   d595c:	000d46dd 	.word	0x000d46dd
   d5960:	000d486d 	.word	0x000d486d
   d5964:	000d4959 	.word	0x000d4959
   d5968:	000d4969 	.word	0x000d4969
   d596c:	000d49a1 	.word	0x000d49a1
   d5970:	000d4d49 	.word	0x000d4d49
   d5974:	000d5021 	.word	0x000d5021
   d5978:	000d51a5 	.word	0x000d51a5
   d597c:	000d5255 	.word	0x000d5255
   d5980:	000d52e9 	.word	0x000d52e9
   d5984:	000d536d 	.word	0x000d536d
   d5988:	000d5431 	.word	0x000d5431
   d598c:	000d54f5 	.word	0x000d54f5
