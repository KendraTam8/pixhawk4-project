
c:/Users/kendr/OneDrive/Documents/GitHub/Particle/FirstProject/target/1.4.4/boron/FirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000018f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000159ac  2**0
                  CONTENTS
  4 .data         00000070  2003e328  000d5910  0000e328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000458  2003e398  2003e398  0001e398  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5980  000d5980  00015980  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d59a8  000d59a8  000159a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d1cc5  00000000  00000000  000159ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010640  00000000  00000000  000e7671  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e4a1  00000000  00000000  000f7cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024c0  00000000  00000000  00116152  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004610  00000000  00000000  00118612  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033ec7  00000000  00000000  0011cc22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000272ab  00000000  00000000  00150ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101357  00000000  00000000  00177d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cb78  00000000  00000000  002790ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fa71 	bl	d5514 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fa76 	bl	d552a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e328 	.word	0x2003e328
   d4048:	000d5910 	.word	0x000d5910
   d404c:	2003e398 	.word	0x2003e398
   d4050:	2003e398 	.word	0x2003e398
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fcad 	bl	d49b8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5904 	.word	0x000d5904
   d4080:	000d58c8 	.word	0x000d58c8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b838 	b.w	d40f8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f86d 	bl	d4168 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bc5f 	b.w	d4954 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba5f 	b.w	d4558 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba5d 	b.w	d4558 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z9ledToggle6String>:


// We're going to have a super cool function now that gets called when a matching API request is sent
// This is the ledToggle function we registered to the "led" Particle.function earlier.

int ledToggle(String command) {
   d40b0:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b2:	490e      	ldr	r1, [pc, #56]	; (d40ec <_Z9ledToggle6String+0x3c>)
   d40b4:	4605      	mov	r5, r0
   d40b6:	f000 fb45 	bl	d4744 <_ZNK6String6equalsEPKc>
    Then, the function returns a value to us to let us know what happened.
    In this case, it will return 1 for the LEDs turning on, 0 for the LEDs turning off,
    and -1 if we received a totally bogus command that didn't do anything to the LEDs.
    */

    if (command=="on") {
   d40ba:	4604      	mov	r4, r0
   d40bc:	b130      	cbz	r0, d40cc <_Z9ledToggle6String+0x1c>
        digitalWrite(led1,HIGH);
   d40be:	4b0c      	ldr	r3, [pc, #48]	; (d40f0 <_Z9ledToggle6String+0x40>)
   d40c0:	2101      	movs	r1, #1
   d40c2:	8818      	ldrh	r0, [r3, #0]
   d40c4:	f001 f855 	bl	d5172 <digitalWrite>
   d40c8:	2001      	movs	r0, #1
   d40ca:	bd38      	pop	{r3, r4, r5, pc}
   d40cc:	4909      	ldr	r1, [pc, #36]	; (d40f4 <_Z9ledToggle6String+0x44>)
   d40ce:	4628      	mov	r0, r5
   d40d0:	f000 fb38 	bl	d4744 <_ZNK6String6equalsEPKc>
        //digitalWrite(led2,HIGH);
        return 1;
    }
    else if (command=="off") {
   d40d4:	b130      	cbz	r0, d40e4 <_Z9ledToggle6String+0x34>
        digitalWrite(led1,LOW);
   d40d6:	4b06      	ldr	r3, [pc, #24]	; (d40f0 <_Z9ledToggle6String+0x40>)
   d40d8:	4621      	mov	r1, r4
   d40da:	8818      	ldrh	r0, [r3, #0]
   d40dc:	f001 f849 	bl	d5172 <digitalWrite>
        //digitalWrite(led2,LOW);
        return 0;
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd38      	pop	{r3, r4, r5, pc}
    }
    else {
        return -1;
   d40e4:	f04f 30ff 	mov.w	r0, #4294967295
    }
   d40e8:	bd38      	pop	{r3, r4, r5, pc}
   d40ea:	bf00      	nop
   d40ec:	000d55c4 	.word	0x000d55c4
   d40f0:	2003e32c 	.word	0x2003e32c
   d40f4:	000d55c7 	.word	0x000d55c7

000d40f8 <setup>:

int ledToggle(String command); // Forward declaration
int ledToggle(String command); // Forward declaration

// setup() runs once, when the device is first turned on.
void setup() {
   d40f8:	b573      	push	{r0, r1, r4, r5, r6, lr}

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d40fa:	2308      	movs	r3, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d40fc:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d40fe:	466a      	mov	r2, sp
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4100:	2501      	movs	r5, #1
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4102:	9400      	str	r4, [sp, #0]
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4104:	4911      	ldr	r1, [pc, #68]	; (d414c <setup+0x54>)

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4106:	f8ad 3000 	strh.w	r3, [sp]

	// This is here to allow for debugging using the USB serial port
    Serial.begin();

	// Put initialization like pinMode and begin functions here.
	pinMode(led1, OUTPUT);
   d410a:	4e11      	ldr	r6, [pc, #68]	; (d4150 <setup+0x58>)
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d410c:	9501      	str	r5, [sp, #4]
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d410e:	4623      	mov	r3, r4
   d4110:	4620      	mov	r0, r4
   d4112:	f000 fa09 	bl	d4528 <spark_set_connection_property>
void setup() {
    // Set the keep-alive value for 3rd party SIM card here
    Particle.keepAlive(120);

	// This is here to allow for debugging using the USB serial port
    Serial.begin();
   d4116:	f000 fd6b 	bl	d4bf0 <_Z16_fetch_usbserialv>
   d411a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d411e:	f000 fd5b 	bl	d4bd8 <_ZN9USBSerial5beginEl>

	// Put initialization like pinMode and begin functions here.
	pinMode(led1, OUTPUT);
   d4122:	4629      	mov	r1, r5
   d4124:	8830      	ldrh	r0, [r6, #0]
   d4126:	f001 f813 	bl	d5150 <pinMode>
	//pinMode(led2, OUTPUT);

	digitalWrite(led1, HIGH);
   d412a:	4629      	mov	r1, r5
   d412c:	8830      	ldrh	r0, [r6, #0]
   d412e:	f001 f820 	bl	d5172 <digitalWrite>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4132:	4623      	mov	r3, r4
   d4134:	2202      	movs	r2, #2
   d4136:	4907      	ldr	r1, [pc, #28]	; (d4154 <setup+0x5c>)
   d4138:	4807      	ldr	r0, [pc, #28]	; (d4158 <setup+0x60>)
   d413a:	f000 f9e5 	bl	d4508 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d413e:	4a07      	ldr	r2, [pc, #28]	; (d415c <setup+0x64>)
   d4140:	4907      	ldr	r1, [pc, #28]	; (d4160 <setup+0x68>)
   d4142:	4808      	ldr	r0, [pc, #32]	; (d4164 <setup+0x6c>)
   d4144:	f000 fc68 	bl	d4a18 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
	// This is saying that when we ask the cloud for the function "led", it will employ the function ledToggle() from this app.

	// For good measure, let's also make sure both LEDs are off when we start:
	// digitalWrite(led1, LOW);
	// digitalWrite(led2, LOW);
	}
   d4148:	b002      	add	sp, #8
   d414a:	bd70      	pop	{r4, r5, r6, pc}
   d414c:	0001d4c0 	.word	0x0001d4c0
   d4150:	2003e32c 	.word	0x2003e32c
   d4154:	2003e39c 	.word	0x2003e39c
   d4158:	000d55cb 	.word	0x000d55cb
   d415c:	000d55d7 	.word	0x000d55d7
   d4160:	000d40b1 	.word	0x000d40b1
   d4164:	000d49ed 	.word	0x000d49ed

000d4168 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4168:	b510      	push	{r4, lr}

	// And repeat!
	*/

	// check to see what the value of the photoresistor or phototransistor is and store it in the int variable analogvalue
    analogvalue = analogRead(photosensor);
   d416a:	4b09      	ldr	r3, [pc, #36]	; (d4190 <loop+0x28>)
   d416c:	4c09      	ldr	r4, [pc, #36]	; (d4194 <loop+0x2c>)
   d416e:	8818      	ldrh	r0, [r3, #0]
   d4170:	f001 f818 	bl	d51a4 <analogRead>
   d4174:	6020      	str	r0, [r4, #0]

    // This prints the value to the USB debugging serial port (for optional debugging purposes)
    Serial.printlnf("%d", analogvalue);
   d4176:	f000 fd3b 	bl	d4bf0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d417a:	6823      	ldr	r3, [r4, #0]
   d417c:	4a06      	ldr	r2, [pc, #24]	; (d4198 <loop+0x30>)
   d417e:	2101      	movs	r1, #1
   d4180:	f000 fb5e 	bl	d4840 <_ZN5Print11printf_implEbPKcz>

    // This delay is just to prevent overflowing the serial buffer, plus we really don't need to read the sensor more than
    // 10 times per second (100 millisecond delay)
    delay(100);
   d4184:	2064      	movs	r0, #100	; 0x64
}
   d4186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // This prints the value to the USB debugging serial port (for optional debugging purposes)
    Serial.printlnf("%d", analogvalue);

    // This delay is just to prevent overflowing the serial buffer, plus we really don't need to read the sensor more than
    // 10 times per second (100 millisecond delay)
    delay(100);
   d418a:	f000 bba5 	b.w	d48d8 <delay>
   d418e:	bf00      	nop
   d4190:	2003e328 	.word	0x2003e328
   d4194:	2003e39c 	.word	0x2003e39c
   d4198:	000d55db 	.word	0x000d55db

000d419c <_GLOBAL__sub_I_led1>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d419c:	f000 b810 	b.w	d41c0 <HAL_Pin_Map>

000d41a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <netdb_freeaddrinfo+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	689b      	ldr	r3, [r3, #8]
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	00030268 	.word	0x00030268

000d41b0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <netdb_getaddrinfo+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	68db      	ldr	r3, [r3, #12]
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	00030268 	.word	0x00030268

000d41c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <HAL_Pin_Map+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	681b      	ldr	r3, [r3, #0]
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	0003022c 	.word	0x0003022c

000d41d0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <HAL_Validate_Pin_Function+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	685b      	ldr	r3, [r3, #4]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	0003022c 	.word	0x0003022c

000d41e0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <HAL_Pin_Mode+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	689b      	ldr	r3, [r3, #8]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	0003022c 	.word	0x0003022c

000d41f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <HAL_Get_Pin_Mode+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	68db      	ldr	r3, [r3, #12]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	0003022c 	.word	0x0003022c

000d4200 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <HAL_GPIO_Write+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	691b      	ldr	r3, [r3, #16]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	0003022c 	.word	0x0003022c

000d4210 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <HAL_ADC_Read+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	0003022c 	.word	0x0003022c

000d4220 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <HAL_SPI_Init+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	69db      	ldr	r3, [r3, #28]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030230 	.word	0x00030230

000d4230 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <HAL_SPI_Is_Enabled+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	6a1b      	ldr	r3, [r3, #32]
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030230 	.word	0x00030230

000d4240 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <HAL_RNG_GetRandomNumber+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	685b      	ldr	r3, [r3, #4]
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030218 	.word	0x00030218

000d4250 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	695b      	ldr	r3, [r3, #20]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030218 	.word	0x00030218

000d4260 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <os_thread_is_current+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	689b      	ldr	r3, [r3, #8]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030248 	.word	0x00030248

000d4270 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <os_thread_join+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	691b      	ldr	r3, [r3, #16]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	00030248 	.word	0x00030248

000d4280 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <os_thread_cleanup+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	695b      	ldr	r3, [r3, #20]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030248 	.word	0x00030248

000d4290 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <os_mutex_create+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030248 	.word	0x00030248

000d42a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <os_mutex_recursive_create+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030248 	.word	0x00030248

000d42b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <inet_inet_ntop+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	695b      	ldr	r3, [r3, #20]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030264 	.word	0x00030264

000d42c0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_USART_Init+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	681b      	ldr	r3, [r3, #0]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003023c 	.word	0x0003023c

000d42d0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_USART_Write_Data+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	68db      	ldr	r3, [r3, #12]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	0003023c 	.word	0x0003023c

000d42e0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_USART_Available_Data+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	691b      	ldr	r3, [r3, #16]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	0003023c 	.word	0x0003023c

000d42f0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <HAL_USART_Read_Data+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	695b      	ldr	r3, [r3, #20]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	0003023c 	.word	0x0003023c

000d4300 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <HAL_USART_Peek_Data+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	699b      	ldr	r3, [r3, #24]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	0003023c 	.word	0x0003023c

000d4310 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_USART_Flush_Data+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	69db      	ldr	r3, [r3, #28]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003023c 	.word	0x0003023c

000d4320 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_USART_Is_Enabled+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6a1b      	ldr	r3, [r3, #32]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003023c 	.word	0x0003023c

000d4330 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_USART_Available_Data_For_Write+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003023c 	.word	0x0003023c

000d4340 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_I2C_Write_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6a1b      	ldr	r3, [r3, #32]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030228 	.word	0x00030228

000d4350 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_I2C_Available_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030228 	.word	0x00030228

000d4360 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_I2C_Read_Data+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030228 	.word	0x00030228

000d4370 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_I2C_Peek_Data+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030228 	.word	0x00030228

000d4380 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_I2C_Flush_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030228 	.word	0x00030228

000d4390 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_I2C_Is_Enabled+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030228 	.word	0x00030228

000d43a0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_I2C_Init+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030228 	.word	0x00030228

000d43b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Init+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	681b      	ldr	r3, [r3, #0]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_USB_USART_Begin+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	685b      	ldr	r3, [r3, #4]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003024c 	.word	0x0003024c

000d43d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_USB_USART_Available_Data+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	691b      	ldr	r3, [r3, #16]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003024c 	.word	0x0003024c

000d43e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	695b      	ldr	r3, [r3, #20]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	0003024c 	.word	0x0003024c

000d43f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_USB_USART_Receive_Data+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	699b      	ldr	r3, [r3, #24]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003024c 	.word	0x0003024c

000d4400 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_USB_USART_Send_Data+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	69db      	ldr	r3, [r3, #28]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	0003024c 	.word	0x0003024c

000d4410 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_USB_USART_Flush_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6a1b      	ldr	r3, [r3, #32]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	0003024c 	.word	0x0003024c

000d4420 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <set_system_mode+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	685b      	ldr	r3, [r3, #4]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030220 	.word	0x00030220

000d4430 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <system_delay_ms+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	695b      	ldr	r3, [r3, #20]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030220 	.word	0x00030220

000d4440 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b03      	ldr	r3, [pc, #12]	; (d4450 <system_ctrl_set_app_request_handler+0x10>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d444a:	9301      	str	r3, [sp, #4]
   d444c:	bd08      	pop	{r3, pc}
   d444e:	0000      	.short	0x0000
   d4450:	00030220 	.word	0x00030220

000d4454 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b03      	ldr	r3, [pc, #12]	; (d4464 <system_ctrl_set_result+0x10>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d445e:	9301      	str	r3, [sp, #4]
   d4460:	bd08      	pop	{r3, pc}
   d4462:	0000      	.short	0x0000
   d4464:	00030220 	.word	0x00030220

000d4468 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <network_connect+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	685b      	ldr	r3, [r3, #4]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030240 	.word	0x00030240

000d4478 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <network_connecting+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	689b      	ldr	r3, [r3, #8]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030240 	.word	0x00030240

000d4488 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <network_disconnect+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	68db      	ldr	r3, [r3, #12]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030240 	.word	0x00030240

000d4498 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <network_ready+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	691b      	ldr	r3, [r3, #16]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030240 	.word	0x00030240

000d44a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <network_on+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	695b      	ldr	r3, [r3, #20]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030240 	.word	0x00030240

000d44b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <network_off+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	699b      	ldr	r3, [r3, #24]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030240 	.word	0x00030240

000d44c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <network_listen+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	69db      	ldr	r3, [r3, #28]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030240 	.word	0x00030240

000d44d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <network_listening+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6a1b      	ldr	r3, [r3, #32]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030240 	.word	0x00030240

000d44e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <network_set_listen_timeout+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030240 	.word	0x00030240

000d44f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <network_get_listen_timeout+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030240 	.word	0x00030240

000d4508 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <spark_variable+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	681b      	ldr	r3, [r3, #0]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030244 	.word	0x00030244

000d4518 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <spark_function+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	685b      	ldr	r3, [r3, #4]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030244 	.word	0x00030244

000d4528 <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <spark_set_connection_property+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030244 	.word	0x00030244

000d4538 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <spark_set_random_seed_from_cloud_handler+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030244 	.word	0x00030244

000d4548 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <malloc+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	681b      	ldr	r3, [r3, #0]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003021c 	.word	0x0003021c

000d4558 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <free+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	685b      	ldr	r3, [r3, #4]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	0003021c 	.word	0x0003021c

000d4568 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <realloc+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	689b      	ldr	r3, [r3, #8]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	0003021c 	.word	0x0003021c

000d4578 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <vsnprintf+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	0003021c 	.word	0x0003021c

000d4588 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4588:	2200      	movs	r2, #0
   d458a:	4611      	mov	r1, r2
   d458c:	6840      	ldr	r0, [r0, #4]
   d458e:	f7ff bfa3 	b.w	d44d8 <network_listening>

000d4592 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4592:	2200      	movs	r2, #0
   d4594:	4611      	mov	r1, r2
   d4596:	6840      	ldr	r0, [r0, #4]
   d4598:	f7ff bfae 	b.w	d44f8 <network_get_listen_timeout>

000d459c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d459c:	2200      	movs	r2, #0
   d459e:	6840      	ldr	r0, [r0, #4]
   d45a0:	f7ff bfa2 	b.w	d44e8 <network_set_listen_timeout>

000d45a4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d45a4:	2200      	movs	r2, #0
   d45a6:	f081 0101 	eor.w	r1, r1, #1
   d45aa:	6840      	ldr	r0, [r0, #4]
   d45ac:	f7ff bf8c 	b.w	d44c8 <network_listen>

000d45b0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d45b0:	2300      	movs	r3, #0
   d45b2:	461a      	mov	r2, r3
   d45b4:	4619      	mov	r1, r3
   d45b6:	6840      	ldr	r0, [r0, #4]
   d45b8:	f7ff bf7e 	b.w	d44b8 <network_off>

000d45bc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d45bc:	2300      	movs	r3, #0
   d45be:	461a      	mov	r2, r3
   d45c0:	4619      	mov	r1, r3
   d45c2:	6840      	ldr	r0, [r0, #4]
   d45c4:	f7ff bf70 	b.w	d44a8 <network_on>

000d45c8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45c8:	2200      	movs	r2, #0
   d45ca:	4611      	mov	r1, r2
   d45cc:	6840      	ldr	r0, [r0, #4]
   d45ce:	f7ff bf63 	b.w	d4498 <network_ready>

000d45d2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d45d2:	2200      	movs	r2, #0
   d45d4:	4611      	mov	r1, r2
   d45d6:	6840      	ldr	r0, [r0, #4]
   d45d8:	f7ff bf4e 	b.w	d4478 <network_connecting>

000d45dc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45dc:	2200      	movs	r2, #0
   d45de:	2102      	movs	r1, #2
   d45e0:	6840      	ldr	r0, [r0, #4]
   d45e2:	f7ff bf51 	b.w	d4488 <network_disconnect>

000d45e6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d45e6:	2300      	movs	r3, #0
   d45e8:	461a      	mov	r2, r3
   d45ea:	6840      	ldr	r0, [r0, #4]
   d45ec:	f7ff bf3c 	b.w	d4468 <network_connect>

000d45f0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45f0:	4b02      	ldr	r3, [pc, #8]	; (d45fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45f2:	2203      	movs	r2, #3
   d45f4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45f6:	4a02      	ldr	r2, [pc, #8]	; (d4600 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45f8:	601a      	str	r2, [r3, #0]
   d45fa:	4770      	bx	lr
   d45fc:	2003e3a0 	.word	0x2003e3a0
   d4600:	000d55e8 	.word	0x000d55e8

000d4604 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4604:	4770      	bx	lr

000d4606 <_ZN8SPIClassD0Ev>:
   d4606:	b510      	push	{r4, lr}
   d4608:	2110      	movs	r1, #16
   d460a:	4604      	mov	r4, r0
   d460c:	f000 fe29 	bl	d5262 <_ZdlPvj>
   d4610:	4620      	mov	r0, r4
   d4612:	bd10      	pop	{r4, pc}

000d4614 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4614:	b570      	push	{r4, r5, r6, lr}
   d4616:	4b08      	ldr	r3, [pc, #32]	; (d4638 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4618:	6003      	str	r3, [r0, #0]
   d461a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d461c:	2500      	movs	r5, #0
   d461e:	460e      	mov	r6, r1
   d4620:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4624:	f7ff fe34 	bl	d4290 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4628:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d462a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d462c:	f7ff fdf8 	bl	d4220 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4630:	60a5      	str	r5, [r4, #8]
}
   d4632:	4620      	mov	r0, r4
   d4634:	bd70      	pop	{r4, r5, r6, pc}
   d4636:	bf00      	nop
   d4638:	000d561c 	.word	0x000d561c

000d463c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d463c:	7900      	ldrb	r0, [r0, #4]
   d463e:	f7ff bdf7 	b.w	d4230 <HAL_SPI_Is_Enabled>
	...

000d4644 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4644:	4b04      	ldr	r3, [pc, #16]	; (d4658 <_GLOBAL__sub_I_System+0x14>)
   d4646:	2000      	movs	r0, #0
   d4648:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d464c:	7018      	strb	r0, [r3, #0]
   d464e:	8058      	strh	r0, [r3, #2]
   d4650:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4652:	f7ff bee5 	b.w	d4420 <set_system_mode>
   d4656:	bf00      	nop
   d4658:	2003e3a8 	.word	0x2003e3a8

000d465c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d465c:	b510      	push	{r4, lr}
   d465e:	4604      	mov	r4, r0
{
	free(buffer);
   d4660:	6800      	ldr	r0, [r0, #0]
   d4662:	f7ff ff79 	bl	d4558 <free>
}
   d4666:	4620      	mov	r0, r4
   d4668:	bd10      	pop	{r4, pc}

000d466a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d466a:	b510      	push	{r4, lr}
   d466c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d466e:	6800      	ldr	r0, [r0, #0]
   d4670:	b108      	cbz	r0, d4676 <_ZN6String10invalidateEv+0xc>
   d4672:	f7ff ff71 	bl	d4558 <free>
	buffer = NULL;
   d4676:	2300      	movs	r3, #0
   d4678:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d467a:	60a3      	str	r3, [r4, #8]
   d467c:	6063      	str	r3, [r4, #4]
   d467e:	bd10      	pop	{r4, pc}

000d4680 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4680:	b538      	push	{r3, r4, r5, lr}
   d4682:	4604      	mov	r4, r0
   d4684:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4686:	6800      	ldr	r0, [r0, #0]
   d4688:	3101      	adds	r1, #1
   d468a:	f7ff ff6d 	bl	d4568 <realloc>
	if (newbuffer) {
   d468e:	b110      	cbz	r0, d4696 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4690:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4694:	2001      	movs	r0, #1
	}
	return 0;
}
   d4696:	bd38      	pop	{r3, r4, r5, pc}

000d4698 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4698:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d469a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d469c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d469e:	b113      	cbz	r3, d46a6 <_ZN6String7reserveEj+0xe>
   d46a0:	6843      	ldr	r3, [r0, #4]
   d46a2:	428b      	cmp	r3, r1
   d46a4:	d207      	bcs.n	d46b6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d46a6:	4620      	mov	r0, r4
   d46a8:	f7ff ffea 	bl	d4680 <_ZN6String12changeBufferEj>
   d46ac:	b120      	cbz	r0, d46b8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d46ae:	68a3      	ldr	r3, [r4, #8]
   d46b0:	b90b      	cbnz	r3, d46b6 <_ZN6String7reserveEj+0x1e>
   d46b2:	6822      	ldr	r2, [r4, #0]
   d46b4:	7013      	strb	r3, [r2, #0]
   d46b6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d46b8:	bd10      	pop	{r4, pc}

000d46ba <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d46ba:	b570      	push	{r4, r5, r6, lr}
   d46bc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d46be:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d46c0:	4604      	mov	r4, r0
   d46c2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d46c4:	f7ff ffe8 	bl	d4698 <_ZN6String7reserveEj>
   d46c8:	b918      	cbnz	r0, d46d2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d46ca:	4620      	mov	r0, r4
   d46cc:	f7ff ffcd 	bl	d466a <_ZN6String10invalidateEv>
		return *this;
   d46d0:	e009      	b.n	d46e6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d46d2:	462a      	mov	r2, r5
   d46d4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d46d6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d46d8:	6820      	ldr	r0, [r4, #0]
   d46da:	f000 ff1b 	bl	d5514 <memcpy>
	buffer[len] = 0;
   d46de:	6822      	ldr	r2, [r4, #0]
   d46e0:	68a3      	ldr	r3, [r4, #8]
   d46e2:	2100      	movs	r1, #0
   d46e4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d46e6:	4620      	mov	r0, r4
   d46e8:	bd70      	pop	{r4, r5, r6, pc}

000d46ea <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d46ea:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d46ec:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d46ee:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d46f0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d46f2:	6043      	str	r3, [r0, #4]
	len = 0;
   d46f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d46f6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d46f8:	460d      	mov	r5, r1
   d46fa:	b139      	cbz	r1, d470c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d46fc:	4608      	mov	r0, r1
   d46fe:	f000 ff4f 	bl	d55a0 <strlen>
   d4702:	4629      	mov	r1, r5
   d4704:	4602      	mov	r2, r0
   d4706:	4620      	mov	r0, r4
   d4708:	f7ff ffd7 	bl	d46ba <_ZN6String4copyEPKcj>
}
   d470c:	4620      	mov	r0, r4
   d470e:	bd38      	pop	{r3, r4, r5, pc}

000d4710 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4710:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4712:	b510      	push	{r4, lr}
   d4714:	460b      	mov	r3, r1
   d4716:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4718:	d007      	beq.n	d472a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d471a:	6809      	ldr	r1, [r1, #0]
   d471c:	b119      	cbz	r1, d4726 <_ZN6StringaSERKS_+0x16>
   d471e:	689a      	ldr	r2, [r3, #8]
   d4720:	f7ff ffcb 	bl	d46ba <_ZN6String4copyEPKcj>
   d4724:	e001      	b.n	d472a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4726:	f7ff ffa0 	bl	d466a <_ZN6String10invalidateEv>

	return *this;
}
   d472a:	4620      	mov	r0, r4
   d472c:	bd10      	pop	{r4, pc}

000d472e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d472e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4730:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4732:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4734:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4736:	6043      	str	r3, [r0, #4]
	len = 0;
   d4738:	6083      	str	r3, [r0, #8]
	flags = 0;
   d473a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d473c:	f7ff ffe8 	bl	d4710 <_ZN6StringaSERKS_>
}
   d4740:	4620      	mov	r0, r4
   d4742:	bd10      	pop	{r4, pc}

000d4744 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4744:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4746:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4748:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d474a:	b912      	cbnz	r2, d4752 <_ZNK6String6equalsEPKc+0xe>
   d474c:	b919      	cbnz	r1, d4756 <_ZNK6String6equalsEPKc+0x12>
   d474e:	2001      	movs	r0, #1
   d4750:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4752:	b911      	cbnz	r1, d475a <_ZNK6String6equalsEPKc+0x16>
   d4754:	6803      	ldr	r3, [r0, #0]
   d4756:	7818      	ldrb	r0, [r3, #0]
   d4758:	e002      	b.n	d4760 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d475a:	6800      	ldr	r0, [r0, #0]
   d475c:	f000 ff16 	bl	d558c <strcmp>
   d4760:	fab0 f080 	clz	r0, r0
   d4764:	0940      	lsrs	r0, r0, #5
}
   d4766:	bd08      	pop	{r3, pc}

000d4768 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4768:	4802      	ldr	r0, [pc, #8]	; (d4774 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d476a:	2300      	movs	r3, #0
   d476c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d476e:	f7ff bd97 	b.w	d42a0 <os_mutex_recursive_create>
   d4772:	bf00      	nop
   d4774:	2003e3b0 	.word	0x2003e3b0

000d4778 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d477a:	4606      	mov	r6, r0
   d477c:	460d      	mov	r5, r1
   d477e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4780:	2400      	movs	r4, #0
  while (size--) {
   d4782:	42bd      	cmp	r5, r7
   d4784:	d00c      	beq.n	d47a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4786:	6833      	ldr	r3, [r6, #0]
   d4788:	f815 1b01 	ldrb.w	r1, [r5], #1
   d478c:	689b      	ldr	r3, [r3, #8]
   d478e:	4630      	mov	r0, r6
   d4790:	4798      	blx	r3
     if (chunk>=0)
   d4792:	2800      	cmp	r0, #0
   d4794:	db01      	blt.n	d479a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4796:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4798:	e7f3      	b.n	d4782 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d479a:	2c00      	cmp	r4, #0
   d479c:	bf08      	it	eq
   d479e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d47a0:	4620      	mov	r0, r4
   d47a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47a4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47a4:	b570      	push	{r4, r5, r6, lr}
   d47a6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d47a8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d47aa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d47ac:	b149      	cbz	r1, d47c2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d47ae:	f000 fef7 	bl	d55a0 <strlen>
   d47b2:	682b      	ldr	r3, [r5, #0]
   d47b4:	4602      	mov	r2, r0
   d47b6:	4621      	mov	r1, r4
   d47b8:	4628      	mov	r0, r5
   d47ba:	68db      	ldr	r3, [r3, #12]
    }
   d47bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d47c0:	4718      	bx	r3
    }
   d47c2:	bd70      	pop	{r4, r5, r6, pc}

000d47c4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d47c4:	6803      	ldr	r3, [r0, #0]
   d47c6:	689b      	ldr	r3, [r3, #8]
   d47c8:	4718      	bx	r3

000d47ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d47cc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d47ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   d47d0:	f7ff fff8 	bl	d47c4 <_ZN5Print5printEc>
  n += print('\n');
   d47d4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d47d6:	4604      	mov	r4, r0
  n += print('\n');
   d47d8:	4628      	mov	r0, r5
   d47da:	f7ff fff3 	bl	d47c4 <_ZN5Print5printEc>
  return n;
}
   d47de:	4420      	add	r0, r4
   d47e0:	bd38      	pop	{r3, r4, r5, pc}

000d47e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d47e2:	b530      	push	{r4, r5, lr}
   d47e4:	b08b      	sub	sp, #44	; 0x2c
   d47e6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d47e8:	2100      	movs	r1, #0
   d47ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d47ee:	2a01      	cmp	r2, #1
   d47f0:	bf98      	it	ls
   d47f2:	220a      	movls	r2, #10
   d47f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d47f8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d47fc:	fb05 3312 	mls	r3, r5, r2, r3
   d4800:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4804:	2b09      	cmp	r3, #9
   d4806:	bf94      	ite	ls
   d4808:	3330      	addls	r3, #48	; 0x30
   d480a:	3337      	addhi	r3, #55	; 0x37
   d480c:	b2db      	uxtb	r3, r3
   d480e:	4621      	mov	r1, r4
   d4810:	f804 3901 	strb.w	r3, [r4], #-1
   d4814:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4816:	2d00      	cmp	r5, #0
   d4818:	d1ee      	bne.n	d47f8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d481a:	f7ff ffc3 	bl	d47a4 <_ZN5Print5writeEPKc>
}
   d481e:	b00b      	add	sp, #44	; 0x2c
   d4820:	bd30      	pop	{r4, r5, pc}

000d4822 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4822:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4824:	b92a      	cbnz	r2, d4832 <_ZN5Print5printEmi+0x10>
   d4826:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4828:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d482c:	689b      	ldr	r3, [r3, #8]
   d482e:	b2c9      	uxtb	r1, r1
   d4830:	4718      	bx	r3
  else return printNumber(n, base);
   d4832:	b2d2      	uxtb	r2, r2
}
   d4834:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4838:	f7ff bfd3 	b.w	d47e2 <_ZN5Print11printNumberEmh>

000d483c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d483c:	f7ff bff1 	b.w	d4822 <_ZN5Print5printEmi>

000d4840 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4840:	b40c      	push	{r2, r3}
   d4842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4846:	b087      	sub	sp, #28
   d4848:	af00      	add	r7, sp, #0
   d484a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d484e:	4605      	mov	r5, r0
   d4850:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4854:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4856:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4858:	4623      	mov	r3, r4
   d485a:	464a      	mov	r2, r9
   d485c:	2114      	movs	r1, #20
   d485e:	1d38      	adds	r0, r7, #4
   d4860:	f7ff fe8a 	bl	d4578 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4864:	2813      	cmp	r0, #19
   d4866:	d805      	bhi.n	d4874 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4868:	1d39      	adds	r1, r7, #4
   d486a:	4628      	mov	r0, r5
   d486c:	f7ff ff9a 	bl	d47a4 <_ZN5Print5writeEPKc>
   d4870:	4604      	mov	r4, r0
   d4872:	e013      	b.n	d489c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4874:	f100 0308 	add.w	r3, r0, #8
   d4878:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d487c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d487e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4882:	1c41      	adds	r1, r0, #1
   d4884:	4623      	mov	r3, r4
   d4886:	464a      	mov	r2, r9
   d4888:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d488a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d488c:	f7ff fe74 	bl	d4578 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4890:	4669      	mov	r1, sp
   d4892:	4628      	mov	r0, r5
   d4894:	f7ff ff86 	bl	d47a4 <_ZN5Print5writeEPKc>
   d4898:	4604      	mov	r4, r0
   d489a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d489c:	b11e      	cbz	r6, d48a6 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d489e:	4628      	mov	r0, r5
   d48a0:	f7ff ff93 	bl	d47ca <_ZN5Print7printlnEv>
   d48a4:	4404      	add	r4, r0
    return n;
}
   d48a6:	4620      	mov	r0, r4
   d48a8:	371c      	adds	r7, #28
   d48aa:	46bd      	mov	sp, r7
   d48ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d48b0:	b002      	add	sp, #8
   d48b2:	4770      	bx	lr

000d48b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48b4:	4b01      	ldr	r3, [pc, #4]	; (d48bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48b6:	4a02      	ldr	r2, [pc, #8]	; (d48c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48b8:	601a      	str	r2, [r3, #0]
   d48ba:	4770      	bx	lr
   d48bc:	2003e3b4 	.word	0x2003e3b4
   d48c0:	000d5697 	.word	0x000d5697

000d48c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d48c4:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d48c6:	681a      	ldr	r2, [r3, #0]
   d48c8:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d48ca:	601a      	str	r2, [r3, #0]
   d48cc:	4770      	bx	lr
   d48ce:	bf00      	nop
   d48d0:	2003e330 	.word	0x2003e330
   d48d4:	2003e3b8 	.word	0x2003e3b8

000d48d8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48d8:	2100      	movs	r1, #0
   d48da:	f7ff bda9 	b.w	d4430 <system_delay_ms>

000d48de <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48de:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48e0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48e2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48e4:	b113      	cbz	r3, d48ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48e6:	2203      	movs	r2, #3
   d48e8:	4601      	mov	r1, r0
   d48ea:	4798      	blx	r3
    }
   d48ec:	4620      	mov	r0, r4
   d48ee:	bd10      	pop	{r4, pc}

000d48f0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d48f0:	b510      	push	{r4, lr}
   d48f2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48f4:	f7ff fff3 	bl	d48de <_ZNSt14_Function_baseD1Ev>
   d48f8:	4620      	mov	r0, r4
   d48fa:	bd10      	pop	{r4, pc}

000d48fc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d48fc:	4803      	ldr	r0, [pc, #12]	; (d490c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d48fe:	4a04      	ldr	r2, [pc, #16]	; (d4910 <_GLOBAL__sub_I_RGB+0x14>)
   d4900:	4904      	ldr	r1, [pc, #16]	; (d4914 <_GLOBAL__sub_I_RGB+0x18>)
   d4902:	2300      	movs	r3, #0
   d4904:	6083      	str	r3, [r0, #8]
   d4906:	f000 bca7 	b.w	d5258 <__aeabi_atexit>
   d490a:	bf00      	nop
   d490c:	2003e3bc 	.word	0x2003e3bc
   d4910:	2003e398 	.word	0x2003e398
   d4914:	000d48f1 	.word	0x000d48f1

000d4918 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4918:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d491a:	4b0c      	ldr	r3, [pc, #48]	; (d494c <serialEventRun+0x34>)
   d491c:	b133      	cbz	r3, d492c <serialEventRun+0x14>
   d491e:	f000 f967 	bl	d4bf0 <_Z16_fetch_usbserialv>
   d4922:	6803      	ldr	r3, [r0, #0]
   d4924:	691b      	ldr	r3, [r3, #16]
   d4926:	4798      	blx	r3
   d4928:	2800      	cmp	r0, #0
   d492a:	dc09      	bgt.n	d4940 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d492c:	4b08      	ldr	r3, [pc, #32]	; (d4950 <serialEventRun+0x38>)
   d492e:	b163      	cbz	r3, d494a <serialEventRun+0x32>
   d4930:	f000 fa2c 	bl	d4d8c <_Z22__fetch_global_Serial1v>
   d4934:	6803      	ldr	r3, [r0, #0]
   d4936:	691b      	ldr	r3, [r3, #16]
   d4938:	4798      	blx	r3
   d493a:	2800      	cmp	r0, #0
   d493c:	dc03      	bgt.n	d4946 <serialEventRun+0x2e>
   d493e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4940:	f3af 8000 	nop.w
   d4944:	e7f2      	b.n	d492c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4946:	f3af 8000 	nop.w
   d494a:	bd08      	pop	{r3, pc}
	...

000d4954 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4954:	b508      	push	{r3, lr}
	serialEventRun();
   d4956:	f7ff ffdf 	bl	d4918 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d495a:	f7ff fc79 	bl	d4250 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d495e:	4b01      	ldr	r3, [pc, #4]	; (d4964 <_post_loop+0x10>)
   d4960:	6018      	str	r0, [r3, #0]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	2003e734 	.word	0x2003e734

000d4968 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4968:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d496a:	2300      	movs	r3, #0
   d496c:	9300      	str	r3, [sp, #0]
   d496e:	461a      	mov	r2, r3
   d4970:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4974:	f7ff fd6e 	bl	d4454 <system_ctrl_set_result>
}
   d4978:	b003      	add	sp, #12
   d497a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4980 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4980:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4982:	8843      	ldrh	r3, [r0, #2]
   d4984:	2b0a      	cmp	r3, #10
   d4986:	d008      	beq.n	d499a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4988:	2b50      	cmp	r3, #80	; 0x50
   d498a:	d109      	bne.n	d49a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d498c:	4b09      	ldr	r3, [pc, #36]	; (d49b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d498e:	681b      	ldr	r3, [r3, #0]
   d4990:	b13b      	cbz	r3, d49a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4992:	b003      	add	sp, #12
   d4994:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4998:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d499a:	f7ff ffe5 	bl	d4968 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d499e:	e006      	b.n	d49ae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49a0:	2300      	movs	r3, #0
   d49a2:	9300      	str	r3, [sp, #0]
   d49a4:	461a      	mov	r2, r3
   d49a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d49aa:	f7ff fd53 	bl	d4454 <system_ctrl_set_result>
        break;
    }
}
   d49ae:	b003      	add	sp, #12
   d49b0:	f85d fb04 	ldr.w	pc, [sp], #4
   d49b4:	2003e3cc 	.word	0x2003e3cc

000d49b8 <module_user_init_hook>:

void module_user_init_hook()
{
   d49b8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d49ba:	f7ff fc41 	bl	d4240 <HAL_RNG_GetRandomNumber>
   d49be:	4604      	mov	r4, r0
    srand(seed);
   d49c0:	f000 fdbc 	bl	d553c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d49c4:	4b07      	ldr	r3, [pc, #28]	; (d49e4 <module_user_init_hook+0x2c>)
   d49c6:	b113      	cbz	r3, d49ce <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d49c8:	4620      	mov	r0, r4
   d49ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d49ce:	2100      	movs	r1, #0
   d49d0:	4804      	ldr	r0, [pc, #16]	; (d49e4 <module_user_init_hook+0x2c>)
   d49d2:	f7ff fdb1 	bl	d4538 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49d6:	2100      	movs	r1, #0
   d49d8:	4803      	ldr	r0, [pc, #12]	; (d49e8 <module_user_init_hook+0x30>)
}
   d49da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49de:	f7ff bd2f 	b.w	d4440 <system_ctrl_set_app_request_handler>
   d49e2:	bf00      	nop
   d49e4:	00000000 	.word	0x00000000
   d49e8:	000d4981 	.word	0x000d4981

000d49ec <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d49ec:	b510      	push	{r4, lr}
   d49ee:	b088      	sub	sp, #32
   d49f0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d49f2:	4668      	mov	r0, sp
   d49f4:	f7ff fe79 	bl	d46ea <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d49f8:	4669      	mov	r1, sp
   d49fa:	a804      	add	r0, sp, #16
   d49fc:	f7ff fe97 	bl	d472e <_ZN6StringC1ERKS_>
   d4a00:	a804      	add	r0, sp, #16
   d4a02:	47a0      	blx	r4
   d4a04:	4604      	mov	r4, r0
   d4a06:	a804      	add	r0, sp, #16
   d4a08:	f7ff fe28 	bl	d465c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4a0c:	4668      	mov	r0, sp
   d4a0e:	f7ff fe25 	bl	d465c <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4a12:	4620      	mov	r0, r4
   d4a14:	b008      	add	sp, #32
   d4a16:	bd10      	pop	{r4, pc}

000d4a18 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4a1a:	2410      	movs	r4, #16
   d4a1c:	b085      	sub	sp, #20
   d4a1e:	4607      	mov	r7, r0
   d4a20:	460e      	mov	r6, r1
   d4a22:	4615      	mov	r5, r2
   d4a24:	2100      	movs	r1, #0
   d4a26:	4622      	mov	r2, r4
   d4a28:	4668      	mov	r0, sp
   d4a2a:	f000 fd7e 	bl	d552a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a2e:	2200      	movs	r2, #0
   d4a30:	4669      	mov	r1, sp
   d4a32:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4a34:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4a38:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4a3a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4a3c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4a3e:	f7ff fd6b 	bl	d4518 <spark_function>
}
   d4a42:	b005      	add	sp, #20
   d4a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a46 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a46:	4770      	bx	lr

000d4a48 <_ZN9IPAddressD0Ev>:
   d4a48:	b510      	push	{r4, lr}
   d4a4a:	2118      	movs	r1, #24
   d4a4c:	4604      	mov	r4, r0
   d4a4e:	f000 fc08 	bl	d5262 <_ZdlPvj>
   d4a52:	4620      	mov	r0, r4
   d4a54:	bd10      	pop	{r4, pc}

000d4a56 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a56:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a58:	7d03      	ldrb	r3, [r0, #20]
   d4a5a:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a5c:	b08d      	sub	sp, #52	; 0x34
   d4a5e:	460e      	mov	r6, r1
   d4a60:	f100 0704 	add.w	r7, r0, #4
   d4a64:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a68:	d002      	beq.n	d4a70 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4a6a:	f100 0508 	add.w	r5, r0, #8
   d4a6e:	e018      	b.n	d4aa2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a70:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a72:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a74:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a78:	232f      	movs	r3, #47	; 0x2f
   d4a7a:	462a      	mov	r2, r5
   d4a7c:	200a      	movs	r0, #10
   d4a7e:	f7ff fc17 	bl	d42b0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a82:	4628      	mov	r0, r5
   d4a84:	f000 fd8c 	bl	d55a0 <strlen>
   d4a88:	6833      	ldr	r3, [r6, #0]
   d4a8a:	4602      	mov	r2, r0
   d4a8c:	68db      	ldr	r3, [r3, #12]
   d4a8e:	4629      	mov	r1, r5
   d4a90:	4630      	mov	r0, r6
   d4a92:	4798      	blx	r3
   d4a94:	e00f      	b.n	d4ab6 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a96:	b124      	cbz	r4, d4aa2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a98:	212e      	movs	r1, #46	; 0x2e
   d4a9a:	4630      	mov	r0, r6
   d4a9c:	f7ff fe92 	bl	d47c4 <_ZN5Print5printEc>
   d4aa0:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4aa2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4aa6:	220a      	movs	r2, #10
   d4aa8:	4630      	mov	r0, r6
   d4aaa:	f7ff fec7 	bl	d483c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4aae:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ab0:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ab2:	d1f0      	bne.n	d4a96 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ab4:	4620      	mov	r0, r4
    }
    return n;
}
   d4ab6:	b00d      	add	sp, #52	; 0x34
   d4ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4abc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4abc:	b510      	push	{r4, lr}
   d4abe:	4b05      	ldr	r3, [pc, #20]	; (d4ad4 <_ZN9IPAddressC1Ev+0x18>)
   d4ac0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4ac2:	2211      	movs	r2, #17
   d4ac4:	f840 3b04 	str.w	r3, [r0], #4
   d4ac8:	2100      	movs	r1, #0
   d4aca:	f000 fd2e 	bl	d552a <memset>
{
    clear();
}
   d4ace:	4620      	mov	r0, r4
   d4ad0:	bd10      	pop	{r4, pc}
   d4ad2:	bf00      	nop
   d4ad4:	000d5734 	.word	0x000d5734

000d4ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ad8:	4603      	mov	r3, r0
   d4ada:	4a07      	ldr	r2, [pc, #28]	; (d4af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4adc:	b510      	push	{r4, lr}
   d4ade:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4ae2:	f101 0210 	add.w	r2, r1, #16
   d4ae6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4aea:	f843 4b04 	str.w	r4, [r3], #4
   d4aee:	4291      	cmp	r1, r2
   d4af0:	d1f9      	bne.n	d4ae6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4af2:	780a      	ldrb	r2, [r1, #0]
   d4af4:	701a      	strb	r2, [r3, #0]
}
   d4af6:	bd10      	pop	{r4, pc}
   d4af8:	000d5734 	.word	0x000d5734

000d4afc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4afc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4afe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4b0e:	2304      	movs	r3, #4
   d4b10:	6041      	str	r1, [r0, #4]
   d4b12:	7503      	strb	r3, [r0, #20]
   d4b14:	bd10      	pop	{r4, pc}

000d4b16 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b18:	780d      	ldrb	r5, [r1, #0]
   d4b1a:	788b      	ldrb	r3, [r1, #2]
   d4b1c:	784a      	ldrb	r2, [r1, #1]
   d4b1e:	78c9      	ldrb	r1, [r1, #3]
   d4b20:	9100      	str	r1, [sp, #0]
   d4b22:	4629      	mov	r1, r5
   d4b24:	f7ff ffea 	bl	d4afc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4b28:	b003      	add	sp, #12
   d4b2a:	bd30      	pop	{r4, r5, pc}

000d4b2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b2c:	7441      	strb	r1, [r0, #17]
   d4b2e:	4770      	bx	lr

000d4b30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4b30:	4770      	bx	lr

000d4b32 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4b32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4b34:	2100      	movs	r1, #0
   d4b36:	7c00      	ldrb	r0, [r0, #16]
   d4b38:	f7ff fc5a 	bl	d43f0 <HAL_USB_USART_Receive_Data>
}
   d4b3c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b40:	bf28      	it	cs
   d4b42:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b46:	bd08      	pop	{r3, pc}

000d4b48 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4b48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4b4a:	2101      	movs	r1, #1
   d4b4c:	7c00      	ldrb	r0, [r0, #16]
   d4b4e:	f7ff fc4f 	bl	d43f0 <HAL_USB_USART_Receive_Data>
}
   d4b52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b56:	bf28      	it	cs
   d4b58:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b5c:	bd08      	pop	{r3, pc}

000d4b5e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4b5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b60:	7c00      	ldrb	r0, [r0, #16]
   d4b62:	f7ff fc3d 	bl	d43e0 <HAL_USB_USART_Available_Data_For_Write>
}
   d4b66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b6a:	bd08      	pop	{r3, pc}

000d4b6c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4b6c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b6e:	7c00      	ldrb	r0, [r0, #16]
   d4b70:	f7ff fc2e 	bl	d43d0 <HAL_USB_USART_Available_Data>
}
   d4b74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b78:	bd08      	pop	{r3, pc}

000d4b7a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b7a:	7c00      	ldrb	r0, [r0, #16]
   d4b7c:	f7ff bc48 	b.w	d4410 <HAL_USB_USART_Flush_Data>

000d4b80 <_ZN9USBSerialD0Ev>:
   d4b80:	b510      	push	{r4, lr}
   d4b82:	2114      	movs	r1, #20
   d4b84:	4604      	mov	r4, r0
   d4b86:	f000 fb6c 	bl	d5262 <_ZdlPvj>
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	bd10      	pop	{r4, pc}

000d4b8e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b8e:	b538      	push	{r3, r4, r5, lr}
   d4b90:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b92:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b94:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b96:	f7ff fc23 	bl	d43e0 <HAL_USB_USART_Available_Data_For_Write>
   d4b9a:	2800      	cmp	r0, #0
   d4b9c:	dc01      	bgt.n	d4ba2 <_ZN9USBSerial5writeEh+0x14>
   d4b9e:	7c60      	ldrb	r0, [r4, #17]
   d4ba0:	b128      	cbz	r0, d4bae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4ba2:	4629      	mov	r1, r5
   d4ba4:	7c20      	ldrb	r0, [r4, #16]
   d4ba6:	f7ff fc2b 	bl	d4400 <HAL_USB_USART_Send_Data>
   d4baa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4bae:	bd38      	pop	{r3, r4, r5, pc}

000d4bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4bb4:	2300      	movs	r3, #0
   d4bb6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bbc:	60a3      	str	r3, [r4, #8]
   d4bbe:	4b05      	ldr	r3, [pc, #20]	; (d4bd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4bc0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4bc2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bc4:	4608      	mov	r0, r1
{
  _serial = serial;
   d4bc6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4bc8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4bca:	4611      	mov	r1, r2
   d4bcc:	f7ff fbf0 	bl	d43b0 <HAL_USB_USART_Init>
}
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	bd10      	pop	{r4, pc}
   d4bd4:	000d5748 	.word	0x000d5748

000d4bd8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4bd8:	2200      	movs	r2, #0
   d4bda:	7c00      	ldrb	r0, [r0, #16]
   d4bdc:	f7ff bbf0 	b.w	d43c0 <HAL_USB_USART_Begin>

000d4be0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4be0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4be2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4be4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4be6:	2100      	movs	r1, #0
   d4be8:	f000 fc9f 	bl	d552a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4bec:	4620      	mov	r0, r4
   d4bee:	bd10      	pop	{r4, pc}

000d4bf0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4bf0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bf2:	4d0e      	ldr	r5, [pc, #56]	; (d4c2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4bf4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4bf6:	a801      	add	r0, sp, #4
   d4bf8:	f7ff fff2 	bl	d4be0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bfc:	6829      	ldr	r1, [r5, #0]
   d4bfe:	f011 0401 	ands.w	r4, r1, #1
   d4c02:	d110      	bne.n	d4c26 <_Z16_fetch_usbserialv+0x36>
   d4c04:	4628      	mov	r0, r5
   d4c06:	f7ff fa4a 	bl	d409e <__cxa_guard_acquire>
   d4c0a:	b160      	cbz	r0, d4c26 <_Z16_fetch_usbserialv+0x36>
   d4c0c:	aa01      	add	r2, sp, #4
   d4c0e:	4621      	mov	r1, r4
   d4c10:	4807      	ldr	r0, [pc, #28]	; (d4c30 <_Z16_fetch_usbserialv+0x40>)
   d4c12:	f7ff ffcd 	bl	d4bb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4c16:	4628      	mov	r0, r5
   d4c18:	f7ff fa46 	bl	d40a8 <__cxa_guard_release>
   d4c1c:	4a05      	ldr	r2, [pc, #20]	; (d4c34 <_Z16_fetch_usbserialv+0x44>)
   d4c1e:	4906      	ldr	r1, [pc, #24]	; (d4c38 <_Z16_fetch_usbserialv+0x48>)
   d4c20:	4803      	ldr	r0, [pc, #12]	; (d4c30 <_Z16_fetch_usbserialv+0x40>)
   d4c22:	f000 fb19 	bl	d5258 <__aeabi_atexit>
	return _usbserial;
}
   d4c26:	4802      	ldr	r0, [pc, #8]	; (d4c30 <_Z16_fetch_usbserialv+0x40>)
   d4c28:	b007      	add	sp, #28
   d4c2a:	bd30      	pop	{r4, r5, pc}
   d4c2c:	2003e3d0 	.word	0x2003e3d0
   d4c30:	2003e3d4 	.word	0x2003e3d4
   d4c34:	2003e398 	.word	0x2003e398
   d4c38:	000d4b31 	.word	0x000d4b31

000d4c3c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4c3c:	2200      	movs	r2, #0
   d4c3e:	4611      	mov	r1, r2
   d4c40:	6840      	ldr	r0, [r0, #4]
   d4c42:	f7ff bc29 	b.w	d4498 <network_ready>

000d4c46 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c46:	2200      	movs	r2, #0
   d4c48:	4611      	mov	r1, r2
   d4c4a:	6840      	ldr	r0, [r0, #4]
   d4c4c:	f7ff bc44 	b.w	d44d8 <network_listening>

000d4c50 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c50:	2200      	movs	r2, #0
   d4c52:	4611      	mov	r1, r2
   d4c54:	6840      	ldr	r0, [r0, #4]
   d4c56:	f7ff bc4f 	b.w	d44f8 <network_get_listen_timeout>

000d4c5a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c5a:	2200      	movs	r2, #0
   d4c5c:	6840      	ldr	r0, [r0, #4]
   d4c5e:	f7ff bc43 	b.w	d44e8 <network_set_listen_timeout>

000d4c62 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c62:	2200      	movs	r2, #0
   d4c64:	f081 0101 	eor.w	r1, r1, #1
   d4c68:	6840      	ldr	r0, [r0, #4]
   d4c6a:	f7ff bc2d 	b.w	d44c8 <network_listen>

000d4c6e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4c6e:	2300      	movs	r3, #0
   d4c70:	461a      	mov	r2, r3
   d4c72:	4619      	mov	r1, r3
   d4c74:	6840      	ldr	r0, [r0, #4]
   d4c76:	f7ff bc1f 	b.w	d44b8 <network_off>

000d4c7a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4c7a:	2300      	movs	r3, #0
   d4c7c:	461a      	mov	r2, r3
   d4c7e:	4619      	mov	r1, r3
   d4c80:	6840      	ldr	r0, [r0, #4]
   d4c82:	f7ff bc11 	b.w	d44a8 <network_on>

000d4c86 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c86:	2200      	movs	r2, #0
   d4c88:	4611      	mov	r1, r2
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	f7ff bbf4 	b.w	d4478 <network_connecting>

000d4c90 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c90:	2200      	movs	r2, #0
   d4c92:	2102      	movs	r1, #2
   d4c94:	6840      	ldr	r0, [r0, #4]
   d4c96:	f7ff bbf7 	b.w	d4488 <network_disconnect>

000d4c9a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c9a:	2300      	movs	r3, #0
   d4c9c:	461a      	mov	r2, r3
   d4c9e:	6840      	ldr	r0, [r0, #4]
   d4ca0:	f7ff bbe2 	b.w	d4468 <network_connect>

000d4ca4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4ca4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4ca6:	4c08      	ldr	r4, [pc, #32]	; (d4cc8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4ca8:	2528      	movs	r5, #40	; 0x28
   d4caa:	462a      	mov	r2, r5
   d4cac:	2100      	movs	r1, #0
   d4cae:	4620      	mov	r0, r4
   d4cb0:	f000 fc3b 	bl	d552a <memset>
        cid = -1;
   d4cb4:	f04f 33ff 	mov.w	r3, #4294967295
   d4cb8:	6063      	str	r3, [r4, #4]
   d4cba:	4b04      	ldr	r3, [pc, #16]	; (d4ccc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4cbc:	8025      	strh	r5, [r4, #0]
   d4cbe:	2204      	movs	r2, #4
   d4cc0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4cc2:	4a03      	ldr	r2, [pc, #12]	; (d4cd0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4cc4:	601a      	str	r2, [r3, #0]
   d4cc6:	bd38      	pop	{r3, r4, r5, pc}
   d4cc8:	2003e3f0 	.word	0x2003e3f0
   d4ccc:	2003e3e8 	.word	0x2003e3e8
   d4cd0:	000d5778 	.word	0x000d5778

000d4cd4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4cd4:	4770      	bx	lr

000d4cd6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4cd6:	7441      	strb	r1, [r0, #17]
   d4cd8:	4770      	bx	lr

000d4cda <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4cda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4cdc:	7c00      	ldrb	r0, [r0, #16]
   d4cde:	f7ff fb27 	bl	d4330 <HAL_USART_Available_Data_For_Write>
}
   d4ce2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ce6:	bd08      	pop	{r3, pc}

000d4ce8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4ce8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4cea:	7c00      	ldrb	r0, [r0, #16]
   d4cec:	f7ff faf8 	bl	d42e0 <HAL_USART_Available_Data>
}
   d4cf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4cf4:	bd08      	pop	{r3, pc}

000d4cf6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4cf6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4cf8:	7c00      	ldrb	r0, [r0, #16]
   d4cfa:	f7ff fb01 	bl	d4300 <HAL_USART_Peek_Data>
}
   d4cfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d02:	bf28      	it	cs
   d4d04:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d08:	bd08      	pop	{r3, pc}

000d4d0a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4d0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4d0c:	7c00      	ldrb	r0, [r0, #16]
   d4d0e:	f7ff faef 	bl	d42f0 <HAL_USART_Read_Data>
}
   d4d12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d16:	bf28      	it	cs
   d4d18:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d1c:	bd08      	pop	{r3, pc}

000d4d1e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4d1e:	7c00      	ldrb	r0, [r0, #16]
   d4d20:	f7ff baf6 	b.w	d4310 <HAL_USART_Flush_Data>

000d4d24 <_ZN11USARTSerialD0Ev>:
   d4d24:	b510      	push	{r4, lr}
   d4d26:	2114      	movs	r1, #20
   d4d28:	4604      	mov	r4, r0
   d4d2a:	f000 fa9a 	bl	d5262 <_ZdlPvj>
   d4d2e:	4620      	mov	r0, r4
   d4d30:	bd10      	pop	{r4, pc}

000d4d32 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4d32:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d34:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4d36:	4604      	mov	r4, r0
   d4d38:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d3a:	b925      	cbnz	r5, d4d46 <_ZN11USARTSerial5writeEh+0x14>
   d4d3c:	7c00      	ldrb	r0, [r0, #16]
   d4d3e:	f7ff faf7 	bl	d4330 <HAL_USART_Available_Data_For_Write>
   d4d42:	2800      	cmp	r0, #0
   d4d44:	dd05      	ble.n	d4d52 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d46:	4631      	mov	r1, r6
   d4d48:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d4e:	f7ff babf 	b.w	d42d0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4d52:	4628      	mov	r0, r5
   d4d54:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4d58:	b510      	push	{r4, lr}
   d4d5a:	4604      	mov	r4, r0
   d4d5c:	4608      	mov	r0, r1
   d4d5e:	4611      	mov	r1, r2
   d4d60:	2200      	movs	r2, #0
   d4d62:	6062      	str	r2, [r4, #4]
   d4d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d68:	60a2      	str	r2, [r4, #8]
   d4d6a:	4a05      	ldr	r2, [pc, #20]	; (d4d80 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4d6c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4d6e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4d70:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4d72:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4d74:	461a      	mov	r2, r3
   d4d76:	f7ff faa3 	bl	d42c0 <HAL_USART_Init>
}
   d4d7a:	4620      	mov	r0, r4
   d4d7c:	bd10      	pop	{r4, pc}
   d4d7e:	bf00      	nop
   d4d80:	000d57ac 	.word	0x000d57ac

000d4d84 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4d84:	7c00      	ldrb	r0, [r0, #16]
   d4d86:	f7ff bacb 	b.w	d4320 <HAL_USART_Is_Enabled>
	...

000d4d8c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4d8c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4d8e:	4d0c      	ldr	r5, [pc, #48]	; (d4dc0 <_Z22__fetch_global_Serial1v+0x34>)
   d4d90:	6829      	ldr	r1, [r5, #0]
   d4d92:	f011 0401 	ands.w	r4, r1, #1
   d4d96:	d111      	bne.n	d4dbc <_Z22__fetch_global_Serial1v+0x30>
   d4d98:	4628      	mov	r0, r5
   d4d9a:	f7ff f980 	bl	d409e <__cxa_guard_acquire>
   d4d9e:	b168      	cbz	r0, d4dbc <_Z22__fetch_global_Serial1v+0x30>
   d4da0:	4a08      	ldr	r2, [pc, #32]	; (d4dc4 <_Z22__fetch_global_Serial1v+0x38>)
   d4da2:	4b09      	ldr	r3, [pc, #36]	; (d4dc8 <_Z22__fetch_global_Serial1v+0x3c>)
   d4da4:	4809      	ldr	r0, [pc, #36]	; (d4dcc <_Z22__fetch_global_Serial1v+0x40>)
   d4da6:	4621      	mov	r1, r4
   d4da8:	f7ff ffd6 	bl	d4d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4dac:	4628      	mov	r0, r5
   d4dae:	f7ff f97b 	bl	d40a8 <__cxa_guard_release>
   d4db2:	4a07      	ldr	r2, [pc, #28]	; (d4dd0 <_Z22__fetch_global_Serial1v+0x44>)
   d4db4:	4907      	ldr	r1, [pc, #28]	; (d4dd4 <_Z22__fetch_global_Serial1v+0x48>)
   d4db6:	4805      	ldr	r0, [pc, #20]	; (d4dcc <_Z22__fetch_global_Serial1v+0x40>)
   d4db8:	f000 fa4e 	bl	d5258 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4dbc:	4803      	ldr	r0, [pc, #12]	; (d4dcc <_Z22__fetch_global_Serial1v+0x40>)
   d4dbe:	bd38      	pop	{r3, r4, r5, pc}
   d4dc0:	2003e4b0 	.word	0x2003e4b0
   d4dc4:	2003e4b4 	.word	0x2003e4b4
   d4dc8:	2003e42c 	.word	0x2003e42c
   d4dcc:	2003e418 	.word	0x2003e418
   d4dd0:	2003e398 	.word	0x2003e398
   d4dd4:	000d4cd5 	.word	0x000d4cd5

000d4dd8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4dd8:	4770      	bx	lr

000d4dda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ddc:	4606      	mov	r6, r0
   d4dde:	4615      	mov	r5, r2
   d4de0:	460c      	mov	r4, r1
   d4de2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4de4:	42bc      	cmp	r4, r7
   d4de6:	d006      	beq.n	d4df6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4de8:	6833      	ldr	r3, [r6, #0]
   d4dea:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4dee:	689b      	ldr	r3, [r3, #8]
   d4df0:	4630      	mov	r0, r6
   d4df2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4df4:	e7f6      	b.n	d4de4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4df6:	4628      	mov	r0, r5
   d4df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dfa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4dfa:	2200      	movs	r2, #0
   d4dfc:	7c00      	ldrb	r0, [r0, #16]
   d4dfe:	f7ff ba9f 	b.w	d4340 <HAL_I2C_Write_Data>

000d4e02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4e02:	2100      	movs	r1, #0
   d4e04:	7c00      	ldrb	r0, [r0, #16]
   d4e06:	f7ff baa3 	b.w	d4350 <HAL_I2C_Available_Data>

000d4e0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4e0a:	2100      	movs	r1, #0
   d4e0c:	7c00      	ldrb	r0, [r0, #16]
   d4e0e:	f7ff baa7 	b.w	d4360 <HAL_I2C_Read_Data>

000d4e12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4e12:	2100      	movs	r1, #0
   d4e14:	7c00      	ldrb	r0, [r0, #16]
   d4e16:	f7ff baab 	b.w	d4370 <HAL_I2C_Peek_Data>

000d4e1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4e1a:	2100      	movs	r1, #0
   d4e1c:	7c00      	ldrb	r0, [r0, #16]
   d4e1e:	f7ff baaf 	b.w	d4380 <HAL_I2C_Flush_Data>

000d4e22 <_ZN7TwoWireD0Ev>:
   d4e22:	b510      	push	{r4, lr}
   d4e24:	2114      	movs	r1, #20
   d4e26:	4604      	mov	r4, r0
   d4e28:	f000 fa1b 	bl	d5262 <_ZdlPvj>
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	bd10      	pop	{r4, pc}

000d4e30 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4e30:	b510      	push	{r4, lr}
   d4e32:	4604      	mov	r4, r0
   d4e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e38:	4608      	mov	r0, r1
   d4e3a:	60a3      	str	r3, [r4, #8]
   d4e3c:	2100      	movs	r1, #0
   d4e3e:	4b04      	ldr	r3, [pc, #16]	; (d4e50 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4e40:	7420      	strb	r0, [r4, #16]
   d4e42:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4e44:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4e46:	f7ff faab 	bl	d43a0 <HAL_I2C_Init>

}
   d4e4a:	4620      	mov	r0, r4
   d4e4c:	bd10      	pop	{r4, pc}
   d4e4e:	bf00      	nop
   d4e50:	000d57dc 	.word	0x000d57dc

000d4e54 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4e54:	2100      	movs	r1, #0
   d4e56:	7c00      	ldrb	r0, [r0, #16]
   d4e58:	f7ff ba9a 	b.w	d4390 <HAL_I2C_Is_Enabled>

000d4e5c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e5c:	2200      	movs	r2, #0
   d4e5e:	4611      	mov	r1, r2
   d4e60:	6840      	ldr	r0, [r0, #4]
   d4e62:	f7ff bb39 	b.w	d44d8 <network_listening>

000d4e66 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e66:	2200      	movs	r2, #0
   d4e68:	4611      	mov	r1, r2
   d4e6a:	6840      	ldr	r0, [r0, #4]
   d4e6c:	f7ff bb44 	b.w	d44f8 <network_get_listen_timeout>

000d4e70 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e70:	2200      	movs	r2, #0
   d4e72:	6840      	ldr	r0, [r0, #4]
   d4e74:	f7ff bb38 	b.w	d44e8 <network_set_listen_timeout>

000d4e78 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e78:	2200      	movs	r2, #0
   d4e7a:	f081 0101 	eor.w	r1, r1, #1
   d4e7e:	6840      	ldr	r0, [r0, #4]
   d4e80:	f7ff bb22 	b.w	d44c8 <network_listen>

000d4e84 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4e84:	2300      	movs	r3, #0
   d4e86:	461a      	mov	r2, r3
   d4e88:	2101      	movs	r1, #1
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	f7ff bb14 	b.w	d44b8 <network_off>

000d4e90 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e90:	2300      	movs	r3, #0
   d4e92:	461a      	mov	r2, r3
   d4e94:	4619      	mov	r1, r3
   d4e96:	6840      	ldr	r0, [r0, #4]
   d4e98:	f7ff bb06 	b.w	d44a8 <network_on>

000d4e9c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e9c:	2200      	movs	r2, #0
   d4e9e:	4611      	mov	r1, r2
   d4ea0:	6840      	ldr	r0, [r0, #4]
   d4ea2:	f7ff baf9 	b.w	d4498 <network_ready>

000d4ea6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ea6:	2200      	movs	r2, #0
   d4ea8:	4611      	mov	r1, r2
   d4eaa:	6840      	ldr	r0, [r0, #4]
   d4eac:	f7ff bae4 	b.w	d4478 <network_connecting>

000d4eb0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4eb0:	2200      	movs	r2, #0
   d4eb2:	2102      	movs	r1, #2
   d4eb4:	6840      	ldr	r0, [r0, #4]
   d4eb6:	f7ff bae7 	b.w	d4488 <network_disconnect>

000d4eba <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4eba:	2300      	movs	r3, #0
   d4ebc:	461a      	mov	r2, r3
   d4ebe:	6840      	ldr	r0, [r0, #4]
   d4ec0:	f7ff bad2 	b.w	d4468 <network_connect>

000d4ec4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4ec4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ec6:	4605      	mov	r5, r0
   d4ec8:	b188      	cbz	r0, d4eee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4eca:	6804      	ldr	r4, [r0, #0]
   d4ecc:	b14c      	cbz	r4, d4ee2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4ece:	68a3      	ldr	r3, [r4, #8]
   d4ed0:	b11b      	cbz	r3, d4eda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ed2:	2203      	movs	r2, #3
   d4ed4:	4621      	mov	r1, r4
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eda:	2110      	movs	r1, #16
   d4edc:	4620      	mov	r0, r4
   d4ede:	f000 f9c0 	bl	d5262 <_ZdlPvj>
   d4ee2:	4628      	mov	r0, r5
   d4ee4:	2114      	movs	r1, #20
      }
   d4ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eea:	f000 b9ba 	b.w	d5262 <_ZdlPvj>
   d4eee:	bd38      	pop	{r3, r4, r5, pc}

000d4ef0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4ef0:	b110      	cbz	r0, d4ef8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4ef2:	6803      	ldr	r3, [r0, #0]
   d4ef4:	685b      	ldr	r3, [r3, #4]
   d4ef6:	4718      	bx	r3
   d4ef8:	4770      	bx	lr

000d4efa <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4efa:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4efc:	6803      	ldr	r3, [r0, #0]
   d4efe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4f00:	b1bb      	cbz	r3, d4f32 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4f02:	6858      	ldr	r0, [r3, #4]
   d4f04:	f7ff f9ac 	bl	d4260 <os_thread_is_current>
   d4f08:	b978      	cbnz	r0, d4f2a <_ZN6ThreadD1Ev+0x30>
   d4f0a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4f0c:	7c5a      	ldrb	r2, [r3, #17]
   d4f0e:	b912      	cbnz	r2, d4f16 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4f10:	6858      	ldr	r0, [r3, #4]
   d4f12:	f7ff f9ad 	bl	d4270 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4f16:	6823      	ldr	r3, [r4, #0]
   d4f18:	6858      	ldr	r0, [r3, #4]
   d4f1a:	f7ff f9b1 	bl	d4280 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f1e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f20:	2300      	movs	r3, #0
   d4f22:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4f24:	b128      	cbz	r0, d4f32 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4f26:	f7ff ffcd 	bl	d4ec4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f2a:	6820      	ldr	r0, [r4, #0]
   d4f2c:	b108      	cbz	r0, d4f32 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4f2e:	f7ff ffc9 	bl	d4ec4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f32:	4620      	mov	r0, r4
   d4f34:	bd10      	pop	{r4, pc}
	...

000d4f38 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f38:	b538      	push	{r3, r4, r5, lr}
   d4f3a:	4b0c      	ldr	r3, [pc, #48]	; (d4f6c <_ZN5spark9MeshClassD1Ev+0x34>)
   d4f3c:	6003      	str	r3, [r0, #0]
   d4f3e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f40:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4f44:	b108      	cbz	r0, d4f4a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f46:	f7ff f8a8 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f4a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4f4e:	b135      	cbz	r5, d4f5e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f50:	4628      	mov	r0, r5
   d4f52:	f7ff ffd2 	bl	d4efa <_ZN6ThreadD1Ev>
   d4f56:	2104      	movs	r1, #4
   d4f58:	4628      	mov	r0, r5
   d4f5a:	f000 f982 	bl	d5262 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f5e:	68a0      	ldr	r0, [r4, #8]
   d4f60:	b108      	cbz	r0, d4f66 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4f62:	f7ff ffc5 	bl	d4ef0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f66:	4620      	mov	r0, r4
   d4f68:	bd38      	pop	{r3, r4, r5, pc}
   d4f6a:	bf00      	nop
   d4f6c:	000d5804 	.word	0x000d5804

000d4f70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4f70:	b538      	push	{r3, r4, r5, lr}
   d4f72:	4c0e      	ldr	r4, [pc, #56]	; (d4fac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4f74:	4b0e      	ldr	r3, [pc, #56]	; (d4fb0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4f76:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f78:	2500      	movs	r5, #0
   d4f7a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4f7c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4f80:	6063      	str	r3, [r4, #4]
   d4f82:	60a5      	str	r5, [r4, #8]
   d4f84:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f88:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f8c:	f7ff f988 	bl	d42a0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f90:	4b08      	ldr	r3, [pc, #32]	; (d4fb4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f92:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f96:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f9a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	4a06      	ldr	r2, [pc, #24]	; (d4fb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4fa0:	4906      	ldr	r1, [pc, #24]	; (d4fbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4fa6:	f000 b957 	b.w	d5258 <__aeabi_atexit>
   d4faa:	bf00      	nop
   d4fac:	2003e538 	.word	0x2003e538
   d4fb0:	000d5838 	.word	0x000d5838
   d4fb4:	000d5804 	.word	0x000d5804
   d4fb8:	2003e398 	.word	0x2003e398
   d4fbc:	000d4f39 	.word	0x000d4f39

000d4fc0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fc0:	2300      	movs	r3, #0
   d4fc2:	461a      	mov	r2, r3
   d4fc4:	6840      	ldr	r0, [r0, #4]
   d4fc6:	f7ff ba4f 	b.w	d4468 <network_connect>

000d4fca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fca:	2200      	movs	r2, #0
   d4fcc:	2102      	movs	r1, #2
   d4fce:	6840      	ldr	r0, [r0, #4]
   d4fd0:	f7ff ba5a 	b.w	d4488 <network_disconnect>

000d4fd4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fd4:	2200      	movs	r2, #0
   d4fd6:	4611      	mov	r1, r2
   d4fd8:	6840      	ldr	r0, [r0, #4]
   d4fda:	f7ff ba4d 	b.w	d4478 <network_connecting>

000d4fde <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fde:	2200      	movs	r2, #0
   d4fe0:	4611      	mov	r1, r2
   d4fe2:	6840      	ldr	r0, [r0, #4]
   d4fe4:	f7ff ba58 	b.w	d4498 <network_ready>

000d4fe8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fe8:	2300      	movs	r3, #0
   d4fea:	461a      	mov	r2, r3
   d4fec:	4619      	mov	r1, r3
   d4fee:	6840      	ldr	r0, [r0, #4]
   d4ff0:	f7ff ba5a 	b.w	d44a8 <network_on>

000d4ff4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4ff4:	2300      	movs	r3, #0
   d4ff6:	461a      	mov	r2, r3
   d4ff8:	4619      	mov	r1, r3
   d4ffa:	6840      	ldr	r0, [r0, #4]
   d4ffc:	f7ff ba5c 	b.w	d44b8 <network_off>

000d5000 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5000:	2200      	movs	r2, #0
   d5002:	f081 0101 	eor.w	r1, r1, #1
   d5006:	6840      	ldr	r0, [r0, #4]
   d5008:	f7ff ba5e 	b.w	d44c8 <network_listen>

000d500c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d500c:	2200      	movs	r2, #0
   d500e:	6840      	ldr	r0, [r0, #4]
   d5010:	f7ff ba6a 	b.w	d44e8 <network_set_listen_timeout>

000d5014 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5014:	2200      	movs	r2, #0
   d5016:	4611      	mov	r1, r2
   d5018:	6840      	ldr	r0, [r0, #4]
   d501a:	f7ff ba6d 	b.w	d44f8 <network_get_listen_timeout>

000d501e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d501e:	2200      	movs	r2, #0
   d5020:	4611      	mov	r1, r2
   d5022:	6840      	ldr	r0, [r0, #4]
   d5024:	f7ff ba58 	b.w	d44d8 <network_listening>

000d5028 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d502c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d502e:	b095      	sub	sp, #84	; 0x54
   d5030:	4616      	mov	r6, r2
   d5032:	460d      	mov	r5, r1
   d5034:	4607      	mov	r7, r0
    IPAddress addr;
   d5036:	f7ff fd41 	bl	d4abc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d503a:	4621      	mov	r1, r4
   d503c:	2220      	movs	r2, #32
   d503e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5040:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5042:	f000 fa72 	bl	d552a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5046:	2340      	movs	r3, #64	; 0x40
   d5048:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d504a:	4621      	mov	r1, r4
   d504c:	466b      	mov	r3, sp
   d504e:	aa0c      	add	r2, sp, #48	; 0x30
   d5050:	4630      	mov	r0, r6
   d5052:	f7ff f8ad 	bl	d41b0 <netdb_getaddrinfo>
    if (!r) {
   d5056:	4604      	mov	r4, r0
   d5058:	2800      	cmp	r0, #0
   d505a:	d144      	bne.n	d50e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d505c:	4602      	mov	r2, r0
   d505e:	2101      	movs	r1, #1
   d5060:	6868      	ldr	r0, [r5, #4]
   d5062:	f7ff fa19 	bl	d4498 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5066:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5068:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d506a:	4622      	mov	r2, r4
   d506c:	6868      	ldr	r0, [r5, #4]
   d506e:	f7ff fa13 	bl	d4498 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5072:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5074:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5076:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5078:	2e00      	cmp	r6, #0
   d507a:	d034      	beq.n	d50e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d507c:	2900      	cmp	r1, #0
   d507e:	d132      	bne.n	d50e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5080:	6873      	ldr	r3, [r6, #4]
   d5082:	2b02      	cmp	r3, #2
   d5084:	d002      	beq.n	d508c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5086:	2b0a      	cmp	r3, #10
   d5088:	d009      	beq.n	d509e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d508a:	e02a      	b.n	d50e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d508c:	f1b8 0f00 	cmp.w	r8, #0
   d5090:	d027      	beq.n	d50e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5092:	6971      	ldr	r1, [r6, #20]
   d5094:	4638      	mov	r0, r7
   d5096:	3104      	adds	r1, #4
   d5098:	f7ff fd3d 	bl	d4b16 <_ZN9IPAddressaSEPKh>
   d509c:	e020      	b.n	d50e0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d509e:	f1b9 0f00 	cmp.w	r9, #0
   d50a2:	d01e      	beq.n	d50e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d50a4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d50a6:	2211      	movs	r2, #17
   d50a8:	a801      	add	r0, sp, #4
   d50aa:	f000 fa3e 	bl	d552a <memset>
                    a.v = 6;
   d50ae:	2306      	movs	r3, #6
   d50b0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50b4:	ad01      	add	r5, sp, #4
   d50b6:	f104 0308 	add.w	r3, r4, #8
   d50ba:	3418      	adds	r4, #24
   d50bc:	6818      	ldr	r0, [r3, #0]
   d50be:	6859      	ldr	r1, [r3, #4]
   d50c0:	462a      	mov	r2, r5
   d50c2:	c203      	stmia	r2!, {r0, r1}
   d50c4:	3308      	adds	r3, #8
   d50c6:	42a3      	cmp	r3, r4
   d50c8:	4615      	mov	r5, r2
   d50ca:	d1f7      	bne.n	d50bc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50cc:	a901      	add	r1, sp, #4
   d50ce:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50d0:	ad07      	add	r5, sp, #28
   d50d2:	f7ff fd01 	bl	d4ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50d8:	1d3c      	adds	r4, r7, #4
   d50da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50dc:	682b      	ldr	r3, [r5, #0]
   d50de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d50e0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50e2:	69f6      	ldr	r6, [r6, #28]
   d50e4:	e7c8      	b.n	d5078 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50e6:	9800      	ldr	r0, [sp, #0]
   d50e8:	f7ff f85a 	bl	d41a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50ec:	4638      	mov	r0, r7
   d50ee:	b015      	add	sp, #84	; 0x54
   d50f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50f4:	4b02      	ldr	r3, [pc, #8]	; (d5100 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50f6:	4a03      	ldr	r2, [pc, #12]	; (d5104 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50f8:	601a      	str	r2, [r3, #0]
   d50fa:	2200      	movs	r2, #0
   d50fc:	605a      	str	r2, [r3, #4]
   d50fe:	4770      	bx	lr
   d5100:	2003e70c 	.word	0x2003e70c
   d5104:	000d5838 	.word	0x000d5838

000d5108 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5108:	b510      	push	{r4, lr}
   d510a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d510c:	480f      	ldr	r0, [pc, #60]	; (d514c <pinAvailable+0x44>)
   d510e:	f7ff fa95 	bl	d463c <_ZN8SPIClass9isEnabledEv>
   d5112:	b128      	cbz	r0, d5120 <pinAvailable+0x18>
   d5114:	f1a4 030b 	sub.w	r3, r4, #11
   d5118:	2b02      	cmp	r3, #2
   d511a:	d801      	bhi.n	d5120 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d511c:	2000      	movs	r0, #0
   d511e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5120:	f000 f87a 	bl	d5218 <_Z19__fetch_global_Wirev>
   d5124:	f7ff fe96 	bl	d4e54 <_ZN7TwoWire9isEnabledEv>
   d5128:	b108      	cbz	r0, d512e <pinAvailable+0x26>
   d512a:	2c01      	cmp	r4, #1
   d512c:	d9f6      	bls.n	d511c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d512e:	f7ff fe2d 	bl	d4d8c <_Z22__fetch_global_Serial1v>
   d5132:	f7ff fe27 	bl	d4d84 <_ZN11USARTSerial9isEnabledEv>
   d5136:	b118      	cbz	r0, d5140 <pinAvailable+0x38>
   d5138:	f1a4 0309 	sub.w	r3, r4, #9
   d513c:	2b01      	cmp	r3, #1
   d513e:	d9ed      	bls.n	d511c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5140:	2c23      	cmp	r4, #35	; 0x23
   d5142:	bf8c      	ite	hi
   d5144:	2000      	movhi	r0, #0
   d5146:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5148:	bd10      	pop	{r4, pc}
   d514a:	bf00      	nop
   d514c:	2003e714 	.word	0x2003e714

000d5150 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5150:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5152:	b538      	push	{r3, r4, r5, lr}
   d5154:	4604      	mov	r4, r0
   d5156:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5158:	d80a      	bhi.n	d5170 <pinMode+0x20>
   d515a:	29ff      	cmp	r1, #255	; 0xff
   d515c:	d008      	beq.n	d5170 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d515e:	f7ff ffd3 	bl	d5108 <pinAvailable>
   d5162:	b128      	cbz	r0, d5170 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5164:	4629      	mov	r1, r5
   d5166:	4620      	mov	r0, r4
}
   d5168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d516c:	f7ff b838 	b.w	d41e0 <HAL_Pin_Mode>
   d5170:	bd38      	pop	{r3, r4, r5, pc}

000d5172 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5172:	b538      	push	{r3, r4, r5, lr}
   d5174:	4604      	mov	r4, r0
   d5176:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5178:	f7ff f83a 	bl	d41f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d517c:	28ff      	cmp	r0, #255	; 0xff
   d517e:	d010      	beq.n	d51a2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5180:	2806      	cmp	r0, #6
   d5182:	d804      	bhi.n	d518e <digitalWrite+0x1c>
   d5184:	234d      	movs	r3, #77	; 0x4d
   d5186:	fa23 f000 	lsr.w	r0, r3, r0
   d518a:	07c3      	lsls	r3, r0, #31
   d518c:	d409      	bmi.n	d51a2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d518e:	4620      	mov	r0, r4
   d5190:	f7ff ffba 	bl	d5108 <pinAvailable>
   d5194:	b128      	cbz	r0, d51a2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5196:	4629      	mov	r1, r5
   d5198:	4620      	mov	r0, r4
}
   d519a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d519e:	f7ff b82f 	b.w	d4200 <HAL_GPIO_Write>
   d51a2:	bd38      	pop	{r3, r4, r5, pc}

000d51a4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d51a4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d51a6:	b510      	push	{r4, lr}
   d51a8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d51aa:	bf9c      	itt	ls
   d51ac:	340e      	addls	r4, #14
   d51ae:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d51b0:	4620      	mov	r0, r4
   d51b2:	f7ff ffa9 	bl	d5108 <pinAvailable>
   d51b6:	b150      	cbz	r0, d51ce <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d51b8:	2103      	movs	r1, #3
   d51ba:	4620      	mov	r0, r4
   d51bc:	f7ff f808 	bl	d41d0 <HAL_Validate_Pin_Function>
   d51c0:	2803      	cmp	r0, #3
   d51c2:	d104      	bne.n	d51ce <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d51c4:	4620      	mov	r0, r4
}
   d51c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d51ca:	f7ff b821 	b.w	d4210 <HAL_ADC_Read>
}
   d51ce:	2000      	movs	r0, #0
   d51d0:	bd10      	pop	{r4, pc}
	...

000d51d4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d51d4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d51d6:	4c0c      	ldr	r4, [pc, #48]	; (d5208 <_GLOBAL__sub_I_SPI+0x34>)
   d51d8:	4e0c      	ldr	r6, [pc, #48]	; (d520c <_GLOBAL__sub_I_SPI+0x38>)
   d51da:	4d0d      	ldr	r5, [pc, #52]	; (d5210 <_GLOBAL__sub_I_SPI+0x3c>)
   d51dc:	2100      	movs	r1, #0
   d51de:	4620      	mov	r0, r4
   d51e0:	f7ff fa18 	bl	d4614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d51e4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d51e6:	4c0b      	ldr	r4, [pc, #44]	; (d5214 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d51e8:	4632      	mov	r2, r6
   d51ea:	4629      	mov	r1, r5
   d51ec:	f000 f834 	bl	d5258 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d51f0:	2101      	movs	r1, #1
   d51f2:	4620      	mov	r0, r4
   d51f4:	f7ff fa0e 	bl	d4614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d51f8:	4632      	mov	r2, r6
   d51fa:	4629      	mov	r1, r5
   d51fc:	4620      	mov	r0, r4
   d51fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5202:	f000 b829 	b.w	d5258 <__aeabi_atexit>
   d5206:	bf00      	nop
   d5208:	2003e714 	.word	0x2003e714
   d520c:	2003e398 	.word	0x2003e398
   d5210:	000d4605 	.word	0x000d4605
   d5214:	2003e724 	.word	0x2003e724

000d5218 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5218:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d521a:	4d0b      	ldr	r5, [pc, #44]	; (d5248 <_Z19__fetch_global_Wirev+0x30>)
   d521c:	6829      	ldr	r1, [r5, #0]
   d521e:	f011 0401 	ands.w	r4, r1, #1
   d5222:	d10f      	bne.n	d5244 <_Z19__fetch_global_Wirev+0x2c>
   d5224:	4628      	mov	r0, r5
   d5226:	f7fe ff3a 	bl	d409e <__cxa_guard_acquire>
   d522a:	b158      	cbz	r0, d5244 <_Z19__fetch_global_Wirev+0x2c>
   d522c:	4621      	mov	r1, r4
   d522e:	4807      	ldr	r0, [pc, #28]	; (d524c <_Z19__fetch_global_Wirev+0x34>)
   d5230:	f7ff fdfe 	bl	d4e30 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5234:	4628      	mov	r0, r5
   d5236:	f7fe ff37 	bl	d40a8 <__cxa_guard_release>
   d523a:	4a05      	ldr	r2, [pc, #20]	; (d5250 <_Z19__fetch_global_Wirev+0x38>)
   d523c:	4905      	ldr	r1, [pc, #20]	; (d5254 <_Z19__fetch_global_Wirev+0x3c>)
   d523e:	4803      	ldr	r0, [pc, #12]	; (d524c <_Z19__fetch_global_Wirev+0x34>)
   d5240:	f000 f80a 	bl	d5258 <__aeabi_atexit>
	return wire;
}
   d5244:	4801      	ldr	r0, [pc, #4]	; (d524c <_Z19__fetch_global_Wirev+0x34>)
   d5246:	bd38      	pop	{r3, r4, r5, pc}
   d5248:	2003e738 	.word	0x2003e738
   d524c:	2003e73c 	.word	0x2003e73c
   d5250:	2003e398 	.word	0x2003e398
   d5254:	000d4dd9 	.word	0x000d4dd9

000d5258 <__aeabi_atexit>:
   d5258:	460b      	mov	r3, r1
   d525a:	4601      	mov	r1, r0
   d525c:	4618      	mov	r0, r3
   d525e:	f000 b94b 	b.w	d54f8 <__cxa_atexit>

000d5262 <_ZdlPvj>:
   d5262:	f7fe bf18 	b.w	d4096 <_ZdlPv>
	...

000d5268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5268:	4b18      	ldr	r3, [pc, #96]	; (d52cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d526a:	681a      	ldr	r2, [r3, #0]
   d526c:	07d1      	lsls	r1, r2, #31
   d526e:	bf5c      	itt	pl
   d5270:	2201      	movpl	r2, #1
   d5272:	601a      	strpl	r2, [r3, #0]
   d5274:	4b16      	ldr	r3, [pc, #88]	; (d52d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5276:	681a      	ldr	r2, [r3, #0]
   d5278:	07d2      	lsls	r2, r2, #31
   d527a:	bf5c      	itt	pl
   d527c:	2201      	movpl	r2, #1
   d527e:	601a      	strpl	r2, [r3, #0]
   d5280:	4b14      	ldr	r3, [pc, #80]	; (d52d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5282:	681a      	ldr	r2, [r3, #0]
   d5284:	07d0      	lsls	r0, r2, #31
   d5286:	bf5c      	itt	pl
   d5288:	2201      	movpl	r2, #1
   d528a:	601a      	strpl	r2, [r3, #0]
   d528c:	4b12      	ldr	r3, [pc, #72]	; (d52d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d528e:	681a      	ldr	r2, [r3, #0]
   d5290:	07d1      	lsls	r1, r2, #31
   d5292:	bf5c      	itt	pl
   d5294:	2201      	movpl	r2, #1
   d5296:	601a      	strpl	r2, [r3, #0]
   d5298:	4b10      	ldr	r3, [pc, #64]	; (d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d529a:	681a      	ldr	r2, [r3, #0]
   d529c:	07d2      	lsls	r2, r2, #31
   d529e:	bf5c      	itt	pl
   d52a0:	2201      	movpl	r2, #1
   d52a2:	601a      	strpl	r2, [r3, #0]
   d52a4:	4b0e      	ldr	r3, [pc, #56]	; (d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d52a6:	681a      	ldr	r2, [r3, #0]
   d52a8:	07d0      	lsls	r0, r2, #31
   d52aa:	bf5c      	itt	pl
   d52ac:	2201      	movpl	r2, #1
   d52ae:	601a      	strpl	r2, [r3, #0]
   d52b0:	4b0c      	ldr	r3, [pc, #48]	; (d52e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d52b2:	681a      	ldr	r2, [r3, #0]
   d52b4:	07d1      	lsls	r1, r2, #31
   d52b6:	bf5c      	itt	pl
   d52b8:	2201      	movpl	r2, #1
   d52ba:	601a      	strpl	r2, [r3, #0]
   d52bc:	4b0a      	ldr	r3, [pc, #40]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d52be:	681a      	ldr	r2, [r3, #0]
   d52c0:	07d2      	lsls	r2, r2, #31
   d52c2:	bf5c      	itt	pl
   d52c4:	2201      	movpl	r2, #1
   d52c6:	601a      	strpl	r2, [r3, #0]
   d52c8:	4770      	bx	lr
   d52ca:	bf00      	nop
   d52cc:	2003e76c 	.word	0x2003e76c
   d52d0:	2003e768 	.word	0x2003e768
   d52d4:	2003e764 	.word	0x2003e764
   d52d8:	2003e760 	.word	0x2003e760
   d52dc:	2003e75c 	.word	0x2003e75c
   d52e0:	2003e758 	.word	0x2003e758
   d52e4:	2003e754 	.word	0x2003e754
   d52e8:	2003e750 	.word	0x2003e750

000d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d52ec:	4b24      	ldr	r3, [pc, #144]	; (d5380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d52ee:	681a      	ldr	r2, [r3, #0]
   d52f0:	07d0      	lsls	r0, r2, #31
   d52f2:	bf5c      	itt	pl
   d52f4:	2201      	movpl	r2, #1
   d52f6:	601a      	strpl	r2, [r3, #0]
   d52f8:	4b22      	ldr	r3, [pc, #136]	; (d5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d52fa:	681a      	ldr	r2, [r3, #0]
   d52fc:	07d1      	lsls	r1, r2, #31
   d52fe:	bf5c      	itt	pl
   d5300:	2201      	movpl	r2, #1
   d5302:	601a      	strpl	r2, [r3, #0]
   d5304:	4b20      	ldr	r3, [pc, #128]	; (d5388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5306:	681a      	ldr	r2, [r3, #0]
   d5308:	07d2      	lsls	r2, r2, #31
   d530a:	bf5c      	itt	pl
   d530c:	2201      	movpl	r2, #1
   d530e:	601a      	strpl	r2, [r3, #0]
   d5310:	4b1e      	ldr	r3, [pc, #120]	; (d538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5312:	681a      	ldr	r2, [r3, #0]
   d5314:	07d0      	lsls	r0, r2, #31
   d5316:	bf5c      	itt	pl
   d5318:	2201      	movpl	r2, #1
   d531a:	601a      	strpl	r2, [r3, #0]
   d531c:	4b1c      	ldr	r3, [pc, #112]	; (d5390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d531e:	681a      	ldr	r2, [r3, #0]
   d5320:	07d1      	lsls	r1, r2, #31
   d5322:	bf5c      	itt	pl
   d5324:	2201      	movpl	r2, #1
   d5326:	601a      	strpl	r2, [r3, #0]
   d5328:	4b1a      	ldr	r3, [pc, #104]	; (d5394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d532a:	681a      	ldr	r2, [r3, #0]
   d532c:	07d2      	lsls	r2, r2, #31
   d532e:	bf5c      	itt	pl
   d5330:	2201      	movpl	r2, #1
   d5332:	601a      	strpl	r2, [r3, #0]
   d5334:	4b18      	ldr	r3, [pc, #96]	; (d5398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5336:	681a      	ldr	r2, [r3, #0]
   d5338:	07d0      	lsls	r0, r2, #31
   d533a:	bf5c      	itt	pl
   d533c:	2201      	movpl	r2, #1
   d533e:	601a      	strpl	r2, [r3, #0]
   d5340:	4b16      	ldr	r3, [pc, #88]	; (d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5342:	681a      	ldr	r2, [r3, #0]
   d5344:	07d1      	lsls	r1, r2, #31
   d5346:	bf5c      	itt	pl
   d5348:	2201      	movpl	r2, #1
   d534a:	601a      	strpl	r2, [r3, #0]
   d534c:	4b14      	ldr	r3, [pc, #80]	; (d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d534e:	681a      	ldr	r2, [r3, #0]
   d5350:	07d2      	lsls	r2, r2, #31
   d5352:	bf5c      	itt	pl
   d5354:	2201      	movpl	r2, #1
   d5356:	601a      	strpl	r2, [r3, #0]
   d5358:	4b12      	ldr	r3, [pc, #72]	; (d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d535a:	681a      	ldr	r2, [r3, #0]
   d535c:	07d0      	lsls	r0, r2, #31
   d535e:	bf5c      	itt	pl
   d5360:	2201      	movpl	r2, #1
   d5362:	601a      	strpl	r2, [r3, #0]
   d5364:	4b10      	ldr	r3, [pc, #64]	; (d53a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5366:	681a      	ldr	r2, [r3, #0]
   d5368:	07d1      	lsls	r1, r2, #31
   d536a:	bf5c      	itt	pl
   d536c:	2201      	movpl	r2, #1
   d536e:	601a      	strpl	r2, [r3, #0]
   d5370:	4b0e      	ldr	r3, [pc, #56]	; (d53ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5372:	681a      	ldr	r2, [r3, #0]
   d5374:	07d2      	lsls	r2, r2, #31
   d5376:	bf5c      	itt	pl
   d5378:	2201      	movpl	r2, #1
   d537a:	601a      	strpl	r2, [r3, #0]
   d537c:	4770      	bx	lr
   d537e:	bf00      	nop
   d5380:	2003e79c 	.word	0x2003e79c
   d5384:	2003e798 	.word	0x2003e798
   d5388:	2003e794 	.word	0x2003e794
   d538c:	2003e790 	.word	0x2003e790
   d5390:	2003e78c 	.word	0x2003e78c
   d5394:	2003e788 	.word	0x2003e788
   d5398:	2003e784 	.word	0x2003e784
   d539c:	2003e780 	.word	0x2003e780
   d53a0:	2003e77c 	.word	0x2003e77c
   d53a4:	2003e778 	.word	0x2003e778
   d53a8:	2003e774 	.word	0x2003e774
   d53ac:	2003e770 	.word	0x2003e770

000d53b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d53b0:	4b24      	ldr	r3, [pc, #144]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d53b2:	681a      	ldr	r2, [r3, #0]
   d53b4:	07d0      	lsls	r0, r2, #31
   d53b6:	bf5c      	itt	pl
   d53b8:	2201      	movpl	r2, #1
   d53ba:	601a      	strpl	r2, [r3, #0]
   d53bc:	4b22      	ldr	r3, [pc, #136]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d1      	lsls	r1, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b20      	ldr	r3, [pc, #128]	; (d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d2      	lsls	r2, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b1e      	ldr	r3, [pc, #120]	; (d5450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d0      	lsls	r0, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b1c      	ldr	r3, [pc, #112]	; (d5454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d1      	lsls	r1, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b1a      	ldr	r3, [pc, #104]	; (d5458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d2      	lsls	r2, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b18      	ldr	r3, [pc, #96]	; (d545c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d0      	lsls	r0, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4b16      	ldr	r3, [pc, #88]	; (d5460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5406:	681a      	ldr	r2, [r3, #0]
   d5408:	07d1      	lsls	r1, r2, #31
   d540a:	bf5c      	itt	pl
   d540c:	2201      	movpl	r2, #1
   d540e:	601a      	strpl	r2, [r3, #0]
   d5410:	4b14      	ldr	r3, [pc, #80]	; (d5464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5412:	681a      	ldr	r2, [r3, #0]
   d5414:	07d2      	lsls	r2, r2, #31
   d5416:	bf5c      	itt	pl
   d5418:	2201      	movpl	r2, #1
   d541a:	601a      	strpl	r2, [r3, #0]
   d541c:	4b12      	ldr	r3, [pc, #72]	; (d5468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d541e:	681a      	ldr	r2, [r3, #0]
   d5420:	07d0      	lsls	r0, r2, #31
   d5422:	bf5c      	itt	pl
   d5424:	2201      	movpl	r2, #1
   d5426:	601a      	strpl	r2, [r3, #0]
   d5428:	4b10      	ldr	r3, [pc, #64]	; (d546c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d542a:	681a      	ldr	r2, [r3, #0]
   d542c:	07d1      	lsls	r1, r2, #31
   d542e:	bf5c      	itt	pl
   d5430:	2201      	movpl	r2, #1
   d5432:	601a      	strpl	r2, [r3, #0]
   d5434:	4b0e      	ldr	r3, [pc, #56]	; (d5470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5436:	681a      	ldr	r2, [r3, #0]
   d5438:	07d2      	lsls	r2, r2, #31
   d543a:	bf5c      	itt	pl
   d543c:	2201      	movpl	r2, #1
   d543e:	601a      	strpl	r2, [r3, #0]
   d5440:	4770      	bx	lr
   d5442:	bf00      	nop
   d5444:	2003e7cc 	.word	0x2003e7cc
   d5448:	2003e7c8 	.word	0x2003e7c8
   d544c:	2003e7c4 	.word	0x2003e7c4
   d5450:	2003e7c0 	.word	0x2003e7c0
   d5454:	2003e7bc 	.word	0x2003e7bc
   d5458:	2003e7b8 	.word	0x2003e7b8
   d545c:	2003e7b4 	.word	0x2003e7b4
   d5460:	2003e7b0 	.word	0x2003e7b0
   d5464:	2003e7ac 	.word	0x2003e7ac
   d5468:	2003e7a8 	.word	0x2003e7a8
   d546c:	2003e7a4 	.word	0x2003e7a4
   d5470:	2003e7a0 	.word	0x2003e7a0

000d5474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5474:	4b18      	ldr	r3, [pc, #96]	; (d54d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d1      	lsls	r1, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4b16      	ldr	r3, [pc, #88]	; (d54dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5482:	681a      	ldr	r2, [r3, #0]
   d5484:	07d2      	lsls	r2, r2, #31
   d5486:	bf5c      	itt	pl
   d5488:	2201      	movpl	r2, #1
   d548a:	601a      	strpl	r2, [r3, #0]
   d548c:	4b14      	ldr	r3, [pc, #80]	; (d54e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d548e:	681a      	ldr	r2, [r3, #0]
   d5490:	07d0      	lsls	r0, r2, #31
   d5492:	bf5c      	itt	pl
   d5494:	2201      	movpl	r2, #1
   d5496:	601a      	strpl	r2, [r3, #0]
   d5498:	4b12      	ldr	r3, [pc, #72]	; (d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d549a:	681a      	ldr	r2, [r3, #0]
   d549c:	07d1      	lsls	r1, r2, #31
   d549e:	bf5c      	itt	pl
   d54a0:	2201      	movpl	r2, #1
   d54a2:	601a      	strpl	r2, [r3, #0]
   d54a4:	4b10      	ldr	r3, [pc, #64]	; (d54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	07d2      	lsls	r2, r2, #31
   d54aa:	bf5c      	itt	pl
   d54ac:	2201      	movpl	r2, #1
   d54ae:	601a      	strpl	r2, [r3, #0]
   d54b0:	4b0e      	ldr	r3, [pc, #56]	; (d54ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d54b2:	681a      	ldr	r2, [r3, #0]
   d54b4:	07d0      	lsls	r0, r2, #31
   d54b6:	bf5c      	itt	pl
   d54b8:	2201      	movpl	r2, #1
   d54ba:	601a      	strpl	r2, [r3, #0]
   d54bc:	4b0c      	ldr	r3, [pc, #48]	; (d54f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d54be:	681a      	ldr	r2, [r3, #0]
   d54c0:	07d1      	lsls	r1, r2, #31
   d54c2:	bf5c      	itt	pl
   d54c4:	2201      	movpl	r2, #1
   d54c6:	601a      	strpl	r2, [r3, #0]
   d54c8:	4b0a      	ldr	r3, [pc, #40]	; (d54f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d54ca:	681a      	ldr	r2, [r3, #0]
   d54cc:	07d2      	lsls	r2, r2, #31
   d54ce:	bf5c      	itt	pl
   d54d0:	2201      	movpl	r2, #1
   d54d2:	601a      	strpl	r2, [r3, #0]
   d54d4:	4770      	bx	lr
   d54d6:	bf00      	nop
   d54d8:	2003e7ec 	.word	0x2003e7ec
   d54dc:	2003e7e8 	.word	0x2003e7e8
   d54e0:	2003e7e4 	.word	0x2003e7e4
   d54e4:	2003e7e0 	.word	0x2003e7e0
   d54e8:	2003e7dc 	.word	0x2003e7dc
   d54ec:	2003e7d8 	.word	0x2003e7d8
   d54f0:	2003e7d4 	.word	0x2003e7d4
   d54f4:	2003e7d0 	.word	0x2003e7d0

000d54f8 <__cxa_atexit>:
   d54f8:	b510      	push	{r4, lr}
   d54fa:	4c05      	ldr	r4, [pc, #20]	; (d5510 <__cxa_atexit+0x18>)
   d54fc:	4613      	mov	r3, r2
   d54fe:	b12c      	cbz	r4, d550c <__cxa_atexit+0x14>
   d5500:	460a      	mov	r2, r1
   d5502:	4601      	mov	r1, r0
   d5504:	2002      	movs	r0, #2
   d5506:	f3af 8000 	nop.w
   d550a:	bd10      	pop	{r4, pc}
   d550c:	4620      	mov	r0, r4
   d550e:	bd10      	pop	{r4, pc}
   d5510:	00000000 	.word	0x00000000

000d5514 <memcpy>:
   d5514:	b510      	push	{r4, lr}
   d5516:	1e43      	subs	r3, r0, #1
   d5518:	440a      	add	r2, r1
   d551a:	4291      	cmp	r1, r2
   d551c:	d004      	beq.n	d5528 <memcpy+0x14>
   d551e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5522:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5526:	e7f8      	b.n	d551a <memcpy+0x6>
   d5528:	bd10      	pop	{r4, pc}

000d552a <memset>:
   d552a:	4402      	add	r2, r0
   d552c:	4603      	mov	r3, r0
   d552e:	4293      	cmp	r3, r2
   d5530:	d002      	beq.n	d5538 <memset+0xe>
   d5532:	f803 1b01 	strb.w	r1, [r3], #1
   d5536:	e7fa      	b.n	d552e <memset+0x4>
   d5538:	4770      	bx	lr
	...

000d553c <srand>:
   d553c:	b538      	push	{r3, r4, r5, lr}
   d553e:	4b12      	ldr	r3, [pc, #72]	; (d5588 <srand+0x4c>)
   d5540:	681c      	ldr	r4, [r3, #0]
   d5542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5544:	4605      	mov	r5, r0
   d5546:	b9d3      	cbnz	r3, d557e <srand+0x42>
   d5548:	2018      	movs	r0, #24
   d554a:	f7fe fffd 	bl	d4548 <malloc>
   d554e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5552:	63a0      	str	r0, [r4, #56]	; 0x38
   d5554:	8003      	strh	r3, [r0, #0]
   d5556:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d555a:	8043      	strh	r3, [r0, #2]
   d555c:	f241 2334 	movw	r3, #4660	; 0x1234
   d5560:	8083      	strh	r3, [r0, #4]
   d5562:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5566:	80c3      	strh	r3, [r0, #6]
   d5568:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d556c:	8103      	strh	r3, [r0, #8]
   d556e:	2305      	movs	r3, #5
   d5570:	8143      	strh	r3, [r0, #10]
   d5572:	230b      	movs	r3, #11
   d5574:	8183      	strh	r3, [r0, #12]
   d5576:	2201      	movs	r2, #1
   d5578:	2300      	movs	r3, #0
   d557a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d557e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5580:	2200      	movs	r2, #0
   d5582:	611d      	str	r5, [r3, #16]
   d5584:	615a      	str	r2, [r3, #20]
   d5586:	bd38      	pop	{r3, r4, r5, pc}
   d5588:	2003e394 	.word	0x2003e394

000d558c <strcmp>:
   d558c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5590:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5594:	2a01      	cmp	r2, #1
   d5596:	bf28      	it	cs
   d5598:	429a      	cmpcs	r2, r3
   d559a:	d0f7      	beq.n	d558c <strcmp>
   d559c:	1ad0      	subs	r0, r2, r3
   d559e:	4770      	bx	lr

000d55a0 <strlen>:
   d55a0:	4603      	mov	r3, r0
   d55a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d55a6:	2a00      	cmp	r2, #0
   d55a8:	d1fb      	bne.n	d55a2 <strlen+0x2>
   d55aa:	1a18      	subs	r0, r3, r0
   d55ac:	3801      	subs	r0, #1
   d55ae:	4770      	bx	lr

000d55b0 <dynalib_user>:
   d55b0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d55c0:	0000 0000 6e6f 6f00 6666 6100 616e 6f6c     ....on.off.analo
   d55d0:	7667 6c61 6575 6c00 6465 2500 0064 0000     gvalue.led.%d...

000d55e0 <_ZTVN5spark13EthernetClassE>:
	...
   d55e8:	45e7 000d 45dd 000d 45d3 000d 45c9 000d     .E...E...E...E..
   d55f8:	45bd 000d 45b1 000d 45a5 000d 459d 000d     .E...E...E...E..
   d5608:	4593 000d 4589 000d 5029 000d               .E...E..)P..

000d5614 <_ZTV8SPIClass>:
	...
   d561c:	4605 000d 4607 000d 6162 6475 5300 7265     .F...F..baud.Ser
   d562c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d563c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d564c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d565c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d566c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d567c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d568c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d569c:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d56ac:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d56bc:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d56cc:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d56dc:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d56ec:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d56fc:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   d570c:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d571c:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d572c <_ZTV9IPAddress>:
	...
   d5734:	4a57 000d 4a47 000d 4a49 000d               WJ..GJ..IJ..

000d5740 <_ZTV9USBSerial>:
	...
   d5748:	4b31 000d 4b81 000d 4b8f 000d 4779 000d     1K...K...K..yG..
   d5758:	4b6d 000d 4b33 000d 4b49 000d 4b7b 000d     mK..3K..IK..{K..
   d5768:	4b5f 000d 4b2d 000d                         _K..-K..

000d5770 <_ZTVN5spark13CellularClassE>:
	...
   d5778:	4c9b 000d 4c91 000d 4c87 000d 4c3d 000d     .L...L...L..=L..
   d5788:	4c7b 000d 4c6f 000d 4c63 000d 4c5b 000d     {L..oL..cL..[L..
   d5798:	4c51 000d 4c47 000d 5029 000d               QL..GL..)P..

000d57a4 <_ZTV11USARTSerial>:
	...
   d57ac:	4cd5 000d 4d25 000d 4d33 000d 4779 000d     .L..%M..3M..yG..
   d57bc:	4ce9 000d 4d0b 000d 4cf7 000d 4d1f 000d     .L...M...L...M..
   d57cc:	4cd7 000d 4cdb 000d                         .L...L..

000d57d4 <_ZTV7TwoWire>:
	...
   d57dc:	4dd9 000d 4e23 000d 4dfb 000d 4ddb 000d     .M..#N...M...M..
   d57ec:	4e03 000d 4e0b 000d 4e13 000d 4e1b 000d     .N...N...N...N..

000d57fc <_ZTVN5spark9MeshClassE>:
	...
   d5804:	4ebb 000d 4eb1 000d 4ea7 000d 4e9d 000d     .N...N...N...N..
   d5814:	4e91 000d 4e85 000d 4e79 000d 4e71 000d     .N...N..yN..qN..
   d5824:	4e67 000d 4e5d 000d 5029 000d               gN..]N..)P..

000d5830 <_ZTVN5spark12NetworkClassE>:
	...
   d5838:	4fc1 000d 4fcb 000d 4fd5 000d 4fdf 000d     .O...O...O...O..
   d5848:	4fe9 000d 4ff5 000d 5001 000d 500d 000d     .O...O...P...P..
   d5858:	5015 000d 501f 000d 5029 000d               .P...P..)P..

000d5864 <__sf_fake_stdin>:
	...

000d5884 <__sf_fake_stdout>:
	...

000d58a4 <__sf_fake_stderr>:
	...
   d58c4:	0043                                        C.

000d58c6 <link_const_variable_data_end>:
	...

000d58c8 <link_constructors_location>:
   d58c8:	000d419d 	.word	0x000d419d
   d58cc:	000d45f1 	.word	0x000d45f1
   d58d0:	000d4645 	.word	0x000d4645
   d58d4:	000d4769 	.word	0x000d4769
   d58d8:	000d48b5 	.word	0x000d48b5
   d58dc:	000d48c5 	.word	0x000d48c5
   d58e0:	000d48fd 	.word	0x000d48fd
   d58e4:	000d4ca5 	.word	0x000d4ca5
   d58e8:	000d4f71 	.word	0x000d4f71
   d58ec:	000d50f5 	.word	0x000d50f5
   d58f0:	000d51d5 	.word	0x000d51d5
   d58f4:	000d5269 	.word	0x000d5269
   d58f8:	000d52ed 	.word	0x000d52ed
   d58fc:	000d53b1 	.word	0x000d53b1
   d5900:	000d5475 	.word	0x000d5475

000d5904 <link_constructors_end>:
	...
